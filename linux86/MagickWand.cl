;; This file was automatically generated by SWIG (http://www.swig.org).
;; Version 2.0.0
;;
;; Do not make changes to this file unless you know what you are doing--modify
;; the SWIG interface file instead.

(defpackage :swig.MagickWand
  (:use :common-lisp :ff :excl)
  (:export #:*swig-identifier-converter* #:*swig-module-name*
           #:*void* #:*swig-export-list*))
(in-package :swig.MagickWand)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *swig-identifier-converter* 'identifier-convert-null)
  (defparameter *swig-module-name* :MagickWand))

(defpackage :MagickWand
  (:use :common-lisp :swig.MagickWand :ff :excl))


(eval-when (:compile-toplevel :load-toplevel :execute)

  ;; avoid compiling ef-templates at runtime
  (excl:find-external-format :fat)
  (excl:find-external-format :fat-le)

;;; You can define your own identifier converter if you want.
;;; Use the -identifier-converter command line argument to
;;; specify its name.

(eval-when (:compile-toplevel :load-toplevel :execute)
   (cl::defparameter *swig-export-list* nil))

(cl::defconstant *void* :..void..)

;; parsers to aid in finding SWIG definitions in files.
(cl::defun scm-p1 (form)
  (let* ((info (cl::second form))
	 (id (car info))
	 (id-args (if (eq (cl::car form) 'swig-dispatcher)
		      (cl::cdr info)
		      (cl::cddr info))))
    (cl::apply *swig-identifier-converter* id 
	   (cl::progn (cl::when (cl::eq (cl::car form) 'swig-dispatcher)
		    (cl::remf id-args :arities))
		  id-args))))

(cl::defmacro defswig1 (name (&rest args) &body body)
  `(cl::progn (cl::defmacro ,name ,args
	    ,@body)
	  (excl::define-simple-parser ,name scm-p1)) )

(cl::defmacro defswig2 (name (&rest args) &body body)
  `(cl::progn (cl::defmacro ,name ,args
	    ,@body)
	  (excl::define-simple-parser ,name second)))

(defun read-symbol-from-string (string)
  (cl::multiple-value-bind (result position)
      (cl::read-from-string string nil "eof" :preserve-whitespace t)
    (cl::if (cl::and (cl::symbolp result)
    	             (cl::eql position (cl::length string)))
        result
	(cl::multiple-value-bind (sym)
	    (cl::intern string)
	  sym))))

(cl::defun full-name (id type arity class)
  ; We need some kind of a hack here to handle template classes
  ; and other synonym types right. We need the original name.
  (let*( (sym (read-symbol-from-string 
                (if (eq *swig-identifier-converter* 'identifier-convert-lispify)
                  (string-lispify id)
                  id)))
         (sym-class (find-class sym nil))
         (id (cond ( (not sym-class)
                     id )
                   ( (and sym-class
                          (not (eq (class-name sym-class)
                                sym)))
                     (class-name sym-class) )
                   ( t
                     id ))) )
    (cl::case type
      (:getter (cl::format nil "~@[~A_~]~A" class id))
      (:constructor (cl::format nil "new_~A~@[~A~]" id arity))
      (:destructor (cl::format nil "delete_~A" id))
      (:type (cl::format nil "ff_~A" id))
      (:slot id)
      (:ff-operator (cl::format nil "ffi_~A" id))
      (otherwise (cl::format nil "~@[~A_~]~A~@[~A~]"
                         class id arity)))))
  
(cl::defun identifier-convert-null (id &key type class arity)
  (cl::if (cl::eq type :setter)
      `(cl::setf ,(identifier-convert-null
               id :type :getter :class class :arity arity))
      (read-symbol-from-string (full-name id type arity class))))

(cl::defun string-lispify (str)
  (cl::let ( (cname (excl::replace-regexp str "_" "-"))
             (lastcase :other)
             newcase char res ) 
    (cl::dotimes (n (cl::length cname))
      (cl::setf char (cl::schar cname n))
      (excl::if* (cl::alpha-char-p char)
         then
              (cl::setf newcase (cl::if (cl::upper-case-p char) :upper :lower))
              (cl::when (cl::and (cl::eq lastcase :lower)
                                 (cl::eq newcase :upper))
                ;; case change... add a dash
                (cl::push #\- res)
                (cl::setf newcase :other))
              (cl::push (cl::char-downcase char) res)
              (cl::setf lastcase newcase)
         else
              (cl::push char res)
              (cl::setf lastcase :other)))
    (cl::coerce (cl::nreverse res) 'string)))
  
(cl::defun identifier-convert-lispify (cname &key type class arity)
  (cl::assert (cl::stringp cname))
  (cl::when (cl::eq type :setter)
    (cl::return-from identifier-convert-lispify
      `(cl::setf ,(identifier-convert-lispify
               cname :type :getter :class class :arity arity))))
  (cl::setq cname (full-name cname type arity class))
  (cl::if (cl::eq type :constant)
      (cl::setf cname (cl::format nil "*~A*" cname)))
  (read-symbol-from-string (string-lispify cname)))

(cl::defun id-convert-and-export (name &rest kwargs)
  (cl::multiple-value-bind (symbol package)
      (cl::apply *swig-identifier-converter* name kwargs)
    (cl::let ((args (cl::list (cl::if (cl::consp symbol)
    	     	    	         (cl::cadr symbol) symbol)
                      (cl::or package cl::*package*))))
      (cl::apply #'cl::export args)
      (cl::pushnew args *swig-export-list*))
    symbol))

(cl::defmacro swig-insert-id (name namespace &key (type :type) class)
  `(cl::let ((cl::*package* (cl::find-package ,(package-name-for-namespace namespace))))
    (id-convert-and-export ,name :type ,type :class ,class)))

(defswig2 swig-defconstant (string value)
  (cl::let ((symbol (id-convert-and-export string :type :constant)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (cl::defconstant ,symbol ,value))))

(cl::defun maybe-reorder-args (funcname arglist)
  ;; in the foreign setter function the new value will be the last argument
  ;; in Lisp it needs to be the first
  (cl::if (cl::consp funcname)
      (cl::append (cl::last arglist) (cl::butlast arglist))
      arglist))

(cl::defun maybe-return-value (funcname arglist)
  ;; setf functions should return the new value
  (cl::when (cl::consp funcname)
    `(,(cl::if (cl::consp (cl::car arglist))
           (cl::caar arglist)
           (cl::car arglist)))))

(cl::defun swig-anyvarargs-p (arglist)
  (cl::member :SWIG__varargs_ arglist))

(defswig1 swig-defun ((name &optional (mangled-name name)
                            &key (type :operator) class arity)
                      arglist kwargs
		      &body body)
  (cl::let* ((symbol (id-convert-and-export name :type type
                          :arity arity :class class))
             (mangle (excl::if* (cl::string-equal name mangled-name)
                      then (id-convert-and-export 
				    (cl::cond
					  ((cl::eq type :setter) (cl::format nil "~A-set" name))
					  ((cl::eq type :getter) (cl::format nil "~A-get" name))
					  (t name))
				    :type :ff-operator :arity arity :class class)
                      else (cl::intern mangled-name)))
         (defun-args (maybe-reorder-args
                      symbol
		      (cl::mapcar #'cl::car (cl::and (cl::not (cl::equal arglist '(:void)))
					 (cl::loop as i in arglist
					       when (cl::eq (cl::car i) :p+)
					       collect (cl::cdr i))))))
	 (ffargs (cl::if (cl::equal arglist '(:void))
	 	      arglist
		    (cl::mapcar #'cl::cdr arglist)))
	 )
    (cl::when (swig-anyvarargs-p ffargs)
      (cl::setq ffargs '()))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (excl::compiler-let ((*record-xref-info* nil))
         (ff:def-foreign-call (,mangle ,mangled-name) ,ffargs ,@kwargs))
       (cl::macrolet ((swig-ff-call (&rest args)
                      (cl::cons ',mangle args)))
         (cl::defun ,symbol ,defun-args
           ,@body
           ,@(maybe-return-value symbol defun-args))))))

(defswig1 swig-defmethod ((name &optional (mangled-name name)
	  	                &key (type :operator) class arity)
                          ffargs kwargs
                          &body body)
  (cl::let* ((symbol (id-convert-and-export name :type type
                          :arity arity :class class))
         (mangle (cl::intern mangled-name))
         (defmethod-args (maybe-reorder-args
                          symbol
                          (cl::unless (cl::equal ffargs '(:void))
                            (cl::loop for (lisparg name dispatch) in ffargs
			    	  when (eq lisparg :p+)
                                  collect `(,name ,dispatch)))))
         (ffargs (cl::if (cl::equal ffargs '(:void))
                     ffargs
                     (cl::loop for (nil name nil . ffi) in ffargs
                           collect `(,name ,@ffi)))))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (excl::compiler-let ((*record-xref-info* nil))
         (ff:def-foreign-call (,mangle ,mangled-name) ,ffargs ,@kwargs))
       (cl::macrolet ((swig-ff-call (&rest args)
                      (cl::cons ',mangle args)))
         (cl::defmethod ,symbol ,defmethod-args
           ,@body
           ,@(maybe-return-value symbol defmethod-args))))))

(defswig1 swig-dispatcher ((name &key (type :operator) class arities))
  (cl::let ((symbol (id-convert-and-export name
                         :type type :class class)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (cl::defun ,symbol (&rest args)
         (cl::case (cl::length args)
           ,@(cl::loop for arity in arities
                   for symbol-n = (id-convert-and-export name
                                           :type type :class class :arity arity)
                   collect `(,arity (cl::apply #',symbol-n args)))
	   (t (cl::error "No applicable wrapper-methods for foreign call ~a with args ~a of classes ~a" ',symbol args (cl::mapcar #'(cl::lambda (x) (cl::class-name (cl::class-of x))) args)))
	   )))))

(defswig2 swig-def-foreign-stub (name)
  (cl::let ((lsymbol (id-convert-and-export name :type :class))
	    (symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
	(ff:def-foreign-type ,symbol (:class ))
	(cl::defclass ,lsymbol (ff:foreign-pointer) ()))))

(defswig2 swig-def-foreign-class (name supers &rest rest)
  (cl::let ((lsymbol (id-convert-and-export name :type :class))
	    (symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (ff:def-foreign-type ,symbol ,@rest)
       (cl::defclass ,lsymbol ,supers
	 ((foreign-type :initform ',symbol :initarg :foreign-type
			:accessor foreign-pointer-type))))))

(defswig2 swig-def-foreign-type (name &rest rest)
  (cl::let ((symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (ff:def-foreign-type ,symbol ,@rest))))

(defswig2 swig-def-synonym-type (synonym of ff-synonym)
  `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
     (cl::setf (cl::find-class ',synonym) (cl::find-class ',of))
     (ff:def-foreign-type ,ff-synonym (:struct ))))

(cl::defun package-name-for-namespace (namespace)
  (excl::list-to-delimited-string
   (cl::cons *swig-module-name*
         (cl::mapcar #'(cl::lambda (name)
                     (cl::string
                      (cl::funcall *swig-identifier-converter*
                               name
                               :type :namespace)))
                 namespace))
   "."))

(cl::defmacro swig-defpackage (namespace)
  (cl::let* ((parent-namespaces (cl::maplist #'cl::reverse (cl::cdr (cl::reverse namespace))))
             (parent-strings (cl::mapcar #'package-name-for-namespace
                                 parent-namespaces))
             (string (package-name-for-namespace namespace)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
      (cl::defpackage ,string
        (:use :swig :ff #+ignore '(:common-lisp :ff :excl)
              ,@parent-strings ,*swig-module-name*)
	(:import-from :cl :* :nil :t)))))

(cl::defmacro swig-in-package (namespace)
  `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
    (cl::in-package ,(package-name-for-namespace namespace))))

(defswig2 swig-defvar (name mangled-name &key type (ftype :unsigned-natural))
  (cl::let ((symbol (id-convert-and-export name :type type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
      (ff:def-foreign-variable (,symbol ,mangled-name) :type ,ftype))))

) ;; eval-when

(cl::eval-when (:compile-toplevel :execute)
  (cl::flet ((starts-with-p (str prefix)
              (cl::and (cl::>= (cl::length str) (cl::length prefix))
                (cl::string= str prefix :end1 (cl::length prefix)))))
    (cl::export (cl::loop for sym being each present-symbol of cl::*package*
                  when (cl::or (starts-with-p (cl::symbol-name sym) (cl::symbol-name :swig-))
                           (starts-with-p (cl::symbol-name sym) (cl::symbol-name :identifier-convert-)))
                  collect sym))))



#+linux (load "/usr/lib/libWand.so")
#+mswindows (load "CORE_RL_wand_.dll")

(in-package :MagickWand)
(swig-def-foreign-type "__SWIGACL_FwdReference"
  (* :void))
(swig-def-foreign-type "size_t"
  :unsigned-int)
;; forward referenced stub.
(swig-def-foreign-class "_MagickWand" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "MagickWand"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "MagickBooleanType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "ImageInfo" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "ExceptionInfo" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "_DrawingWand" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "DrawingWand"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "AlignType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "ExceptionType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "ClipPathUnits" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "DecorationType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "DrawInfo" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "Image" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "FillRule" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "GravityType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "LineCap" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "LineJoin" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "CompositeOperator" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "StretchType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "StyleType" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "AffineMatrix" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "PointInfo" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "PaintMethod" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "_PixelWand" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "DrawContext"
  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)))
;; forward referenced stub.
(swig-def-foreign-class "_PixelIterator" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "PixelIterator"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "PixelWand"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "IndexPacket" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "Quantum" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "MagickPixelPacket" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "PixelPacket" (ff:foreign-pointer) (:class ))


(swig-in-package ())

(swig-defconstant "MaxTextExtent" 4096)
(swig-defconstant "MagickSignature" #xabacadab)
(swig-defun ("IsMagickWand" "IsMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClearException" "MagickClearException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneMagickWand" "CloneMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyMagickWand" "DestroyMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewMagickWand" "NewMagickWand")
  (:void)
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearMagickWand" "ClearMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWandGenesis" "MagickWandGenesis")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWandTerminus" "MagickWandTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRelinquishMemory" "MagickRelinquishMemory")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickResetIterator" "MagickResetIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetFirstIterator" "MagickSetFirstIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetLastIterator" "MagickSetLastIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertImageCommand" "ConvertImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextAlignment" "DrawGetTextAlignment")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetClipPath" "DrawGetClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetException" "DrawGetException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFont" "DrawGetFont")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontFamily" "DrawGetFontFamily")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextEncoding" "DrawGetTextEncoding")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetVectorGraphics" "DrawGetVectorGraphics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetClipUnits" "DrawGetClipUnits")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextDecoration" "DrawGetTextDecoration")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillAlpha" "DrawGetFillAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontSize" "DrawGetFontSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeDashArray" "DrawGetStrokeDashArray")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :unsigned-long) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeDashOffset" "DrawGetStrokeDashOffset")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeAlpha" "DrawGetStrokeAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeWidth" "DrawGetStrokeWidth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PeekDrawingWand" "PeekDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneDrawingWand" "CloneDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyDrawingWand" "DestroyDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAllocateWand" "DrawAllocateWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewDrawingWand" "NewDrawingWand")
  (:void)
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetClipRule" "DrawGetClipRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillRule" "DrawGetFillRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetGravity" "DrawGetGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeLineCap" "DrawGetStrokeLineCap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeLineJoin" "DrawGetStrokeLineJoin")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawClearException" "DrawClearException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawComposite" "DrawComposite")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeAntialias" "DrawGetStrokeAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextAntialias" "DrawGetTextAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopPattern" "DrawPopPattern")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushPattern" "DrawPushPattern")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRender" "DrawRender")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetClipPath" "DrawSetClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillPatternURL" "DrawSetFillPatternURL")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFont" "DrawSetFont")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontFamily" "DrawSetFontFamily")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeDashArray" "DrawSetStrokeDashArray")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokePatternURL" "DrawSetStrokePatternURL")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetVectorGraphics" "DrawSetVectorGraphics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsDrawingWand" "IsDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PopDrawingWand" "PopDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PushDrawingWand" "PushDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontStretch" "DrawGetFontStretch")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontStyle" "DrawGetFontStyle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontWeight" "DrawGetFontWeight")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:unsigned-long )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeMiterLimit" "DrawGetStrokeMiterLimit")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:unsigned-long )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearDrawingWand" "ClearDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAffine" "DrawAffine")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAnnotation" "DrawAnnotation")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* :unsigned-char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawArc" "DrawArc")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawBezier" "DrawBezier")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawCircle" "DrawCircle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawColor" "DrawColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawComment" "DrawComment")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawEllipse" "DrawEllipse")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillColor" "DrawGetFillColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeColor" "DrawGetStrokeColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextUnderColor" "DrawGetTextUnderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawLine" "DrawLine")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawMatte" "DrawMatte")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathClose" "DrawPathClose")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToAbsolute" "DrawPathCurveToAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToRelative" "DrawPathCurveToRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierAbsolute" "DrawPathCurveToQuadraticBezierAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierRelative" "DrawPathCurveToQuadraticBezierRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierSmoothAbsolute" "DrawPathCurveToQuadraticBezierSmoothAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierSmoothRelative" "DrawPathCurveToQuadraticBezierSmoothRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToSmoothAbsolute" "DrawPathCurveToSmoothAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToSmoothRelative" "DrawPathCurveToSmoothRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathEllipticArcAbsolute" "DrawPathEllipticArcAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) )
   (:p+ PARM6_arg7  :double )
   (:p+ PARM7_arg8  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathEllipticArcRelative" "DrawPathEllipticArcRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) )
   (:p+ PARM6_arg7  :double )
   (:p+ PARM7_arg8  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathFinish" "DrawPathFinish")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToAbsolute" "DrawPathLineToAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToRelative" "DrawPathLineToRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToHorizontalAbsolute" "DrawPathLineToHorizontalAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToHorizontalRelative" "DrawPathLineToHorizontalRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToVerticalAbsolute" "DrawPathLineToVerticalAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToVerticalRelative" "DrawPathLineToVerticalRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathMoveToAbsolute" "DrawPathMoveToAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathMoveToRelative" "DrawPathMoveToRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathStart" "DrawPathStart")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPoint" "DrawPoint")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPolygon" "DrawPolygon")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPolyline" "DrawPolyline")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopClipPath" "DrawPopClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopDefs" "DrawPopDefs")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushClipPath" "DrawPushClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushDefs" "DrawPushDefs")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRectangle" "DrawRectangle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawResetVectorGraphics" "DrawResetVectorGraphics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRotate" "DrawRotate")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRoundRectangle" "DrawRoundRectangle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawScale" "DrawScale")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetClipRule" "DrawSetClipRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetClipUnits" "DrawSetClipUnits")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillColor" "DrawSetFillColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillAlpha" "DrawSetFillAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillRule" "DrawSetFillRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontSize" "DrawSetFontSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontStretch" "DrawSetFontStretch")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontStyle" "DrawSetFontStyle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontWeight" "DrawSetFontWeight")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetGravity" "DrawSetGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeAntialias" "DrawSetStrokeAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeColor" "DrawSetStrokeColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeDashOffset" "DrawSetStrokeDashOffset")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_dashoffset  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_dashoffset))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeLineCap" "DrawSetStrokeLineCap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeLineJoin" "DrawSetStrokeLineJoin")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeMiterLimit" "DrawSetStrokeMiterLimit")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeAlpha" "DrawSetStrokeAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeWidth" "DrawSetStrokeWidth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextAlignment" "DrawSetTextAlignment")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextAntialias" "DrawSetTextAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextDecoration" "DrawSetTextDecoration")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextEncoding" "DrawSetTextEncoding")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextUnderColor" "DrawSetTextUnderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetViewbox" "DrawSetViewbox")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long )
   (:p+ PARM2_arg3  :unsigned-long )
   (:p+ PARM3_arg4  :unsigned-long )
   (:p+ PARM4_arg5  :unsigned-long ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSkewX" "DrawSkewX")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSkewY" "DrawSkewY")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawTranslate" "DrawTranslate")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillOpacity" "DrawGetFillOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeOpacity" "DrawGetStrokeOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPeekGraphicWand" "DrawPeekGraphicWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopGraphicContext" "DrawPopGraphicContext")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushGraphicContext" "DrawPushGraphicContext")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillOpacity" "DrawSetFillOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeOpacity" "DrawSetStrokeOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetIteratorException" "PixelGetIteratorException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPixelIterator" "IsPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelClearIteratorException" "PixelClearIteratorException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetIteratorRow" "PixelSetIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  :long ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSyncIterator" "PixelSyncIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyPixelIterator" "DestroyPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelIterator" "NewPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelRegionIterator" "NewPixelRegionIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :long )
   (:p+ PARM2_arg3  :long )
   (:p+ PARM3_arg4  :unsigned-long )
   (:p+ PARM4_arg5  :unsigned-long ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetNextIteratorRow" "PixelGetNextIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* :unsigned-long) ))
  (:returning ((* (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetPreviousIteratorRow" "PixelGetPreviousIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* :unsigned-long) ))
  (:returning ((* (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearPixelIterator" "ClearPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelResetIterator" "PixelResetIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetFirstIteratorRow" "PixelSetFirstIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetLastIteratorRow" "PixelSetLastIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelIteratorGetException" "PixelIteratorGetException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetNextRow" "PixelGetNextRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetException" "PixelGetException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetColorAsString" "PixelGetColorAsString")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetAlpha" "PixelGetAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlack" "PixelGetBlack")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlue" "PixelGetBlue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetCyan" "PixelGetCyan")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetGreen" "PixelGetGreen")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetMagenta" "PixelGetMagenta")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetOpacity" "PixelGetOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetRed" "PixelGetRed")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetYellow" "PixelGetYellow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetIndex" "PixelGetIndex")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPixelWand" "IsPixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPixelWandSimilar" "IsPixelWandSimilar")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  :double ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelClearException" "PixelClearException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetColor" "PixelSetColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyPixelWand" "DestroyPixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyPixelWands" "DestroyPixelWands")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   (:p+ PARM1_arg2  :unsigned-long ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelWand" "NewPixelWand")
  (:void)
  (:returning ((* #.(swig-insert-id "PixelWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelWands" "NewPixelWands")
  ((:p+ PARM0_arg1  :unsigned-long ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:when (cl:and nil (cl:not (cl:zerop address)))
       (excl:schedule-finalization new-inst #'cl::identity))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetAlphaQuantum" "PixelGetAlphaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlackQuantum" "PixelGetBlackQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlueQuantum" "PixelGetBlueQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetCyanQuantum" "PixelGetCyanQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetGreenQuantum" "PixelGetGreenQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetMagentaQuantum" "PixelGetMagentaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetOpacityQuantum" "PixelGetOpacityQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetRedQuantum" "PixelGetRedQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetYellowQuantum" "PixelGetYellowQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let* ((address (swig-ff-call SWIG_arg0))
         (new-inst (cl::make-instance 'ff:foreign-pointer :foreign-address address)))
    (cl::unless (cl::zerop address)
      (excl:schedule-finalization new-inst #'cl::identity))
    (cl::setq ACL_ffresult new-inst)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetColorCount" "PixelGetColorCount")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:unsigned-long )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearPixelWand" "ClearPixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetMagickColor" "PixelGetMagickColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetQuantumColor" "PixelGetQuantumColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetAlpha" "PixelSetAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetAlphaQuantum" "PixelSetAlphaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlack" "PixelSetBlack")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlackQuantum" "PixelSetBlackQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlue" "PixelSetBlue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlueQuantum" "PixelSetBlueQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetColorCount" "PixelSetColorCount")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-long ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetCyan" "PixelSetCyan")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetCyanQuantum" "PixelSetCyanQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetGreen" "PixelSetGreen")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetGreenQuantum" "PixelSetGreenQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetIndex" "PixelSetIndex")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetMagenta" "PixelSetMagenta")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetMagentaQuantum" "PixelSetMagentaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetOpacity" "PixelSetOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetOpacityQuantum" "PixelSetOpacityQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetQuantumColor" "PixelSetQuantumColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetRed" "PixelSetRed")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetRedQuantum" "PixelSetRedQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetYellow" "PixelSetYellow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetYellowQuantum" "PixelSetYellowQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))



(cl::in-package :swig.MagickWand)

(macrolet ((swig-do-export ()
                 `(dolist (s ',*swig-export-list*)
                    (apply #'export s))))
   (swig-do-export))

(setq *swig-export-list* nil)

