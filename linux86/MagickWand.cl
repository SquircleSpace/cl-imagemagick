;; This file was automatically generated by SWIG (http://www.swig.org).
;; Version 2.0.1
;;
;; Do not make changes to this file unless you know what you are doing--modify
;; the SWIG interface file instead.

(defpackage :swig.MagickWand
  (:use :common-lisp :ff :excl)
  (:export #:*swig-identifier-converter* #:*swig-module-name*
           #:*void* #:*swig-export-list*))
(in-package :swig.MagickWand)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defparameter *swig-identifier-converter* 'identifier-convert-null)
  (defparameter *swig-module-name* :MagickWand))

(defpackage :MagickWand
  (:use :common-lisp :swig.MagickWand :ff :excl))


(eval-when (:compile-toplevel :load-toplevel :execute)

  ;; avoid compiling ef-templates at runtime
  (excl:find-external-format :fat)
  (excl:find-external-format :fat-le)

;;; You can define your own identifier converter if you want.
;;; Use the -identifier-converter command line argument to
;;; specify its name.

(eval-when (:compile-toplevel :load-toplevel :execute)
   (cl::defparameter *swig-export-list* nil))

(cl::defconstant *void* :..void..)

;; parsers to aid in finding SWIG definitions in files.
(cl::defun scm-p1 (form)
  (let* ((info (cl::second form))
	 (id (car info))
	 (id-args (if (eq (cl::car form) 'swig-dispatcher)
		      (cl::cdr info)
		      (cl::cddr info))))
    (cl::apply *swig-identifier-converter* id 
	   (cl::progn (cl::when (cl::eq (cl::car form) 'swig-dispatcher)
		    (cl::remf id-args :arities))
		  id-args))))

(cl::defmacro defswig1 (name (&rest args) &body body)
  `(cl::progn (cl::defmacro ,name ,args
	    ,@body)
	  (excl::define-simple-parser ,name scm-p1)) )

(cl::defmacro defswig2 (name (&rest args) &body body)
  `(cl::progn (cl::defmacro ,name ,args
	    ,@body)
	  (excl::define-simple-parser ,name second)))

(defun read-symbol-from-string (string)
  (cl::multiple-value-bind (result position)
      (cl::read-from-string string nil "eof" :preserve-whitespace t)
    (cl::if (cl::and (cl::symbolp result)
    	             (cl::eql position (cl::length string)))
        result
	(cl::multiple-value-bind (sym)
	    (cl::intern string)
	  sym))))

(cl::defun full-name (id type arity class)
  ; We need some kind of a hack here to handle template classes
  ; and other synonym types right. We need the original name.
  (let*( (sym (read-symbol-from-string 
                (if (eq *swig-identifier-converter* 'identifier-convert-lispify)
                  (string-lispify id)
                  id)))
         (sym-class (find-class sym nil))
         (id (cond ( (not sym-class)
                     id )
                   ( (and sym-class
                          (not (eq (class-name sym-class)
                                sym)))
                     (class-name sym-class) )
                   ( t
                     id ))) )
    (cl::case type
      (:getter (cl::format nil "~@[~A_~]~A" class id))
      (:constructor (cl::format nil "new_~A~@[~A~]" id arity))
      (:destructor (cl::format nil "delete_~A" id))
      (:type (cl::format nil "ff_~A" id))
      (:slot id)
      (:ff-operator (cl::format nil "ffi_~A" id))
      (otherwise (cl::format nil "~@[~A_~]~A~@[~A~]"
                         class id arity)))))
  
(cl::defun identifier-convert-null (id &key type class arity)
  (cl::if (cl::eq type :setter)
      `(cl::setf ,(identifier-convert-null
               id :type :getter :class class :arity arity))
      (read-symbol-from-string (full-name id type arity class))))

(cl::defun string-lispify (str)
  (cl::let ( (cname (excl::replace-regexp str "_" "-"))
             (lastcase :other)
             newcase char res ) 
    (cl::dotimes (n (cl::length cname))
      (cl::setf char (cl::schar cname n))
      (excl::if* (cl::alpha-char-p char)
         then
              (cl::setf newcase (cl::if (cl::upper-case-p char) :upper :lower))
              (cl::when (cl::and (cl::eq lastcase :lower)
                                 (cl::eq newcase :upper))
                ;; case change... add a dash
                (cl::push #\- res)
                (cl::setf newcase :other))
              (cl::push (cl::char-downcase char) res)
              (cl::setf lastcase newcase)
         else
              (cl::push char res)
              (cl::setf lastcase :other)))
    (cl::coerce (cl::nreverse res) 'string)))
  
(cl::defun identifier-convert-lispify (cname &key type class arity)
  (cl::assert (cl::stringp cname))
  (cl::when (cl::eq type :setter)
    (cl::return-from identifier-convert-lispify
      `(cl::setf ,(identifier-convert-lispify
               cname :type :getter :class class :arity arity))))
  (cl::setq cname (full-name cname type arity class))
  (cl::if (cl::eq type :constant)
      (cl::setf cname (cl::format nil "*~A*" cname)))
  (read-symbol-from-string (string-lispify cname)))

(cl::defun id-convert-and-export (name &rest kwargs)
  (cl::multiple-value-bind (symbol package)
      (cl::apply *swig-identifier-converter* name kwargs)
    (cl::let ((args (cl::list (cl::if (cl::consp symbol)
    	     	    	         (cl::cadr symbol) symbol)
                      (cl::or package cl::*package*))))
      (cl::apply #'cl::export args)
      (cl::pushnew args *swig-export-list*))
    symbol))

(cl::defmacro swig-insert-id (name namespace &key (type :type) class)
  `(cl::let ((cl::*package* (cl::find-package ,(package-name-for-namespace namespace))))
    (id-convert-and-export ,name :type ,type :class ,class)))

(defswig2 swig-defconstant (string value)
  (cl::let ((symbol (id-convert-and-export string :type :constant)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (cl::defconstant ,symbol ,value))))

(cl::defun maybe-reorder-args (funcname arglist)
  ;; in the foreign setter function the new value will be the last argument
  ;; in Lisp it needs to be the first
  (cl::if (cl::consp funcname)
      (cl::append (cl::last arglist) (cl::butlast arglist))
      arglist))

(cl::defun maybe-return-value (funcname arglist)
  ;; setf functions should return the new value
  (cl::when (cl::consp funcname)
    `(,(cl::if (cl::consp (cl::car arglist))
           (cl::caar arglist)
           (cl::car arglist)))))

(cl::defun swig-anyvarargs-p (arglist)
  (cl::member :SWIG__varargs_ arglist))

(defswig1 swig-defun ((name &optional (mangled-name name)
                            &key (type :operator) class arity)
                      arglist kwargs
		      &body body)
  (cl::let* ((symbol (id-convert-and-export name :type type
                          :arity arity :class class))
             (mangle (excl::if* (cl::string-equal name mangled-name)
                      then (id-convert-and-export 
				    (cl::cond
					  ((cl::eq type :setter) (cl::format nil "~A-set" name))
					  ((cl::eq type :getter) (cl::format nil "~A-get" name))
					  (t name))
				    :type :ff-operator :arity arity :class class)
                      else (cl::intern mangled-name)))
         (defun-args (maybe-reorder-args
                      symbol
		      (cl::mapcar #'cl::car (cl::and (cl::not (cl::equal arglist '(:void)))
					 (cl::loop as i in arglist
					       when (cl::eq (cl::car i) :p+)
					       collect (cl::cdr i))))))
	 (ffargs (cl::if (cl::equal arglist '(:void))
	 	      arglist
		    (cl::mapcar #'cl::cdr arglist)))
	 )
    (cl::when (swig-anyvarargs-p ffargs)
      (cl::setq ffargs '()))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (excl::compiler-let ((*record-xref-info* nil))
         (ff:def-foreign-call (,mangle ,mangled-name) ,ffargs ,@kwargs))
       (cl::macrolet ((swig-ff-call (&rest args)
                      (cl::cons ',mangle args)))
         (cl::defun ,symbol ,defun-args
           ,@body
           ,@(maybe-return-value symbol defun-args))))))

(defswig1 swig-defmethod ((name &optional (mangled-name name)
	  	                &key (type :operator) class arity)
                          ffargs kwargs
                          &body body)
  (cl::let* ((symbol (id-convert-and-export name :type type
                          :arity arity :class class))
         (mangle (cl::intern mangled-name))
         (defmethod-args (maybe-reorder-args
                          symbol
                          (cl::unless (cl::equal ffargs '(:void))
                            (cl::loop for (lisparg name dispatch) in ffargs
			    	  when (eq lisparg :p+)
                                  collect `(,name ,dispatch)))))
         (ffargs (cl::if (cl::equal ffargs '(:void))
                     ffargs
                     (cl::loop for (nil name nil . ffi) in ffargs
                           collect `(,name ,@ffi)))))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (excl::compiler-let ((*record-xref-info* nil))
         (ff:def-foreign-call (,mangle ,mangled-name) ,ffargs ,@kwargs))
       (cl::macrolet ((swig-ff-call (&rest args)
                      (cl::cons ',mangle args)))
         (cl::defmethod ,symbol ,defmethod-args
           ,@body
           ,@(maybe-return-value symbol defmethod-args))))))

(defswig1 swig-dispatcher ((name &key (type :operator) class arities))
  (cl::let ((symbol (id-convert-and-export name
                         :type type :class class)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (cl::defun ,symbol (&rest args)
         (cl::case (cl::length args)
           ,@(cl::loop for arity in arities
                   for symbol-n = (id-convert-and-export name
                                           :type type :class class :arity arity)
                   collect `(,arity (cl::apply #',symbol-n args)))
	   (t (cl::error "No applicable wrapper-methods for foreign call ~a with args ~a of classes ~a" ',symbol args (cl::mapcar #'(cl::lambda (x) (cl::class-name (cl::class-of x))) args)))
	   )))))

(defswig2 swig-def-foreign-stub (name)
  (cl::let ((lsymbol (id-convert-and-export name :type :class))
	    (symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
	(ff:def-foreign-type ,symbol (:class ))
	(cl::defclass ,lsymbol (ff:foreign-pointer) ()))))

(defswig2 swig-def-foreign-class (name supers &rest rest)
  (cl::let ((lsymbol (id-convert-and-export name :type :class))
	    (symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (ff:def-foreign-type ,symbol ,@rest)
       (cl::defclass ,lsymbol ,supers
	 ((foreign-type :initform ',symbol :initarg :foreign-type
			:accessor foreign-pointer-type))))))

(defswig2 swig-def-foreign-type (name &rest rest)
  (cl::let ((symbol (id-convert-and-export name :type :type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
       (ff:def-foreign-type ,symbol ,@rest))))

(defswig2 swig-def-synonym-type (synonym of ff-synonym)
  `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
     (cl::setf (cl::find-class ',synonym) (cl::find-class ',of))
     (ff:def-foreign-type ,ff-synonym (:struct ))))

(cl::defun package-name-for-namespace (namespace)
  (excl::list-to-delimited-string
   (cl::cons *swig-module-name*
         (cl::mapcar #'(cl::lambda (name)
                     (cl::string
                      (cl::funcall *swig-identifier-converter*
                               name
                               :type :namespace)))
                 namespace))
   "."))

(cl::defmacro swig-defpackage (namespace)
  (cl::let* ((parent-namespaces (cl::maplist #'cl::reverse (cl::cdr (cl::reverse namespace))))
             (parent-strings (cl::mapcar #'package-name-for-namespace
                                 parent-namespaces))
             (string (package-name-for-namespace namespace)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
      (cl::defpackage ,string
        (:use :swig :ff #+ignore '(:common-lisp :ff :excl)
              ,@parent-strings ,*swig-module-name*)
	(:import-from :cl :* :nil :t)))))

(cl::defmacro swig-in-package (namespace)
  `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
    (cl::in-package ,(package-name-for-namespace namespace))))

(defswig2 swig-defvar (name mangled-name &key type (ftype :unsigned-natural))
  (cl::let ((symbol (id-convert-and-export name :type type)))
    `(cl::eval-when (:compile-toplevel :load-toplevel :execute)
      (ff:def-foreign-variable (,symbol ,mangled-name) :type ,ftype))))

) ;; eval-when

(cl::eval-when (:compile-toplevel :execute)
  (cl::flet ((starts-with-p (str prefix)
              (cl::and (cl::>= (cl::length str) (cl::length prefix))
                (cl::string= str prefix :end1 (cl::length prefix)))))
    (cl::export (cl::loop for sym being each present-symbol of cl::*package*
                  when (cl::or (starts-with-p (cl::symbol-name sym) (cl::symbol-name :swig-))
                           (starts-with-p (cl::symbol-name sym) (cl::symbol-name :identifier-convert-)))
                  collect sym))))



#+linux (load "/usr/lib/libWand.so")
#+mswindows (load "CORE_RL_wand_.dll")


#+linux (load "/usr/lib/libMagick.so")
#+mswindows (load "CORE_RL_magick_.dll")

(in-package :MagickWand)
(swig-def-foreign-type "__SWIGACL_FwdReference"
  (* :void))
(swig-def-foreign-type "size_t"
  :unsigned-int)
(swig-def-foreign-type "ssize_t"
  :int)
(swig-def-foreign-type "FILE"
  (* :void))
(swig-def-foreign-type "time_t"
  :long)
(swig-def-foreign-type "MagickRealType"
  :double)
(swig-def-foreign-type "Quantum"
  :unsigned-short)
(swig-def-foreign-type "MagickStatusType"
  :unsigned-int)
(swig-def-foreign-type "MagickOffsetType"
  #.(swig-insert-id "ssize_t" () :type :type))
(swig-def-foreign-type "MagickSizeType"
  #.(swig-insert-id "size_t" () :type :type))
(swig-def-foreign-type "QuantumAny"
  #.(swig-insert-id "MagickSizeType" () :type :type))
(swig-def-foreign-type "anontype0" :int)
(swig-defconstant "UndefinedChannel" 0)
(swig-defconstant "RedChannel" #x0001)
(swig-defconstant "GrayChannel" #x0001)
(swig-defconstant "CyanChannel" #x0001)
(swig-defconstant "GreenChannel" #x0002)
(swig-defconstant "MagentaChannel" #x0002)
(swig-defconstant "BlueChannel" #x0004)
(swig-defconstant "YellowChannel" #x0004)
(swig-defconstant "AlphaChannel" #x0008)
(swig-defconstant "OpacityChannel" #x0008)
(swig-defconstant "MatteChannel" #x0008)
(swig-defconstant "BlackChannel" #x0020)
(swig-defconstant "IndexChannel" #x0020)
(swig-defconstant "AllChannels" #x002F)
(swig-defconstant "TrueAlphaChannel" #x0040)
(swig-defconstant "RGBChannels" #x0080)
(swig-defconstant "GrayChannels" #x0080)
(swig-defconstant "SyncChannels" #x0100)
(swig-defconstant "DefaultChannels" (logior #.(swig-insert-id "AllChannels" () :type :constant) (logand #.(swig-insert-id "SyncChannels" () :type :constant) (lognot #.(swig-insert-id "OpacityChannel" () :type :constant)))))

(swig-def-foreign-type "ChannelType"
  :int)
(swig-def-foreign-type "anontype1" :int)
(swig-defconstant "UndefinedClass" 0)
(swig-defconstant "DirectClass" (+ #.(swig-insert-id "UndefinedClass" () :type :constant) 1))
(swig-defconstant "PseudoClass" (+ #.(swig-insert-id "DirectClass" () :type :constant) 1))

(swig-def-foreign-type "ClassType"
  :int)
(swig-def-foreign-type "anontype2" :int)
(swig-defconstant "MagickFalse" 0)
(swig-defconstant "MagickTrue" 1)

(swig-def-foreign-type "MagickBooleanType"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_BlobInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "BlobInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "_ExceptionInfo" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "_Image" (ff:foreign-pointer) (:class ))

;; forward referenced stub.
(swig-def-foreign-class "_ImageInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-class "CoderInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "CoderInfo") (* :char))
   (#.(swig-insert-id "magick" () :type :slot :class "CoderInfo") (* :char))
   (#.(swig-insert-id "name" () :type :slot :class "CoderInfo") (* :char))
   (#.(swig-insert-id "exempt" () :type :slot :class "CoderInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "CoderInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "CoderInfo") (* #.(swig-insert-id "CoderInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "CoderInfo") (* #.(swig-insert-id "CoderInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "CoderInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype3" :int)
(swig-defconstant "UndefinedColorspace" 0)
(swig-defconstant "RGBColorspace" (+ #.(swig-insert-id "UndefinedColorspace" () :type :constant) 1))
(swig-defconstant "GRAYColorspace" (+ #.(swig-insert-id "RGBColorspace" () :type :constant) 1))
(swig-defconstant "TransparentColorspace" (+ #.(swig-insert-id "GRAYColorspace" () :type :constant) 1))
(swig-defconstant "OHTAColorspace" (+ #.(swig-insert-id "TransparentColorspace" () :type :constant) 1))
(swig-defconstant "LabColorspace" (+ #.(swig-insert-id "OHTAColorspace" () :type :constant) 1))
(swig-defconstant "XYZColorspace" (+ #.(swig-insert-id "LabColorspace" () :type :constant) 1))
(swig-defconstant "YCbCrColorspace" (+ #.(swig-insert-id "XYZColorspace" () :type :constant) 1))
(swig-defconstant "YCCColorspace" (+ #.(swig-insert-id "YCbCrColorspace" () :type :constant) 1))
(swig-defconstant "YIQColorspace" (+ #.(swig-insert-id "YCCColorspace" () :type :constant) 1))
(swig-defconstant "YPbPrColorspace" (+ #.(swig-insert-id "YIQColorspace" () :type :constant) 1))
(swig-defconstant "YUVColorspace" (+ #.(swig-insert-id "YPbPrColorspace" () :type :constant) 1))
(swig-defconstant "CMYKColorspace" (+ #.(swig-insert-id "YUVColorspace" () :type :constant) 1))
(swig-defconstant "sRGBColorspace" (+ #.(swig-insert-id "CMYKColorspace" () :type :constant) 1))
(swig-defconstant "HSBColorspace" (+ #.(swig-insert-id "sRGBColorspace" () :type :constant) 1))
(swig-defconstant "HSLColorspace" (+ #.(swig-insert-id "HSBColorspace" () :type :constant) 1))
(swig-defconstant "HWBColorspace" (+ #.(swig-insert-id "HSLColorspace" () :type :constant) 1))
(swig-defconstant "Rec601LumaColorspace" (+ #.(swig-insert-id "HWBColorspace" () :type :constant) 1))
(swig-defconstant "Rec601YCbCrColorspace" (+ #.(swig-insert-id "Rec601LumaColorspace" () :type :constant) 1))
(swig-defconstant "Rec709LumaColorspace" (+ #.(swig-insert-id "Rec601YCbCrColorspace" () :type :constant) 1))
(swig-defconstant "Rec709YCbCrColorspace" (+ #.(swig-insert-id "Rec709LumaColorspace" () :type :constant) 1))
(swig-defconstant "LogColorspace" (+ #.(swig-insert-id "Rec709YCbCrColorspace" () :type :constant) 1))
(swig-defconstant "CMYColorspace" (+ #.(swig-insert-id "LogColorspace" () :type :constant) 1))

(swig-def-foreign-type "ColorspaceType"
  :int)
(swig-def-foreign-type "anontype4" :int)
(swig-defconstant "UndefinedCompositeOp" 0)
(swig-defconstant "NoCompositeOp" (+ #.(swig-insert-id "UndefinedCompositeOp" () :type :constant) 1))
(swig-defconstant "ModulusAddCompositeOp" (+ #.(swig-insert-id "NoCompositeOp" () :type :constant) 1))
(swig-defconstant "AtopCompositeOp" (+ #.(swig-insert-id "ModulusAddCompositeOp" () :type :constant) 1))
(swig-defconstant "BlendCompositeOp" (+ #.(swig-insert-id "AtopCompositeOp" () :type :constant) 1))
(swig-defconstant "BumpmapCompositeOp" (+ #.(swig-insert-id "BlendCompositeOp" () :type :constant) 1))
(swig-defconstant "ChangeMaskCompositeOp" (+ #.(swig-insert-id "BumpmapCompositeOp" () :type :constant) 1))
(swig-defconstant "ClearCompositeOp" (+ #.(swig-insert-id "ChangeMaskCompositeOp" () :type :constant) 1))
(swig-defconstant "ColorBurnCompositeOp" (+ #.(swig-insert-id "ClearCompositeOp" () :type :constant) 1))
(swig-defconstant "ColorDodgeCompositeOp" (+ #.(swig-insert-id "ColorBurnCompositeOp" () :type :constant) 1))
(swig-defconstant "ColorizeCompositeOp" (+ #.(swig-insert-id "ColorDodgeCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyBlackCompositeOp" (+ #.(swig-insert-id "ColorizeCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyBlueCompositeOp" (+ #.(swig-insert-id "CopyBlackCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyCompositeOp" (+ #.(swig-insert-id "CopyBlueCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyCyanCompositeOp" (+ #.(swig-insert-id "CopyCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyGreenCompositeOp" (+ #.(swig-insert-id "CopyCyanCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyMagentaCompositeOp" (+ #.(swig-insert-id "CopyGreenCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyOpacityCompositeOp" (+ #.(swig-insert-id "CopyMagentaCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyRedCompositeOp" (+ #.(swig-insert-id "CopyOpacityCompositeOp" () :type :constant) 1))
(swig-defconstant "CopyYellowCompositeOp" (+ #.(swig-insert-id "CopyRedCompositeOp" () :type :constant) 1))
(swig-defconstant "DarkenCompositeOp" (+ #.(swig-insert-id "CopyYellowCompositeOp" () :type :constant) 1))
(swig-defconstant "DstAtopCompositeOp" (+ #.(swig-insert-id "DarkenCompositeOp" () :type :constant) 1))
(swig-defconstant "DstCompositeOp" (+ #.(swig-insert-id "DstAtopCompositeOp" () :type :constant) 1))
(swig-defconstant "DstInCompositeOp" (+ #.(swig-insert-id "DstCompositeOp" () :type :constant) 1))
(swig-defconstant "DstOutCompositeOp" (+ #.(swig-insert-id "DstInCompositeOp" () :type :constant) 1))
(swig-defconstant "DstOverCompositeOp" (+ #.(swig-insert-id "DstOutCompositeOp" () :type :constant) 1))
(swig-defconstant "DifferenceCompositeOp" (+ #.(swig-insert-id "DstOverCompositeOp" () :type :constant) 1))
(swig-defconstant "DisplaceCompositeOp" (+ #.(swig-insert-id "DifferenceCompositeOp" () :type :constant) 1))
(swig-defconstant "DissolveCompositeOp" (+ #.(swig-insert-id "DisplaceCompositeOp" () :type :constant) 1))
(swig-defconstant "ExclusionCompositeOp" (+ #.(swig-insert-id "DissolveCompositeOp" () :type :constant) 1))
(swig-defconstant "HardLightCompositeOp" (+ #.(swig-insert-id "ExclusionCompositeOp" () :type :constant) 1))
(swig-defconstant "HueCompositeOp" (+ #.(swig-insert-id "HardLightCompositeOp" () :type :constant) 1))
(swig-defconstant "InCompositeOp" (+ #.(swig-insert-id "HueCompositeOp" () :type :constant) 1))
(swig-defconstant "LightenCompositeOp" (+ #.(swig-insert-id "InCompositeOp" () :type :constant) 1))
(swig-defconstant "LinearLightCompositeOp" (+ #.(swig-insert-id "LightenCompositeOp" () :type :constant) 1))
(swig-defconstant "LuminizeCompositeOp" (+ #.(swig-insert-id "LinearLightCompositeOp" () :type :constant) 1))
(swig-defconstant "MinusCompositeOp" (+ #.(swig-insert-id "LuminizeCompositeOp" () :type :constant) 1))
(swig-defconstant "ModulateCompositeOp" (+ #.(swig-insert-id "MinusCompositeOp" () :type :constant) 1))
(swig-defconstant "MultiplyCompositeOp" (+ #.(swig-insert-id "ModulateCompositeOp" () :type :constant) 1))
(swig-defconstant "OutCompositeOp" (+ #.(swig-insert-id "MultiplyCompositeOp" () :type :constant) 1))
(swig-defconstant "OverCompositeOp" (+ #.(swig-insert-id "OutCompositeOp" () :type :constant) 1))
(swig-defconstant "OverlayCompositeOp" (+ #.(swig-insert-id "OverCompositeOp" () :type :constant) 1))
(swig-defconstant "PlusCompositeOp" (+ #.(swig-insert-id "OverlayCompositeOp" () :type :constant) 1))
(swig-defconstant "ReplaceCompositeOp" (+ #.(swig-insert-id "PlusCompositeOp" () :type :constant) 1))
(swig-defconstant "SaturateCompositeOp" (+ #.(swig-insert-id "ReplaceCompositeOp" () :type :constant) 1))
(swig-defconstant "ScreenCompositeOp" (+ #.(swig-insert-id "SaturateCompositeOp" () :type :constant) 1))
(swig-defconstant "SoftLightCompositeOp" (+ #.(swig-insert-id "ScreenCompositeOp" () :type :constant) 1))
(swig-defconstant "SrcAtopCompositeOp" (+ #.(swig-insert-id "SoftLightCompositeOp" () :type :constant) 1))
(swig-defconstant "SrcCompositeOp" (+ #.(swig-insert-id "SrcAtopCompositeOp" () :type :constant) 1))
(swig-defconstant "SrcInCompositeOp" (+ #.(swig-insert-id "SrcCompositeOp" () :type :constant) 1))
(swig-defconstant "SrcOutCompositeOp" (+ #.(swig-insert-id "SrcInCompositeOp" () :type :constant) 1))
(swig-defconstant "SrcOverCompositeOp" (+ #.(swig-insert-id "SrcOutCompositeOp" () :type :constant) 1))
(swig-defconstant "ModulusSubtractCompositeOp" (+ #.(swig-insert-id "SrcOverCompositeOp" () :type :constant) 1))
(swig-defconstant "ThresholdCompositeOp" (+ #.(swig-insert-id "ModulusSubtractCompositeOp" () :type :constant) 1))
(swig-defconstant "XorCompositeOp" (+ #.(swig-insert-id "ThresholdCompositeOp" () :type :constant) 1))
(swig-defconstant "DivideCompositeOp" (+ #.(swig-insert-id "XorCompositeOp" () :type :constant) 1))
(swig-defconstant "DistortCompositeOp" (+ #.(swig-insert-id "DivideCompositeOp" () :type :constant) 1))
(swig-defconstant "BlurCompositeOp" (+ #.(swig-insert-id "DistortCompositeOp" () :type :constant) 1))
(swig-defconstant "PegtopLightCompositeOp" (+ #.(swig-insert-id "BlurCompositeOp" () :type :constant) 1))
(swig-defconstant "VividLightCompositeOp" (+ #.(swig-insert-id "PegtopLightCompositeOp" () :type :constant) 1))
(swig-defconstant "PinLightCompositeOp" (+ #.(swig-insert-id "VividLightCompositeOp" () :type :constant) 1))
(swig-defconstant "LinearDodgeCompositeOp" (+ #.(swig-insert-id "PinLightCompositeOp" () :type :constant) 1))
(swig-defconstant "LinearBurnCompositeOp" (+ #.(swig-insert-id "LinearDodgeCompositeOp" () :type :constant) 1))
(swig-defconstant "MathematicsCompositeOp" (+ #.(swig-insert-id "LinearBurnCompositeOp" () :type :constant) 1))

(swig-def-foreign-type "CompositeOperator"
  :int)
(swig-def-foreign-type "anontype5" :int)
(swig-defconstant "UndefinedCompression" 0)
(swig-defconstant "NoCompression" (+ #.(swig-insert-id "UndefinedCompression" () :type :constant) 1))
(swig-defconstant "BZipCompression" (+ #.(swig-insert-id "NoCompression" () :type :constant) 1))
(swig-defconstant "DXT1Compression" (+ #.(swig-insert-id "BZipCompression" () :type :constant) 1))
(swig-defconstant "DXT3Compression" (+ #.(swig-insert-id "DXT1Compression" () :type :constant) 1))
(swig-defconstant "DXT5Compression" (+ #.(swig-insert-id "DXT3Compression" () :type :constant) 1))
(swig-defconstant "FaxCompression" (+ #.(swig-insert-id "DXT5Compression" () :type :constant) 1))
(swig-defconstant "Group4Compression" (+ #.(swig-insert-id "FaxCompression" () :type :constant) 1))
(swig-defconstant "JPEGCompression" (+ #.(swig-insert-id "Group4Compression" () :type :constant) 1))
(swig-defconstant "JPEG2000Compression" (+ #.(swig-insert-id "JPEGCompression" () :type :constant) 1))
(swig-defconstant "LosslessJPEGCompression" (+ #.(swig-insert-id "JPEG2000Compression" () :type :constant) 1))
(swig-defconstant "LZWCompression" (+ #.(swig-insert-id "LosslessJPEGCompression" () :type :constant) 1))
(swig-defconstant "RLECompression" (+ #.(swig-insert-id "LZWCompression" () :type :constant) 1))
(swig-defconstant "ZipCompression" (+ #.(swig-insert-id "RLECompression" () :type :constant) 1))
(swig-defconstant "ZipSCompression" (+ #.(swig-insert-id "ZipCompression" () :type :constant) 1))
(swig-defconstant "PizCompression" (+ #.(swig-insert-id "ZipSCompression" () :type :constant) 1))
(swig-defconstant "Pxr24Compression" (+ #.(swig-insert-id "PizCompression" () :type :constant) 1))
(swig-defconstant "B44Compression" (+ #.(swig-insert-id "Pxr24Compression" () :type :constant) 1))
(swig-defconstant "B44ACompression" (+ #.(swig-insert-id "B44Compression" () :type :constant) 1))

(swig-def-foreign-type "CompressionType"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_Ascii85Info" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "Ascii85Info"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype6" :int)
(swig-defconstant "UndefinedPixel" 0)
(swig-defconstant "CharPixel" (+ #.(swig-insert-id "UndefinedPixel" () :type :constant) 1))
(swig-defconstant "DoublePixel" (+ #.(swig-insert-id "CharPixel" () :type :constant) 1))
(swig-defconstant "FloatPixel" (+ #.(swig-insert-id "DoublePixel" () :type :constant) 1))
(swig-defconstant "IntegerPixel" (+ #.(swig-insert-id "FloatPixel" () :type :constant) 1))
(swig-defconstant "LongPixel" (+ #.(swig-insert-id "IntegerPixel" () :type :constant) 1))
(swig-defconstant "QuantumPixel" (+ #.(swig-insert-id "LongPixel" () :type :constant) 1))
(swig-defconstant "ShortPixel" (+ #.(swig-insert-id "QuantumPixel" () :type :constant) 1))

(swig-def-foreign-type "StorageType"
  :int)
(swig-def-foreign-class "DelegateInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "DelegateInfo") (* :char))
   (#.(swig-insert-id "decode" () :type :slot :class "DelegateInfo") (* :char))
   (#.(swig-insert-id "encode" () :type :slot :class "DelegateInfo") (* :char))
   (#.(swig-insert-id "commands" () :type :slot :class "DelegateInfo") (* :char))
   (#.(swig-insert-id "mode" () :type :slot :class "DelegateInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "thread_support" () :type :slot :class "DelegateInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "spawn" () :type :slot :class "DelegateInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "DelegateInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "DelegateInfo") (* #.(swig-insert-id "DelegateInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "DelegateInfo") (* #.(swig-insert-id "DelegateInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "DelegateInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype7" :int)
(swig-defconstant "UndefinedDistortion" 0)
(swig-defconstant "AffineDistortion" (+ #.(swig-insert-id "UndefinedDistortion" () :type :constant) 1))
(swig-defconstant "AffineProjectionDistortion" (+ #.(swig-insert-id "AffineDistortion" () :type :constant) 1))
(swig-defconstant "ScaleRotateTranslateDistortion" (+ #.(swig-insert-id "AffineProjectionDistortion" () :type :constant) 1))
(swig-defconstant "PerspectiveDistortion" (+ #.(swig-insert-id "ScaleRotateTranslateDistortion" () :type :constant) 1))
(swig-defconstant "PerspectiveProjectionDistortion" (+ #.(swig-insert-id "PerspectiveDistortion" () :type :constant) 1))
(swig-defconstant "BilinearForwardDistortion" (+ #.(swig-insert-id "PerspectiveProjectionDistortion" () :type :constant) 1))
(swig-defconstant "BilinearDistortion" #.(swig-insert-id "BilinearForwardDistortion" () :type :constant))
(swig-defconstant "BilinearReverseDistortion" (+ #.(swig-insert-id "BilinearDistortion" () :type :constant) 1))
(swig-defconstant "PolynomialDistortion" (+ #.(swig-insert-id "BilinearReverseDistortion" () :type :constant) 1))
(swig-defconstant "ArcDistortion" (+ #.(swig-insert-id "PolynomialDistortion" () :type :constant) 1))
(swig-defconstant "PolarDistortion" (+ #.(swig-insert-id "ArcDistortion" () :type :constant) 1))
(swig-defconstant "DePolarDistortion" (+ #.(swig-insert-id "PolarDistortion" () :type :constant) 1))
(swig-defconstant "BarrelDistortion" (+ #.(swig-insert-id "DePolarDistortion" () :type :constant) 1))
(swig-defconstant "BarrelInverseDistortion" (+ #.(swig-insert-id "BarrelDistortion" () :type :constant) 1))
(swig-defconstant "ShepardsDistortion" (+ #.(swig-insert-id "BarrelInverseDistortion" () :type :constant) 1))
(swig-defconstant "SentinelDistortion" (+ #.(swig-insert-id "ShepardsDistortion" () :type :constant) 1))

(swig-def-foreign-type "DistortImageMethod"
  :int)
(swig-def-foreign-type "anontype8" :int)
(swig-defconstant "UndefinedColorInterpolate" #.(swig-insert-id "UndefinedDistortion" () :type :constant))
(swig-defconstant "BarycentricColorInterpolate" #.(swig-insert-id "AffineDistortion" () :type :constant))
(swig-defconstant "BilinearColorInterpolate" #.(swig-insert-id "BilinearReverseDistortion" () :type :constant))
(swig-defconstant "PolynomialColorInterpolate" #.(swig-insert-id "PolynomialDistortion" () :type :constant))
(swig-defconstant "ShepardsColorInterpolate" #.(swig-insert-id "ShepardsDistortion" () :type :constant))
(swig-defconstant "VoronoiColorInterpolate" #.(swig-insert-id "SentinelDistortion" () :type :constant))

(swig-def-foreign-type "SparseColorMethod"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "SemaphoreInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "SemaphoreInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype9" :int)
(swig-defconstant "UndefinedException" 0)
(swig-defconstant "WarningException" 300)
(swig-defconstant "ResourceLimitWarning" 300)
(swig-defconstant "TypeWarning" 305)
(swig-defconstant "OptionWarning" 310)
(swig-defconstant "DelegateWarning" 315)
(swig-defconstant "MissingDelegateWarning" 320)
(swig-defconstant "CorruptImageWarning" 325)
(swig-defconstant "FileOpenWarning" 330)
(swig-defconstant "BlobWarning" 335)
(swig-defconstant "StreamWarning" 340)
(swig-defconstant "CacheWarning" 345)
(swig-defconstant "CoderWarning" 350)
(swig-defconstant "FilterWarning" 352)
(swig-defconstant "ModuleWarning" 355)
(swig-defconstant "DrawWarning" 360)
(swig-defconstant "ImageWarning" 365)
(swig-defconstant "WandWarning" 370)
(swig-defconstant "RandomWarning" 375)
(swig-defconstant "XServerWarning" 380)
(swig-defconstant "MonitorWarning" 385)
(swig-defconstant "RegistryWarning" 390)
(swig-defconstant "ConfigureWarning" 395)
(swig-defconstant "PolicyWarning" 399)
(swig-defconstant "ErrorException" 400)
(swig-defconstant "ResourceLimitError" 400)
(swig-defconstant "TypeError" 405)
(swig-defconstant "OptionError" 410)
(swig-defconstant "DelegateError" 415)
(swig-defconstant "MissingDelegateError" 420)
(swig-defconstant "CorruptImageError" 425)
(swig-defconstant "FileOpenError" 430)
(swig-defconstant "BlobError" 435)
(swig-defconstant "StreamError" 440)
(swig-defconstant "CacheError" 445)
(swig-defconstant "CoderError" 450)
(swig-defconstant "FilterError" 452)
(swig-defconstant "ModuleError" 455)
(swig-defconstant "DrawError" 460)
(swig-defconstant "ImageError" 465)
(swig-defconstant "WandError" 470)
(swig-defconstant "RandomError" 475)
(swig-defconstant "XServerError" 480)
(swig-defconstant "MonitorError" 485)
(swig-defconstant "RegistryError" 490)
(swig-defconstant "ConfigureError" 495)
(swig-defconstant "PolicyError" 499)
(swig-defconstant "FatalErrorException" 700)
(swig-defconstant "ResourceLimitFatalError" 700)
(swig-defconstant "TypeFatalError" 705)
(swig-defconstant "OptionFatalError" 710)
(swig-defconstant "DelegateFatalError" 715)
(swig-defconstant "MissingDelegateFatalError" 720)
(swig-defconstant "CorruptImageFatalError" 725)
(swig-defconstant "FileOpenFatalError" 730)
(swig-defconstant "BlobFatalError" 735)
(swig-defconstant "StreamFatalError" 740)
(swig-defconstant "CacheFatalError" 745)
(swig-defconstant "CoderFatalError" 750)
(swig-defconstant "FilterFatalError" 752)
(swig-defconstant "ModuleFatalError" 755)
(swig-defconstant "DrawFatalError" 760)
(swig-defconstant "ImageFatalError" 765)
(swig-defconstant "WandFatalError" 770)
(swig-defconstant "RandomFatalError" 775)
(swig-defconstant "XServerFatalError" 780)
(swig-defconstant "MonitorFatalError" 785)
(swig-defconstant "RegistryFatalError" 790)
(swig-defconstant "ConfigureFatalError" 795)
(swig-defconstant "PolicyFatalError" 799)

(swig-def-foreign-type "ExceptionType"
  :int)
(swig-def-foreign-class "ExceptionInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "severity" () :type :slot :class "ExceptionInfo") #.(swig-insert-id "ExceptionType" () :type :type))
   (#.(swig-insert-id "error_number" () :type :slot :class "ExceptionInfo") :int)
   (#.(swig-insert-id "reason" () :type :slot :class "ExceptionInfo") (* :char))
   (#.(swig-insert-id "description" () :type :slot :class "ExceptionInfo") (* :char))
   (#.(swig-insert-id "exceptions" () :type :slot :class "ExceptionInfo") (* :void))
   (#.(swig-insert-id "relinquish" () :type :slot :class "ExceptionInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "semaphore" () :type :slot :class "ExceptionInfo") (* #.(swig-insert-id "SemaphoreInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "ExceptionInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "ErrorHandler"
  (* (:function (#.(swig-insert-id "ExceptionType" () :type :type) (* :char) (* :char) ) :void)))
(swig-def-foreign-type "FatalErrorHandler"
  (* (:function (#.(swig-insert-id "ExceptionType" () :type :type) (* :char) (* :char) ) :void)))
(swig-def-foreign-type "WarningHandler"
  (* (:function (#.(swig-insert-id "ExceptionType" () :type :type) (* :char) (* :char) ) :void)))
(swig-def-foreign-class "ChannelFeatures"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "angular_second_moment" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "contrast" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "correlation" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "variance_sum_of_squares" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "inverse_difference_moment" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "sum_average" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "sum_variance" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "sum_entropy" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "entropy" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "difference_variance" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "difference_entropy" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "measure_of_correlation_1" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "measure_of_correlation_2" () :type :slot :class "ChannelFeatures") (:array :double 4))
   (#.(swig-insert-id "maximum_correlation_coefficient" () :type :slot :class "ChannelFeatures") (:array :double 4))
   ))

(swig-def-foreign-type "anontype10" :int)
(swig-defconstant "NoValue" #x0000)
(swig-defconstant "XValue" #x0001)
(swig-defconstant "XiValue" #x0001)
(swig-defconstant "YValue" #x0002)
(swig-defconstant "PsiValue" #x0002)
(swig-defconstant "WidthValue" #x0004)
(swig-defconstant "RhoValue" #x0004)
(swig-defconstant "HeightValue" #x0008)
(swig-defconstant "SigmaValue" #x0008)
(swig-defconstant "ChiValue" #x0010)
(swig-defconstant "XiNegative" #x0020)
(swig-defconstant "XNegative" #x0020)
(swig-defconstant "PsiNegative" #x0040)
(swig-defconstant "YNegative" #x0040)
(swig-defconstant "ChiNegative" #x0080)
(swig-defconstant "PercentValue" #x1000)
(swig-defconstant "AspectValue" #x2000)
(swig-defconstant "NormalizeValue" #x2000)
(swig-defconstant "LessValue" #x4000)
(swig-defconstant "GreaterValue" #x8000)
(swig-defconstant "MinimumValue" #x10000)
(swig-defconstant "CorrelateNormalizeValue" #x10000)
(swig-defconstant "AreaValue" #x20000)
(swig-defconstant "DecimalValue" #x40000)
(swig-defconstant "AllValues" #x7fffffff)

(swig-def-foreign-type "GeometryFlags"
  :int)
(swig-def-foreign-type "anontype11" :int)
(swig-defconstant "UndefinedGravity" 0)
(swig-defconstant "ForgetGravity" 0)
(swig-defconstant "NorthWestGravity" 1)
(swig-defconstant "NorthGravity" 2)
(swig-defconstant "NorthEastGravity" 3)
(swig-defconstant "WestGravity" 4)
(swig-defconstant "CenterGravity" 5)
(swig-defconstant "EastGravity" 6)
(swig-defconstant "SouthWestGravity" 7)
(swig-defconstant "SouthGravity" 8)
(swig-defconstant "SouthEastGravity" 9)
(swig-defconstant "StaticGravity" 10)

(swig-def-foreign-type "GravityType"
  :int)
(swig-def-foreign-class "AffineMatrix"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "sx" () :type :slot :class "AffineMatrix") :double)
   (#.(swig-insert-id "rx" () :type :slot :class "AffineMatrix") :double)
   (#.(swig-insert-id "ry" () :type :slot :class "AffineMatrix") :double)
   (#.(swig-insert-id "sy" () :type :slot :class "AffineMatrix") :double)
   (#.(swig-insert-id "tx" () :type :slot :class "AffineMatrix") :double)
   (#.(swig-insert-id "ty" () :type :slot :class "AffineMatrix") :double)
   ))

(swig-def-foreign-class "GeometryInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "rho" () :type :slot :class "GeometryInfo") :double)
   (#.(swig-insert-id "sigma" () :type :slot :class "GeometryInfo") :double)
   (#.(swig-insert-id "xi" () :type :slot :class "GeometryInfo") :double)
   (#.(swig-insert-id "psi" () :type :slot :class "GeometryInfo") :double)
   (#.(swig-insert-id "chi" () :type :slot :class "GeometryInfo") :double)
   ))

(swig-def-foreign-class "OffsetInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "x" () :type :slot :class "OffsetInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "y" () :type :slot :class "OffsetInfo") #.(swig-insert-id "ssize_t" () :type :type))
   ))

(swig-def-foreign-class "RectangleInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "width" () :type :slot :class "RectangleInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "height" () :type :slot :class "RectangleInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "x" () :type :slot :class "RectangleInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "y" () :type :slot :class "RectangleInfo") #.(swig-insert-id "ssize_t" () :type :type))
   ))

(swig-def-foreign-class "StringInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "StringInfo") (:array :char 4096))
   (#.(swig-insert-id "datum" () :type :slot :class "StringInfo") (* :unsigned-char))
   (#.(swig-insert-id "length" () :type :slot :class "StringInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "StringInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

;; forward referenced stub.
(swig-def-foreign-class "_RandomInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "RandomInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype12" :int)
(swig-defconstant "UndefinedMetric" 0)
(swig-defconstant "AbsoluteErrorMetric" (+ #.(swig-insert-id "UndefinedMetric" () :type :constant) 1))
(swig-defconstant "MeanAbsoluteErrorMetric" (+ #.(swig-insert-id "AbsoluteErrorMetric" () :type :constant) 1))
(swig-defconstant "MeanErrorPerPixelMetric" (+ #.(swig-insert-id "MeanAbsoluteErrorMetric" () :type :constant) 1))
(swig-defconstant "MeanSquaredErrorMetric" (+ #.(swig-insert-id "MeanErrorPerPixelMetric" () :type :constant) 1))
(swig-defconstant "PeakAbsoluteErrorMetric" (+ #.(swig-insert-id "MeanSquaredErrorMetric" () :type :constant) 1))
(swig-defconstant "PeakSignalToNoiseRatioMetric" (+ #.(swig-insert-id "PeakAbsoluteErrorMetric" () :type :constant) 1))
(swig-defconstant "RootMeanSquaredErrorMetric" (+ #.(swig-insert-id "PeakSignalToNoiseRatioMetric" () :type :constant) 1))

(swig-def-foreign-type "MetricType"
  :int)
(swig-def-foreign-class "FrameInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "width" () :type :slot :class "FrameInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "height" () :type :slot :class "FrameInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "x" () :type :slot :class "FrameInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "y" () :type :slot :class "FrameInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "inner_bevel" () :type :slot :class "FrameInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "outer_bevel" () :type :slot :class "FrameInfo") #.(swig-insert-id "ssize_t" () :type :type))
   ))

;; forward referenced stub.
(swig-def-foreign-class "_HashmapInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "HashmapInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "_LinkedListInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "LinkedListInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-class "ConfigureInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "ConfigureInfo") (* :char))
   (#.(swig-insert-id "name" () :type :slot :class "ConfigureInfo") (* :char))
   (#.(swig-insert-id "value" () :type :slot :class "ConfigureInfo") (* :char))
   (#.(swig-insert-id "exempt" () :type :slot :class "ConfigureInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "ConfigureInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "ConfigureInfo") (* #.(swig-insert-id "ConfigureInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "ConfigureInfo") (* #.(swig-insert-id "ConfigureInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "ConfigureInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype13" :int)
(swig-defconstant "UnrecognizedDispose" 0)
(swig-defconstant "UndefinedDispose" 0)
(swig-defconstant "NoneDispose" 1)
(swig-defconstant "BackgroundDispose" 2)
(swig-defconstant "PreviousDispose" 3)

(swig-def-foreign-type "DisposeType"
  :int)
(swig-def-foreign-type "anontype14" :int)
(swig-defconstant "UndefinedLayer" 0)
(swig-defconstant "CoalesceLayer" (+ #.(swig-insert-id "UndefinedLayer" () :type :constant) 1))
(swig-defconstant "CompareAnyLayer" (+ #.(swig-insert-id "CoalesceLayer" () :type :constant) 1))
(swig-defconstant "CompareClearLayer" (+ #.(swig-insert-id "CompareAnyLayer" () :type :constant) 1))
(swig-defconstant "CompareOverlayLayer" (+ #.(swig-insert-id "CompareClearLayer" () :type :constant) 1))
(swig-defconstant "DisposeLayer" (+ #.(swig-insert-id "CompareOverlayLayer" () :type :constant) 1))
(swig-defconstant "OptimizeLayer" (+ #.(swig-insert-id "DisposeLayer" () :type :constant) 1))
(swig-defconstant "OptimizeImageLayer" (+ #.(swig-insert-id "OptimizeLayer" () :type :constant) 1))
(swig-defconstant "OptimizePlusLayer" (+ #.(swig-insert-id "OptimizeImageLayer" () :type :constant) 1))
(swig-defconstant "OptimizeTransLayer" (+ #.(swig-insert-id "OptimizePlusLayer" () :type :constant) 1))
(swig-defconstant "RemoveDupsLayer" (+ #.(swig-insert-id "OptimizeTransLayer" () :type :constant) 1))
(swig-defconstant "RemoveZeroLayer" (+ #.(swig-insert-id "RemoveDupsLayer" () :type :constant) 1))
(swig-defconstant "CompositeLayer" (+ #.(swig-insert-id "RemoveZeroLayer" () :type :constant) 1))
(swig-defconstant "MergeLayer" (+ #.(swig-insert-id "CompositeLayer" () :type :constant) 1))
(swig-defconstant "FlattenLayer" (+ #.(swig-insert-id "MergeLayer" () :type :constant) 1))
(swig-defconstant "MosaicLayer" (+ #.(swig-insert-id "FlattenLayer" () :type :constant) 1))
(swig-defconstant "TrimBoundsLayer" (+ #.(swig-insert-id "MosaicLayer" () :type :constant) 1))

(swig-def-foreign-type "ImageLayerMethod"
  :int)
(swig-def-foreign-class "LocaleInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "LocaleInfo") (* :char))
   (#.(swig-insert-id "tag" () :type :slot :class "LocaleInfo") (* :char))
   (#.(swig-insert-id "message" () :type :slot :class "LocaleInfo") (* :char))
   (#.(swig-insert-id "stealth" () :type :slot :class "LocaleInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "LocaleInfo") (* #.(swig-insert-id "LocaleInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "LocaleInfo") (* #.(swig-insert-id "LocaleInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "LocaleInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype15" :int)
(swig-defconstant "UndefinedEvents" 0)
(swig-defconstant "NoEvents" #x00000)
(swig-defconstant "TraceEvent" #x00001)
(swig-defconstant "AnnotateEvent" #x00002)
(swig-defconstant "BlobEvent" #x00004)
(swig-defconstant "CacheEvent" #x00008)
(swig-defconstant "CoderEvent" #x00010)
(swig-defconstant "ConfigureEvent" #x00020)
(swig-defconstant "DeprecateEvent" #x00040)
(swig-defconstant "DrawEvent" #x00080)
(swig-defconstant "ExceptionEvent" #x00100)
(swig-defconstant "ImageEvent" #x00200)
(swig-defconstant "LocaleEvent" #x00400)
(swig-defconstant "ModuleEvent" #x00800)
(swig-defconstant "PolicyEvent" #x01000)
(swig-defconstant "ResourceEvent" #x02000)
(swig-defconstant "TransformEvent" #x04000)
(swig-defconstant "UserEvent" #x09000)
(swig-defconstant "WandEvent" #x10000)
(swig-defconstant "X11Event" #x20000)
(swig-defconstant "AllEvents" #x7fffffff)

(swig-def-foreign-type "LogEventType"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_LogInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "LogInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-class "MagicInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "MagicInfo") (* :char))
   (#.(swig-insert-id "name" () :type :slot :class "MagicInfo") (* :char))
   (#.(swig-insert-id "target" () :type :slot :class "MagicInfo") (* :char))
   (#.(swig-insert-id "magic" () :type :slot :class "MagicInfo") (* :unsigned-char))
   (#.(swig-insert-id "length" () :type :slot :class "MagicInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "offset" () :type :slot :class "MagicInfo") #.(swig-insert-id "MagickOffsetType" () :type :type))
   (#.(swig-insert-id "exempt" () :type :slot :class "MagicInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "MagicInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "MagicInfo") (* #.(swig-insert-id "MagicInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "MagicInfo") (* #.(swig-insert-id "MagicInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "MagicInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype16" :int)
(swig-defconstant "UndefinedFormatType" 0)
(swig-defconstant "ImplicitFormatType" (+ #.(swig-insert-id "UndefinedFormatType" () :type :constant) 1))
(swig-defconstant "ExplicitFormatType" (+ #.(swig-insert-id "ImplicitFormatType" () :type :constant) 1))

(swig-def-foreign-type "MagickFormatType"
  :int)
(swig-def-foreign-type "anontype17" :int)
(swig-defconstant "NoThreadSupport" #x0000)
(swig-defconstant "DecoderThreadSupport" #x0001)
(swig-defconstant "EncoderThreadSupport" #x0002)

(swig-def-foreign-type "MagickThreadSupport"
  :int)
(swig-def-foreign-type "DecodeImageHandler"
  (:function ((* #.(swig-insert-id "ImageInfo" () :type :type)) (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ) (* #.(swig-insert-id "Image" () :type :type))))
(swig-def-foreign-type "EncodeImageHandler"
  (:function ((* #.(swig-insert-id "ImageInfo" () :type :type)) (* #.(swig-insert-id "Image" () :type :type)) ) #.(swig-insert-id "MagickBooleanType" () :type :type)))
(swig-def-foreign-type "IsImageFormatHandler"
  (:function ((* :unsigned-char) #.(swig-insert-id "size_t" () :type :type) ) #.(swig-insert-id "MagickBooleanType" () :type :type)))
(swig-def-foreign-class "MagickInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "name" () :type :slot :class "MagickInfo") (* :char))
   (#.(swig-insert-id "description" () :type :slot :class "MagickInfo") (* :char))
   (#.(swig-insert-id "version" () :type :slot :class "MagickInfo") (* :char))
   (#.(swig-insert-id "note" () :type :slot :class "MagickInfo") (* :char))
   (#.(swig-insert-id "module" () :type :slot :class "MagickInfo") (* :char))
   (#.(swig-insert-id "image_info" () :type :slot :class "MagickInfo") (* #.(swig-insert-id "ImageInfo" () :type :type)))
   (#.(swig-insert-id "decoder" () :type :slot :class "MagickInfo") (* #.(swig-insert-id "DecodeImageHandler" () :type :type)))
   (#.(swig-insert-id "encoder" () :type :slot :class "MagickInfo") (* #.(swig-insert-id "EncodeImageHandler" () :type :type)))
   (#.(swig-insert-id "magick" () :type :slot :class "MagickInfo") (* #.(swig-insert-id "IsImageFormatHandler" () :type :type)))
   (#.(swig-insert-id "client_data" () :type :slot :class "MagickInfo") (* :void))
   (#.(swig-insert-id "adjoin" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "raw" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "endian_support" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "blob_support" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "seekable_stream" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "format_type" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickFormatType" () :type :type))
   (#.(swig-insert-id "thread_support" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickStatusType" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "MagickInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "MagickInfo") (* #.(swig-insert-id "MagickInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "MagickInfo") (* #.(swig-insert-id "MagickInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "MagickInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "AcquireMemoryHandler"
  (* (:function (#.(swig-insert-id "size_t" () :type :type) ) (* :void))))
(swig-def-foreign-type "DestroyMemoryHandler"
  (* (:function ((* :void) ) :void)))
(swig-def-foreign-type "ResizeMemoryHandler"
  (* (:function ((* :void) #.(swig-insert-id "size_t" () :type :type) ) (* :void))))
(swig-def-foreign-type "anontype18" :int)
(swig-defconstant "MagickImageCoderModule" 0)
(swig-defconstant "MagickImageFilterModule" (+ #.(swig-insert-id "MagickImageCoderModule" () :type :constant) 1))

(swig-def-foreign-type "MagickModuleType"
  :int)
(swig-def-foreign-class "ModuleInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "ModuleInfo") (* :char))
   (#.(swig-insert-id "tag" () :type :slot :class "ModuleInfo") (* :char))
   (#.(swig-insert-id "handle" () :type :slot :class "ModuleInfo") (* :void))
   (#.(swig-insert-id "unregister_module" () :type :slot :class "ModuleInfo") (* (:function (:void ) :void)))
   (#.(swig-insert-id "register_module" () :type :slot :class "ModuleInfo") (* (:function (:void ) #.(swig-insert-id "size_t" () :type :type))))
   (#.(swig-insert-id "timestamp" () :type :slot :class "ModuleInfo") #.(swig-insert-id "time_t" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "ModuleInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "ModuleInfo") (* #.(swig-insert-id "ModuleInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "ModuleInfo") (* #.(swig-insert-id "ModuleInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "ModuleInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "ImageFilterHandler"
  (:function ((* (* #.(swig-insert-id "Image" () :type :type))) :int (* (* :char)) (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ) #.(swig-insert-id "size_t" () :type :type)))
;; forward referenced stub.
(swig-def-foreign-class "_MimeInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "MimeInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "MagickProgressMonitor"
  (* (:function ((* :char) #.(swig-insert-id "MagickOffsetType" () :type :type) #.(swig-insert-id "MagickSizeType" () :type :type) (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "anontype19" :int)
(swig-defconstant "MagickUndefinedOptions" -1)
(swig-defconstant "MagickAlignOptions" 0)
(swig-defconstant "MagickAlphaOptions" (+ #.(swig-insert-id "MagickAlignOptions" () :type :constant) 1))
(swig-defconstant "MagickBooleanOptions" (+ #.(swig-insert-id "MagickAlphaOptions" () :type :constant) 1))
(swig-defconstant "MagickChannelOptions" (+ #.(swig-insert-id "MagickBooleanOptions" () :type :constant) 1))
(swig-defconstant "MagickClassOptions" (+ #.(swig-insert-id "MagickChannelOptions" () :type :constant) 1))
(swig-defconstant "MagickClipPathOptions" (+ #.(swig-insert-id "MagickClassOptions" () :type :constant) 1))
(swig-defconstant "MagickCoderOptions" (+ #.(swig-insert-id "MagickClipPathOptions" () :type :constant) 1))
(swig-defconstant "MagickColorOptions" (+ #.(swig-insert-id "MagickCoderOptions" () :type :constant) 1))
(swig-defconstant "MagickColorspaceOptions" (+ #.(swig-insert-id "MagickColorOptions" () :type :constant) 1))
(swig-defconstant "MagickCommandOptions" (+ #.(swig-insert-id "MagickColorspaceOptions" () :type :constant) 1))
(swig-defconstant "MagickComposeOptions" (+ #.(swig-insert-id "MagickCommandOptions" () :type :constant) 1))
(swig-defconstant "MagickCompressOptions" (+ #.(swig-insert-id "MagickComposeOptions" () :type :constant) 1))
(swig-defconstant "MagickConfigureOptions" (+ #.(swig-insert-id "MagickCompressOptions" () :type :constant) 1))
(swig-defconstant "MagickDataTypeOptions" (+ #.(swig-insert-id "MagickConfigureOptions" () :type :constant) 1))
(swig-defconstant "MagickDebugOptions" (+ #.(swig-insert-id "MagickDataTypeOptions" () :type :constant) 1))
(swig-defconstant "MagickDecorateOptions" (+ #.(swig-insert-id "MagickDebugOptions" () :type :constant) 1))
(swig-defconstant "MagickDelegateOptions" (+ #.(swig-insert-id "MagickDecorateOptions" () :type :constant) 1))
(swig-defconstant "MagickDirectionOptions" (+ #.(swig-insert-id "MagickDelegateOptions" () :type :constant) 1))
(swig-defconstant "MagickDisposeOptions" (+ #.(swig-insert-id "MagickDirectionOptions" () :type :constant) 1))
(swig-defconstant "MagickDistortOptions" (+ #.(swig-insert-id "MagickDisposeOptions" () :type :constant) 1))
(swig-defconstant "MagickDitherOptions" (+ #.(swig-insert-id "MagickDistortOptions" () :type :constant) 1))
(swig-defconstant "MagickEndianOptions" (+ #.(swig-insert-id "MagickDitherOptions" () :type :constant) 1))
(swig-defconstant "MagickEvaluateOptions" (+ #.(swig-insert-id "MagickEndianOptions" () :type :constant) 1))
(swig-defconstant "MagickFillRuleOptions" (+ #.(swig-insert-id "MagickEvaluateOptions" () :type :constant) 1))
(swig-defconstant "MagickFilterOptions" (+ #.(swig-insert-id "MagickFillRuleOptions" () :type :constant) 1))
(swig-defconstant "MagickFontOptions" (+ #.(swig-insert-id "MagickFilterOptions" () :type :constant) 1))
(swig-defconstant "MagickFontsOptions" (+ #.(swig-insert-id "MagickFontOptions" () :type :constant) 1))
(swig-defconstant "MagickFormatOptions" (+ #.(swig-insert-id "MagickFontsOptions" () :type :constant) 1))
(swig-defconstant "MagickFunctionOptions" (+ #.(swig-insert-id "MagickFormatOptions" () :type :constant) 1))
(swig-defconstant "MagickGravityOptions" (+ #.(swig-insert-id "MagickFunctionOptions" () :type :constant) 1))
(swig-defconstant "MagickImageListOptions" (+ #.(swig-insert-id "MagickGravityOptions" () :type :constant) 1))
(swig-defconstant "MagickIntentOptions" (+ #.(swig-insert-id "MagickImageListOptions" () :type :constant) 1))
(swig-defconstant "MagickInterlaceOptions" (+ #.(swig-insert-id "MagickIntentOptions" () :type :constant) 1))
(swig-defconstant "MagickInterpolateOptions" (+ #.(swig-insert-id "MagickInterlaceOptions" () :type :constant) 1))
(swig-defconstant "MagickKernelOptions" (+ #.(swig-insert-id "MagickInterpolateOptions" () :type :constant) 1))
(swig-defconstant "MagickLayerOptions" (+ #.(swig-insert-id "MagickKernelOptions" () :type :constant) 1))
(swig-defconstant "MagickLineCapOptions" (+ #.(swig-insert-id "MagickLayerOptions" () :type :constant) 1))
(swig-defconstant "MagickLineJoinOptions" (+ #.(swig-insert-id "MagickLineCapOptions" () :type :constant) 1))
(swig-defconstant "MagickListOptions" (+ #.(swig-insert-id "MagickLineJoinOptions" () :type :constant) 1))
(swig-defconstant "MagickLocaleOptions" (+ #.(swig-insert-id "MagickListOptions" () :type :constant) 1))
(swig-defconstant "MagickLogEventOptions" (+ #.(swig-insert-id "MagickLocaleOptions" () :type :constant) 1))
(swig-defconstant "MagickLogOptions" (+ #.(swig-insert-id "MagickLogEventOptions" () :type :constant) 1))
(swig-defconstant "MagickMagicOptions" (+ #.(swig-insert-id "MagickLogOptions" () :type :constant) 1))
(swig-defconstant "MagickMethodOptions" (+ #.(swig-insert-id "MagickMagicOptions" () :type :constant) 1))
(swig-defconstant "MagickMetricOptions" (+ #.(swig-insert-id "MagickMethodOptions" () :type :constant) 1))
(swig-defconstant "MagickMimeOptions" (+ #.(swig-insert-id "MagickMetricOptions" () :type :constant) 1))
(swig-defconstant "MagickModeOptions" (+ #.(swig-insert-id "MagickMimeOptions" () :type :constant) 1))
(swig-defconstant "MagickModuleOptions" (+ #.(swig-insert-id "MagickModeOptions" () :type :constant) 1))
(swig-defconstant "MagickMorphologyOptions" (+ #.(swig-insert-id "MagickModuleOptions" () :type :constant) 1))
(swig-defconstant "MagickNoiseOptions" (+ #.(swig-insert-id "MagickMorphologyOptions" () :type :constant) 1))
(swig-defconstant "MagickOrientationOptions" (+ #.(swig-insert-id "MagickNoiseOptions" () :type :constant) 1))
(swig-defconstant "MagickPolicyOptions" (+ #.(swig-insert-id "MagickOrientationOptions" () :type :constant) 1))
(swig-defconstant "MagickPolicyDomainOptions" (+ #.(swig-insert-id "MagickPolicyOptions" () :type :constant) 1))
(swig-defconstant "MagickPolicyRightsOptions" (+ #.(swig-insert-id "MagickPolicyDomainOptions" () :type :constant) 1))
(swig-defconstant "MagickPreviewOptions" (+ #.(swig-insert-id "MagickPolicyRightsOptions" () :type :constant) 1))
(swig-defconstant "MagickPrimitiveOptions" (+ #.(swig-insert-id "MagickPreviewOptions" () :type :constant) 1))
(swig-defconstant "MagickQuantumFormatOptions" (+ #.(swig-insert-id "MagickPrimitiveOptions" () :type :constant) 1))
(swig-defconstant "MagickResolutionOptions" (+ #.(swig-insert-id "MagickQuantumFormatOptions" () :type :constant) 1))
(swig-defconstant "MagickResourceOptions" (+ #.(swig-insert-id "MagickResolutionOptions" () :type :constant) 1))
(swig-defconstant "MagickSparseColorOptions" (+ #.(swig-insert-id "MagickResourceOptions" () :type :constant) 1))
(swig-defconstant "MagickStorageOptions" (+ #.(swig-insert-id "MagickSparseColorOptions" () :type :constant) 1))
(swig-defconstant "MagickStretchOptions" (+ #.(swig-insert-id "MagickStorageOptions" () :type :constant) 1))
(swig-defconstant "MagickStyleOptions" (+ #.(swig-insert-id "MagickStretchOptions" () :type :constant) 1))
(swig-defconstant "MagickThresholdOptions" (+ #.(swig-insert-id "MagickStyleOptions" () :type :constant) 1))
(swig-defconstant "MagickTypeOptions" (+ #.(swig-insert-id "MagickThresholdOptions" () :type :constant) 1))
(swig-defconstant "MagickValidateOptions" (+ #.(swig-insert-id "MagickTypeOptions" () :type :constant) 1))
(swig-defconstant "MagickVirtualPixelOptions" (+ #.(swig-insert-id "MagickValidateOptions" () :type :constant) 1))

(swig-def-foreign-type "MagickOption"
  :int)
(swig-def-foreign-type "anontype20" :int)
(swig-defconstant "UndefinedValidate" 0)
(swig-defconstant "NoValidate" #x00000)
(swig-defconstant "CompareValidate" #x00001)
(swig-defconstant "CompositeValidate" #x00002)
(swig-defconstant "ConvertValidate" #x00004)
(swig-defconstant "FormatsInMemoryValidate" #x00008)
(swig-defconstant "FormatsOnDiskValidate" #x00010)
(swig-defconstant "IdentifyValidate" #x00020)
(swig-defconstant "ImportExportValidate" #x00040)
(swig-defconstant "MontageValidate" #x00080)
(swig-defconstant "StreamValidate" #x00100)
(swig-defconstant "AllValidate" #x7fffffff)

(swig-def-foreign-type "ValidateType"
  :int)
(swig-def-foreign-class "OptionInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "mnemonic" () :type :slot :class "OptionInfo") (* :char))
   (#.(swig-insert-id "type" () :type :slot :class "OptionInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "OptionInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   ))

(swig-def-foreign-class "DoublePixelPacket"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "red" () :type :slot :class "DoublePixelPacket") :double)
   (#.(swig-insert-id "green" () :type :slot :class "DoublePixelPacket") :double)
   (#.(swig-insert-id "blue" () :type :slot :class "DoublePixelPacket") :double)
   (#.(swig-insert-id "opacity" () :type :slot :class "DoublePixelPacket") :double)
   (#.(swig-insert-id "index" () :type :slot :class "DoublePixelPacket") :double)
   ))

(swig-def-foreign-class "LongPixelPacket"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "red" () :type :slot :class "LongPixelPacket") :unsigned-int)
   (#.(swig-insert-id "green" () :type :slot :class "LongPixelPacket") :unsigned-int)
   (#.(swig-insert-id "blue" () :type :slot :class "LongPixelPacket") :unsigned-int)
   (#.(swig-insert-id "opacity" () :type :slot :class "LongPixelPacket") :unsigned-int)
   (#.(swig-insert-id "index" () :type :slot :class "LongPixelPacket") :unsigned-int)
   ))

(swig-def-foreign-class "MagickPixelPacket"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "storage_class" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "ClassType" () :type :type))
   (#.(swig-insert-id "colorspace" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "ColorspaceType" () :type :type))
   (#.(swig-insert-id "matte" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "fuzz" () :type :slot :class "MagickPixelPacket") :double)
   (#.(swig-insert-id "depth" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "red" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "MagickRealType" () :type :type))
   (#.(swig-insert-id "green" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "MagickRealType" () :type :type))
   (#.(swig-insert-id "blue" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "MagickRealType" () :type :type))
   (#.(swig-insert-id "opacity" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "MagickRealType" () :type :type))
   (#.(swig-insert-id "index" () :type :slot :class "MagickPixelPacket") #.(swig-insert-id "MagickRealType" () :type :type))
   ))

(swig-def-foreign-type "IndexPacket"
  #.(swig-insert-id "Quantum" () :type :type))
(swig-def-foreign-class "PixelPacket"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "blue" () :type :slot :class "PixelPacket") #.(swig-insert-id "Quantum" () :type :type))
   (#.(swig-insert-id "green" () :type :slot :class "PixelPacket") #.(swig-insert-id "Quantum" () :type :type))
   (#.(swig-insert-id "red" () :type :slot :class "PixelPacket") #.(swig-insert-id "Quantum" () :type :type))
   (#.(swig-insert-id "opacity" () :type :slot :class "PixelPacket") #.(swig-insert-id "Quantum" () :type :type))
   ))

(swig-def-foreign-class "ColorPacket"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "pixel" () :type :slot :class "ColorPacket") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "index" () :type :slot :class "ColorPacket") #.(swig-insert-id "IndexPacket" () :type :type))
   (#.(swig-insert-id "count" () :type :slot :class "ColorPacket") #.(swig-insert-id "MagickSizeType" () :type :type))
   ))

(swig-def-foreign-type "anontype21" :int)
(swig-defconstant "UndefinedMode" 0)
(swig-defconstant "FrameMode" (+ #.(swig-insert-id "UndefinedMode" () :type :constant) 1))
(swig-defconstant "UnframeMode" (+ #.(swig-insert-id "FrameMode" () :type :constant) 1))
(swig-defconstant "ConcatenateMode" (+ #.(swig-insert-id "UnframeMode" () :type :constant) 1))

(swig-def-foreign-type "MontageMode"
  :int)
(swig-def-foreign-class "MontageInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "geometry" () :type :slot :class "MontageInfo") (* :char))
   (#.(swig-insert-id "tile" () :type :slot :class "MontageInfo") (* :char))
   (#.(swig-insert-id "title" () :type :slot :class "MontageInfo") (* :char))
   (#.(swig-insert-id "frame" () :type :slot :class "MontageInfo") (* :char))
   (#.(swig-insert-id "texture" () :type :slot :class "MontageInfo") (* :char))
   (#.(swig-insert-id "font" () :type :slot :class "MontageInfo") (* :char))
   (#.(swig-insert-id "pointsize" () :type :slot :class "MontageInfo") :double)
   (#.(swig-insert-id "border_width" () :type :slot :class "MontageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "shadow" () :type :slot :class "MontageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "fill" () :type :slot :class "MontageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "stroke" () :type :slot :class "MontageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "background_color" () :type :slot :class "MontageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "border_color" () :type :slot :class "MontageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "matte_color" () :type :slot :class "MontageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "gravity" () :type :slot :class "MontageInfo") #.(swig-insert-id "GravityType" () :type :type))
   (#.(swig-insert-id "filename" () :type :slot :class "MontageInfo") (:array :char 4096))
   (#.(swig-insert-id "debug" () :type :slot :class "MontageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "MontageInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype22" :int)
(swig-defconstant "UndefinedKernel" 0)
(swig-defconstant "UnityKernel" (+ #.(swig-insert-id "UndefinedKernel" () :type :constant) 1))
(swig-defconstant "GaussianKernel" (+ #.(swig-insert-id "UnityKernel" () :type :constant) 1))
(swig-defconstant "DoGKernel" (+ #.(swig-insert-id "GaussianKernel" () :type :constant) 1))
(swig-defconstant "LoGKernel" (+ #.(swig-insert-id "DoGKernel" () :type :constant) 1))
(swig-defconstant "BlurKernel" (+ #.(swig-insert-id "LoGKernel" () :type :constant) 1))
(swig-defconstant "CometKernel" (+ #.(swig-insert-id "BlurKernel" () :type :constant) 1))
(swig-defconstant "LaplacianKernel" (+ #.(swig-insert-id "CometKernel" () :type :constant) 1))
(swig-defconstant "SobelKernel" (+ #.(swig-insert-id "LaplacianKernel" () :type :constant) 1))
(swig-defconstant "FreiChenKernel" (+ #.(swig-insert-id "SobelKernel" () :type :constant) 1))
(swig-defconstant "RobertsKernel" (+ #.(swig-insert-id "FreiChenKernel" () :type :constant) 1))
(swig-defconstant "PrewittKernel" (+ #.(swig-insert-id "RobertsKernel" () :type :constant) 1))
(swig-defconstant "CompassKernel" (+ #.(swig-insert-id "PrewittKernel" () :type :constant) 1))
(swig-defconstant "KirschKernel" (+ #.(swig-insert-id "CompassKernel" () :type :constant) 1))
(swig-defconstant "DiamondKernel" (+ #.(swig-insert-id "KirschKernel" () :type :constant) 1))
(swig-defconstant "SquareKernel" (+ #.(swig-insert-id "DiamondKernel" () :type :constant) 1))
(swig-defconstant "RectangleKernel" (+ #.(swig-insert-id "SquareKernel" () :type :constant) 1))
(swig-defconstant "DiskKernel" (+ #.(swig-insert-id "RectangleKernel" () :type :constant) 1))
(swig-defconstant "PlusKernel" (+ #.(swig-insert-id "DiskKernel" () :type :constant) 1))
(swig-defconstant "CrossKernel" (+ #.(swig-insert-id "PlusKernel" () :type :constant) 1))
(swig-defconstant "RingKernel" (+ #.(swig-insert-id "CrossKernel" () :type :constant) 1))
(swig-defconstant "PeaksKernel" (+ #.(swig-insert-id "RingKernel" () :type :constant) 1))
(swig-defconstant "EdgesKernel" (+ #.(swig-insert-id "PeaksKernel" () :type :constant) 1))
(swig-defconstant "CornersKernel" (+ #.(swig-insert-id "EdgesKernel" () :type :constant) 1))
(swig-defconstant "ThinDiagonalsKernel" (+ #.(swig-insert-id "CornersKernel" () :type :constant) 1))
(swig-defconstant "LineEndsKernel" (+ #.(swig-insert-id "ThinDiagonalsKernel" () :type :constant) 1))
(swig-defconstant "LineJunctionsKernel" (+ #.(swig-insert-id "LineEndsKernel" () :type :constant) 1))
(swig-defconstant "RidgesKernel" (+ #.(swig-insert-id "LineJunctionsKernel" () :type :constant) 1))
(swig-defconstant "ConvexHullKernel" (+ #.(swig-insert-id "RidgesKernel" () :type :constant) 1))
(swig-defconstant "SkeletonKernel" (+ #.(swig-insert-id "ConvexHullKernel" () :type :constant) 1))
(swig-defconstant "ChebyshevKernel" (+ #.(swig-insert-id "SkeletonKernel" () :type :constant) 1))
(swig-defconstant "ManhattanKernel" (+ #.(swig-insert-id "ChebyshevKernel" () :type :constant) 1))
(swig-defconstant "EuclideanKernel" (+ #.(swig-insert-id "ManhattanKernel" () :type :constant) 1))
(swig-defconstant "UserDefinedKernel" (+ #.(swig-insert-id "EuclideanKernel" () :type :constant) 1))

(swig-def-foreign-type "KernelInfoType"
  :int)
(swig-def-foreign-type "anontype23" :int)
(swig-defconstant "UndefinedMorphology" 0)
(swig-defconstant "ConvolveMorphology" (+ #.(swig-insert-id "UndefinedMorphology" () :type :constant) 1))
(swig-defconstant "CorrelateMorphology" (+ #.(swig-insert-id "ConvolveMorphology" () :type :constant) 1))
(swig-defconstant "ErodeMorphology" (+ #.(swig-insert-id "CorrelateMorphology" () :type :constant) 1))
(swig-defconstant "DilateMorphology" (+ #.(swig-insert-id "ErodeMorphology" () :type :constant) 1))
(swig-defconstant "ErodeIntensityMorphology" (+ #.(swig-insert-id "DilateMorphology" () :type :constant) 1))
(swig-defconstant "DilateIntensityMorphology" (+ #.(swig-insert-id "ErodeIntensityMorphology" () :type :constant) 1))
(swig-defconstant "DistanceMorphology" (+ #.(swig-insert-id "DilateIntensityMorphology" () :type :constant) 1))
(swig-defconstant "OpenMorphology" (+ #.(swig-insert-id "DistanceMorphology" () :type :constant) 1))
(swig-defconstant "CloseMorphology" (+ #.(swig-insert-id "OpenMorphology" () :type :constant) 1))
(swig-defconstant "OpenIntensityMorphology" (+ #.(swig-insert-id "CloseMorphology" () :type :constant) 1))
(swig-defconstant "CloseIntensityMorphology" (+ #.(swig-insert-id "OpenIntensityMorphology" () :type :constant) 1))
(swig-defconstant "SmoothMorphology" (+ #.(swig-insert-id "CloseIntensityMorphology" () :type :constant) 1))
(swig-defconstant "EdgeInMorphology" (+ #.(swig-insert-id "SmoothMorphology" () :type :constant) 1))
(swig-defconstant "EdgeOutMorphology" (+ #.(swig-insert-id "EdgeInMorphology" () :type :constant) 1))
(swig-defconstant "EdgeMorphology" (+ #.(swig-insert-id "EdgeOutMorphology" () :type :constant) 1))
(swig-defconstant "TopHatMorphology" (+ #.(swig-insert-id "EdgeMorphology" () :type :constant) 1))
(swig-defconstant "BottomHatMorphology" (+ #.(swig-insert-id "TopHatMorphology" () :type :constant) 1))
(swig-defconstant "HitAndMissMorphology" (+ #.(swig-insert-id "BottomHatMorphology" () :type :constant) 1))
(swig-defconstant "ThinningMorphology" (+ #.(swig-insert-id "HitAndMissMorphology" () :type :constant) 1))
(swig-defconstant "ThickenMorphology" (+ #.(swig-insert-id "ThinningMorphology" () :type :constant) 1))

(swig-def-foreign-type "MorphologyMethod"
  :int)
(swig-def-foreign-class "KernelInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "type" () :type :slot :class "KernelInfo") #.(swig-insert-id "KernelInfoType" () :type :type))
   (#.(swig-insert-id "width" () :type :slot :class "KernelInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "height" () :type :slot :class "KernelInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "x" () :type :slot :class "KernelInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "y" () :type :slot :class "KernelInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "values" () :type :slot :class "KernelInfo") (* :double))
   (#.(swig-insert-id "minimum" () :type :slot :class "KernelInfo") :double)
   (#.(swig-insert-id "maximum" () :type :slot :class "KernelInfo") :double)
   (#.(swig-insert-id "negative_range" () :type :slot :class "KernelInfo") :double)
   (#.(swig-insert-id "positive_range" () :type :slot :class "KernelInfo") :double)
   (#.(swig-insert-id "angle" () :type :slot :class "KernelInfo") :double)
   (#.(swig-insert-id "next" () :type :slot :class "KernelInfo") (* #.(swig-insert-id "KernelInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "KernelInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype24" :int)
(swig-defconstant "UndefinedPreview" 0)
(swig-defconstant "RotatePreview" (+ #.(swig-insert-id "UndefinedPreview" () :type :constant) 1))
(swig-defconstant "ShearPreview" (+ #.(swig-insert-id "RotatePreview" () :type :constant) 1))
(swig-defconstant "RollPreview" (+ #.(swig-insert-id "ShearPreview" () :type :constant) 1))
(swig-defconstant "HuePreview" (+ #.(swig-insert-id "RollPreview" () :type :constant) 1))
(swig-defconstant "SaturationPreview" (+ #.(swig-insert-id "HuePreview" () :type :constant) 1))
(swig-defconstant "BrightnessPreview" (+ #.(swig-insert-id "SaturationPreview" () :type :constant) 1))
(swig-defconstant "GammaPreview" (+ #.(swig-insert-id "BrightnessPreview" () :type :constant) 1))
(swig-defconstant "SpiffPreview" (+ #.(swig-insert-id "GammaPreview" () :type :constant) 1))
(swig-defconstant "DullPreview" (+ #.(swig-insert-id "SpiffPreview" () :type :constant) 1))
(swig-defconstant "GrayscalePreview" (+ #.(swig-insert-id "DullPreview" () :type :constant) 1))
(swig-defconstant "QuantizePreview" (+ #.(swig-insert-id "GrayscalePreview" () :type :constant) 1))
(swig-defconstant "DespecklePreview" (+ #.(swig-insert-id "QuantizePreview" () :type :constant) 1))
(swig-defconstant "ReduceNoisePreview" (+ #.(swig-insert-id "DespecklePreview" () :type :constant) 1))
(swig-defconstant "AddNoisePreview" (+ #.(swig-insert-id "ReduceNoisePreview" () :type :constant) 1))
(swig-defconstant "SharpenPreview" (+ #.(swig-insert-id "AddNoisePreview" () :type :constant) 1))
(swig-defconstant "BlurPreview" (+ #.(swig-insert-id "SharpenPreview" () :type :constant) 1))
(swig-defconstant "ThresholdPreview" (+ #.(swig-insert-id "BlurPreview" () :type :constant) 1))
(swig-defconstant "EdgeDetectPreview" (+ #.(swig-insert-id "ThresholdPreview" () :type :constant) 1))
(swig-defconstant "SpreadPreview" (+ #.(swig-insert-id "EdgeDetectPreview" () :type :constant) 1))
(swig-defconstant "SolarizePreview" (+ #.(swig-insert-id "SpreadPreview" () :type :constant) 1))
(swig-defconstant "ShadePreview" (+ #.(swig-insert-id "SolarizePreview" () :type :constant) 1))
(swig-defconstant "RaisePreview" (+ #.(swig-insert-id "ShadePreview" () :type :constant) 1))
(swig-defconstant "SegmentPreview" (+ #.(swig-insert-id "RaisePreview" () :type :constant) 1))
(swig-defconstant "SwirlPreview" (+ #.(swig-insert-id "SegmentPreview" () :type :constant) 1))
(swig-defconstant "ImplodePreview" (+ #.(swig-insert-id "SwirlPreview" () :type :constant) 1))
(swig-defconstant "WavePreview" (+ #.(swig-insert-id "ImplodePreview" () :type :constant) 1))
(swig-defconstant "OilPaintPreview" (+ #.(swig-insert-id "WavePreview" () :type :constant) 1))
(swig-defconstant "CharcoalDrawingPreview" (+ #.(swig-insert-id "OilPaintPreview" () :type :constant) 1))
(swig-defconstant "JPEGPreview" (+ #.(swig-insert-id "CharcoalDrawingPreview" () :type :constant) 1))

(swig-def-foreign-type "PreviewType"
  :int)
(swig-def-foreign-class "ProfileInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "name" () :type :slot :class "ProfileInfo") (* :char))
   (#.(swig-insert-id "length" () :type :slot :class "ProfileInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "info" () :type :slot :class "ProfileInfo") (* :unsigned-char))
   (#.(swig-insert-id "signature" () :type :slot :class "ProfileInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype25" :int)
(swig-defconstant "UndefinedIntent" 0)
(swig-defconstant "SaturationIntent" (+ #.(swig-insert-id "UndefinedIntent" () :type :constant) 1))
(swig-defconstant "PerceptualIntent" (+ #.(swig-insert-id "SaturationIntent" () :type :constant) 1))
(swig-defconstant "AbsoluteIntent" (+ #.(swig-insert-id "PerceptualIntent" () :type :constant) 1))
(swig-defconstant "RelativeIntent" (+ #.(swig-insert-id "AbsoluteIntent" () :type :constant) 1))

(swig-def-foreign-type "RenderingIntent"
  :int)
(swig-def-foreign-type "anontype26" :int)
(swig-defconstant "UndefinedFilter" 0)
(swig-defconstant "PointFilter" (+ #.(swig-insert-id "UndefinedFilter" () :type :constant) 1))
(swig-defconstant "BoxFilter" (+ #.(swig-insert-id "PointFilter" () :type :constant) 1))
(swig-defconstant "TriangleFilter" (+ #.(swig-insert-id "BoxFilter" () :type :constant) 1))
(swig-defconstant "HermiteFilter" (+ #.(swig-insert-id "TriangleFilter" () :type :constant) 1))
(swig-defconstant "HanningFilter" (+ #.(swig-insert-id "HermiteFilter" () :type :constant) 1))
(swig-defconstant "HammingFilter" (+ #.(swig-insert-id "HanningFilter" () :type :constant) 1))
(swig-defconstant "BlackmanFilter" (+ #.(swig-insert-id "HammingFilter" () :type :constant) 1))
(swig-defconstant "GaussianFilter" (+ #.(swig-insert-id "BlackmanFilter" () :type :constant) 1))
(swig-defconstant "QuadraticFilter" (+ #.(swig-insert-id "GaussianFilter" () :type :constant) 1))
(swig-defconstant "CubicFilter" (+ #.(swig-insert-id "QuadraticFilter" () :type :constant) 1))
(swig-defconstant "CatromFilter" (+ #.(swig-insert-id "CubicFilter" () :type :constant) 1))
(swig-defconstant "MitchellFilter" (+ #.(swig-insert-id "CatromFilter" () :type :constant) 1))
(swig-defconstant "LanczosFilter" (+ #.(swig-insert-id "MitchellFilter" () :type :constant) 1))
(swig-defconstant "BesselFilter" (+ #.(swig-insert-id "LanczosFilter" () :type :constant) 1))
(swig-defconstant "SincFilter" (+ #.(swig-insert-id "BesselFilter" () :type :constant) 1))
(swig-defconstant "KaiserFilter" (+ #.(swig-insert-id "SincFilter" () :type :constant) 1))
(swig-defconstant "WelshFilter" (+ #.(swig-insert-id "KaiserFilter" () :type :constant) 1))
(swig-defconstant "ParzenFilter" (+ #.(swig-insert-id "WelshFilter" () :type :constant) 1))
(swig-defconstant "LagrangeFilter" (+ #.(swig-insert-id "ParzenFilter" () :type :constant) 1))
(swig-defconstant "BohmanFilter" (+ #.(swig-insert-id "LagrangeFilter" () :type :constant) 1))
(swig-defconstant "BartlettFilter" (+ #.(swig-insert-id "BohmanFilter" () :type :constant) 1))
(swig-defconstant "SentinelFilter" (+ #.(swig-insert-id "BartlettFilter" () :type :constant) 1))

(swig-def-foreign-type "FilterTypes"
  :int)
(swig-def-foreign-type "anontype27" :int)
(swig-defconstant "UndefinedInterpolatePixel" 0)
(swig-defconstant "AverageInterpolatePixel" (+ #.(swig-insert-id "UndefinedInterpolatePixel" () :type :constant) 1))
(swig-defconstant "BicubicInterpolatePixel" (+ #.(swig-insert-id "AverageInterpolatePixel" () :type :constant) 1))
(swig-defconstant "BilinearInterpolatePixel" (+ #.(swig-insert-id "BicubicInterpolatePixel" () :type :constant) 1))
(swig-defconstant "FilterInterpolatePixel" (+ #.(swig-insert-id "BilinearInterpolatePixel" () :type :constant) 1))
(swig-defconstant "IntegerInterpolatePixel" (+ #.(swig-insert-id "FilterInterpolatePixel" () :type :constant) 1))
(swig-defconstant "MeshInterpolatePixel" (+ #.(swig-insert-id "IntegerInterpolatePixel" () :type :constant) 1))
(swig-defconstant "NearestNeighborInterpolatePixel" (+ #.(swig-insert-id "MeshInterpolatePixel" () :type :constant) 1))
(swig-defconstant "SplineInterpolatePixel" (+ #.(swig-insert-id "NearestNeighborInterpolatePixel" () :type :constant) 1))

(swig-def-foreign-type "InterpolatePixelMethod"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_ResampleFilter" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "ResampleFilter"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype28" :int)
(swig-defconstant "UndefinedCompliance" 0)
(swig-defconstant "NoCompliance" #x0000)
(swig-defconstant "SVGCompliance" #x0001)
(swig-defconstant "X11Compliance" #x0002)
(swig-defconstant "XPMCompliance" #x0004)
(swig-defconstant "AllCompliance" #x7fffffff)

(swig-def-foreign-type "ComplianceType"
  :int)
(swig-def-foreign-class "ColorInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "path" () :type :slot :class "ColorInfo") (* :char))
   (#.(swig-insert-id "name" () :type :slot :class "ColorInfo") (* :char))
   (#.(swig-insert-id "compliance" () :type :slot :class "ColorInfo") #.(swig-insert-id "ComplianceType" () :type :type))
   (#.(swig-insert-id "color" () :type :slot :class "ColorInfo") #.(swig-insert-id "MagickPixelPacket" () :type :type))
   (#.(swig-insert-id "exempt" () :type :slot :class "ColorInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "stealth" () :type :slot :class "ColorInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "ColorInfo") (* #.(swig-insert-id "ColorInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "ColorInfo") (* #.(swig-insert-id "ColorInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "ColorInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-class "ErrorInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "mean_error_per_pixel" () :type :slot :class "ErrorInfo") :double)
   (#.(swig-insert-id "normalized_mean_error" () :type :slot :class "ErrorInfo") :double)
   (#.(swig-insert-id "normalized_maximum_error" () :type :slot :class "ErrorInfo") :double)
   ))

(swig-def-foreign-type "anontype29" :int)
(swig-defconstant "UndefinedTimerState" 0)
(swig-defconstant "StoppedTimerState" (+ #.(swig-insert-id "UndefinedTimerState" () :type :constant) 1))
(swig-defconstant "RunningTimerState" (+ #.(swig-insert-id "StoppedTimerState" () :type :constant) 1))

(swig-def-foreign-type "TimerState"
  :int)
(swig-def-foreign-class "Timer"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "start" () :type :slot :class "Timer") :double)
   (#.(swig-insert-id "stop" () :type :slot :class "Timer") :double)
   (#.(swig-insert-id "total" () :type :slot :class "Timer") :double)
   ))

(swig-def-foreign-class "TimerInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "user" () :type :slot :class "TimerInfo") #.(swig-insert-id "Timer" () :type :type))
   (#.(swig-insert-id "elapsed" () :type :slot :class "TimerInfo") #.(swig-insert-id "Timer" () :type :type))
   (#.(swig-insert-id "state" () :type :slot :class "TimerInfo") #.(swig-insert-id "TimerState" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "TimerInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype30" :int)
(swig-defconstant "UndefinedVirtualPixelMethod" 0)
(swig-defconstant "BackgroundVirtualPixelMethod" (+ #.(swig-insert-id "UndefinedVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "ConstantVirtualPixelMethod" (+ #.(swig-insert-id "BackgroundVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "DitherVirtualPixelMethod" (+ #.(swig-insert-id "ConstantVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "EdgeVirtualPixelMethod" (+ #.(swig-insert-id "DitherVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "MirrorVirtualPixelMethod" (+ #.(swig-insert-id "EdgeVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "RandomVirtualPixelMethod" (+ #.(swig-insert-id "MirrorVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "TileVirtualPixelMethod" (+ #.(swig-insert-id "RandomVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "TransparentVirtualPixelMethod" (+ #.(swig-insert-id "TileVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "MaskVirtualPixelMethod" (+ #.(swig-insert-id "TransparentVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "BlackVirtualPixelMethod" (+ #.(swig-insert-id "MaskVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "GrayVirtualPixelMethod" (+ #.(swig-insert-id "BlackVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "WhiteVirtualPixelMethod" (+ #.(swig-insert-id "GrayVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "HorizontalTileVirtualPixelMethod" (+ #.(swig-insert-id "WhiteVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "VerticalTileVirtualPixelMethod" (+ #.(swig-insert-id "HorizontalTileVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "HorizontalTileEdgeVirtualPixelMethod" (+ #.(swig-insert-id "VerticalTileVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "VerticalTileEdgeVirtualPixelMethod" (+ #.(swig-insert-id "HorizontalTileEdgeVirtualPixelMethod" () :type :constant) 1))
(swig-defconstant "CheckerTileVirtualPixelMethod" (+ #.(swig-insert-id "VerticalTileEdgeVirtualPixelMethod" () :type :constant) 1))

(swig-def-foreign-type "VirtualPixelMethod"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_CacheView" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "CacheView"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype31" :int)
(swig-defconstant "UndefinedEndian" 0)
(swig-defconstant "LSBEndian" (+ #.(swig-insert-id "UndefinedEndian" () :type :constant) 1))
(swig-defconstant "MSBEndian" (+ #.(swig-insert-id "LSBEndian" () :type :constant) 1))

(swig-def-foreign-type "EndianType"
  :int)
(swig-def-foreign-type "anontype32" :int)
(swig-defconstant "UndefinedQuantumAlpha" 0)
(swig-defconstant "AssociatedQuantumAlpha" (+ #.(swig-insert-id "UndefinedQuantumAlpha" () :type :constant) 1))
(swig-defconstant "DisassociatedQuantumAlpha" (+ #.(swig-insert-id "AssociatedQuantumAlpha" () :type :constant) 1))

(swig-def-foreign-type "QuantumAlphaType"
  :int)
(swig-def-foreign-type "anontype33" :int)
(swig-defconstant "UndefinedQuantumFormat" 0)
(swig-defconstant "FloatingPointQuantumFormat" (+ #.(swig-insert-id "UndefinedQuantumFormat" () :type :constant) 1))
(swig-defconstant "SignedQuantumFormat" (+ #.(swig-insert-id "FloatingPointQuantumFormat" () :type :constant) 1))
(swig-defconstant "UnsignedQuantumFormat" (+ #.(swig-insert-id "SignedQuantumFormat" () :type :constant) 1))

(swig-def-foreign-type "QuantumFormatType"
  :int)
(swig-def-foreign-type "anontype34" :int)
(swig-defconstant "UndefinedQuantum" 0)
(swig-defconstant "AlphaQuantum" (+ #.(swig-insert-id "UndefinedQuantum" () :type :constant) 1))
(swig-defconstant "BlackQuantum" (+ #.(swig-insert-id "AlphaQuantum" () :type :constant) 1))
(swig-defconstant "BlueQuantum" (+ #.(swig-insert-id "BlackQuantum" () :type :constant) 1))
(swig-defconstant "CMYKAQuantum" (+ #.(swig-insert-id "BlueQuantum" () :type :constant) 1))
(swig-defconstant "CMYKQuantum" (+ #.(swig-insert-id "CMYKAQuantum" () :type :constant) 1))
(swig-defconstant "CyanQuantum" (+ #.(swig-insert-id "CMYKQuantum" () :type :constant) 1))
(swig-defconstant "GrayAlphaQuantum" (+ #.(swig-insert-id "CyanQuantum" () :type :constant) 1))
(swig-defconstant "GrayQuantum" (+ #.(swig-insert-id "GrayAlphaQuantum" () :type :constant) 1))
(swig-defconstant "GreenQuantum" (+ #.(swig-insert-id "GrayQuantum" () :type :constant) 1))
(swig-defconstant "IndexAlphaQuantum" (+ #.(swig-insert-id "GreenQuantum" () :type :constant) 1))
(swig-defconstant "IndexQuantum" (+ #.(swig-insert-id "IndexAlphaQuantum" () :type :constant) 1))
(swig-defconstant "MagentaQuantum" (+ #.(swig-insert-id "IndexQuantum" () :type :constant) 1))
(swig-defconstant "OpacityQuantum" (+ #.(swig-insert-id "MagentaQuantum" () :type :constant) 1))
(swig-defconstant "RedQuantum" (+ #.(swig-insert-id "OpacityQuantum" () :type :constant) 1))
(swig-defconstant "RGBAQuantum" (+ #.(swig-insert-id "RedQuantum" () :type :constant) 1))
(swig-defconstant "BGRAQuantum" (+ #.(swig-insert-id "RGBAQuantum" () :type :constant) 1))
(swig-defconstant "RGBOQuantum" (+ #.(swig-insert-id "BGRAQuantum" () :type :constant) 1))
(swig-defconstant "RGBQuantum" (+ #.(swig-insert-id "RGBOQuantum" () :type :constant) 1))
(swig-defconstant "YellowQuantum" (+ #.(swig-insert-id "RGBQuantum" () :type :constant) 1))
(swig-defconstant "GrayPadQuantum" (+ #.(swig-insert-id "YellowQuantum" () :type :constant) 1))
(swig-defconstant "RGBPadQuantum" (+ #.(swig-insert-id "GrayPadQuantum" () :type :constant) 1))
(swig-defconstant "CbYCrYQuantum" (+ #.(swig-insert-id "RGBPadQuantum" () :type :constant) 1))
(swig-defconstant "CbYCrQuantum" (+ #.(swig-insert-id "CbYCrYQuantum" () :type :constant) 1))
(swig-defconstant "CbYCrAQuantum" (+ #.(swig-insert-id "CbYCrQuantum" () :type :constant) 1))
(swig-defconstant "CMYKOQuantum" (+ #.(swig-insert-id "CbYCrAQuantum" () :type :constant) 1))

(swig-def-foreign-type "QuantumType"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_QuantumInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "QuantumInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "StreamHandler"
  (* (:function ((* #.(swig-insert-id "Image" () :type :type)) (* :void) #.(swig-insert-id "size_t" () :type :type) ) #.(swig-insert-id "size_t" () :type :type))))
(swig-def-foreign-type "anontype35" :int)
(swig-defconstant "UndefinedAlphaChannel" 0)
(swig-defconstant "ActivateAlphaChannel" (+ #.(swig-insert-id "UndefinedAlphaChannel" () :type :constant) 1))
(swig-defconstant "BackgroundAlphaChannel" (+ #.(swig-insert-id "ActivateAlphaChannel" () :type :constant) 1))
(swig-defconstant "CopyAlphaChannel" (+ #.(swig-insert-id "BackgroundAlphaChannel" () :type :constant) 1))
(swig-defconstant "DeactivateAlphaChannel" (+ #.(swig-insert-id "CopyAlphaChannel" () :type :constant) 1))
(swig-defconstant "ExtractAlphaChannel" (+ #.(swig-insert-id "DeactivateAlphaChannel" () :type :constant) 1))
(swig-defconstant "OpaqueAlphaChannel" (+ #.(swig-insert-id "ExtractAlphaChannel" () :type :constant) 1))
(swig-defconstant "ResetAlphaChannel" (+ #.(swig-insert-id "OpaqueAlphaChannel" () :type :constant) 1))
(swig-defconstant "SetAlphaChannel" (+ #.(swig-insert-id "ResetAlphaChannel" () :type :constant) 1))
(swig-defconstant "ShapeAlphaChannel" (+ #.(swig-insert-id "SetAlphaChannel" () :type :constant) 1))
(swig-defconstant "TransparentAlphaChannel" (+ #.(swig-insert-id "ShapeAlphaChannel" () :type :constant) 1))

(swig-def-foreign-type "AlphaChannelType"
  :int)
(swig-def-foreign-type "anontype36" :int)
(swig-defconstant "UndefinedType" 0)
(swig-defconstant "BilevelType" (+ #.(swig-insert-id "UndefinedType" () :type :constant) 1))
(swig-defconstant "GrayscaleType" (+ #.(swig-insert-id "BilevelType" () :type :constant) 1))
(swig-defconstant "GrayscaleMatteType" (+ #.(swig-insert-id "GrayscaleType" () :type :constant) 1))
(swig-defconstant "PaletteType" (+ #.(swig-insert-id "GrayscaleMatteType" () :type :constant) 1))
(swig-defconstant "PaletteMatteType" (+ #.(swig-insert-id "PaletteType" () :type :constant) 1))
(swig-defconstant "TrueColorType" (+ #.(swig-insert-id "PaletteMatteType" () :type :constant) 1))
(swig-defconstant "TrueColorMatteType" (+ #.(swig-insert-id "TrueColorType" () :type :constant) 1))
(swig-defconstant "ColorSeparationType" (+ #.(swig-insert-id "TrueColorMatteType" () :type :constant) 1))
(swig-defconstant "ColorSeparationMatteType" (+ #.(swig-insert-id "ColorSeparationType" () :type :constant) 1))
(swig-defconstant "OptimizeType" (+ #.(swig-insert-id "ColorSeparationMatteType" () :type :constant) 1))
(swig-defconstant "PaletteBilevelMatteType" (+ #.(swig-insert-id "OptimizeType" () :type :constant) 1))

(swig-def-foreign-type "ImageType"
  :int)
(swig-def-foreign-type "anontype37" :int)
(swig-defconstant "UndefinedInterlace" 0)
(swig-defconstant "NoInterlace" (+ #.(swig-insert-id "UndefinedInterlace" () :type :constant) 1))
(swig-defconstant "LineInterlace" (+ #.(swig-insert-id "NoInterlace" () :type :constant) 1))
(swig-defconstant "PlaneInterlace" (+ #.(swig-insert-id "LineInterlace" () :type :constant) 1))
(swig-defconstant "PartitionInterlace" (+ #.(swig-insert-id "PlaneInterlace" () :type :constant) 1))
(swig-defconstant "GIFInterlace" (+ #.(swig-insert-id "PartitionInterlace" () :type :constant) 1))
(swig-defconstant "JPEGInterlace" (+ #.(swig-insert-id "GIFInterlace" () :type :constant) 1))
(swig-defconstant "PNGInterlace" (+ #.(swig-insert-id "JPEGInterlace" () :type :constant) 1))

(swig-def-foreign-type "InterlaceType"
  :int)
(swig-def-foreign-type "anontype38" :int)
(swig-defconstant "UndefinedOrientation" 0)
(swig-defconstant "TopLeftOrientation" (+ #.(swig-insert-id "UndefinedOrientation" () :type :constant) 1))
(swig-defconstant "TopRightOrientation" (+ #.(swig-insert-id "TopLeftOrientation" () :type :constant) 1))
(swig-defconstant "BottomRightOrientation" (+ #.(swig-insert-id "TopRightOrientation" () :type :constant) 1))
(swig-defconstant "BottomLeftOrientation" (+ #.(swig-insert-id "BottomRightOrientation" () :type :constant) 1))
(swig-defconstant "LeftTopOrientation" (+ #.(swig-insert-id "BottomLeftOrientation" () :type :constant) 1))
(swig-defconstant "RightTopOrientation" (+ #.(swig-insert-id "LeftTopOrientation" () :type :constant) 1))
(swig-defconstant "RightBottomOrientation" (+ #.(swig-insert-id "RightTopOrientation" () :type :constant) 1))
(swig-defconstant "LeftBottomOrientation" (+ #.(swig-insert-id "RightBottomOrientation" () :type :constant) 1))

(swig-def-foreign-type "OrientationType"
  :int)
(swig-def-foreign-type "anontype39" :int)
(swig-defconstant "UndefinedResolution" 0)
(swig-defconstant "PixelsPerInchResolution" (+ #.(swig-insert-id "UndefinedResolution" () :type :constant) 1))
(swig-defconstant "PixelsPerCentimeterResolution" (+ #.(swig-insert-id "PixelsPerInchResolution" () :type :constant) 1))

(swig-def-foreign-type "ResolutionType"
  :int)
(swig-def-foreign-class "PrimaryInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "x" () :type :slot :class "PrimaryInfo") :double)
   (#.(swig-insert-id "y" () :type :slot :class "PrimaryInfo") :double)
   (#.(swig-insert-id "z" () :type :slot :class "PrimaryInfo") :double)
   ))

(swig-def-foreign-class "SegmentInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "x1" () :type :slot :class "SegmentInfo") :double)
   (#.(swig-insert-id "y1" () :type :slot :class "SegmentInfo") :double)
   (#.(swig-insert-id "x2" () :type :slot :class "SegmentInfo") :double)
   (#.(swig-insert-id "y2" () :type :slot :class "SegmentInfo") :double)
   ))

(swig-def-foreign-type "anontype40" :int)
(swig-defconstant "UndefinedTransmitType" 0)
(swig-defconstant "FileTransmitType" (+ #.(swig-insert-id "UndefinedTransmitType" () :type :constant) 1))
(swig-defconstant "BlobTransmitType" (+ #.(swig-insert-id "FileTransmitType" () :type :constant) 1))
(swig-defconstant "StreamTransmitType" (+ #.(swig-insert-id "BlobTransmitType" () :type :constant) 1))
(swig-defconstant "ImageTransmitType" (+ #.(swig-insert-id "StreamTransmitType" () :type :constant) 1))

(swig-def-foreign-type "TransmitType"
  :int)
(swig-def-foreign-class "ChromaticityInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "red_primary" () :type :slot :class "ChromaticityInfo") #.(swig-insert-id "PrimaryInfo" () :type :type))
   (#.(swig-insert-id "green_primary" () :type :slot :class "ChromaticityInfo") #.(swig-insert-id "PrimaryInfo" () :type :type))
   (#.(swig-insert-id "blue_primary" () :type :slot :class "ChromaticityInfo") #.(swig-insert-id "PrimaryInfo" () :type :type))
   (#.(swig-insert-id "white_point" () :type :slot :class "ChromaticityInfo") #.(swig-insert-id "PrimaryInfo" () :type :type))
   ))

(swig-def-foreign-class "Image"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "storage_class" () :type :slot :class "Image") #.(swig-insert-id "ClassType" () :type :type))
   (#.(swig-insert-id "colorspace" () :type :slot :class "Image") #.(swig-insert-id "ColorspaceType" () :type :type))
   (#.(swig-insert-id "compression" () :type :slot :class "Image") #.(swig-insert-id "CompressionType" () :type :type))
   (#.(swig-insert-id "quality" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "orientation" () :type :slot :class "Image") #.(swig-insert-id "OrientationType" () :type :type))
   (#.(swig-insert-id "taint" () :type :slot :class "Image") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "matte" () :type :slot :class "Image") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "columns" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "rows" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "depth" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "colors" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "colormap" () :type :slot :class "Image") (* #.(swig-insert-id "PixelPacket" () :type :type)))
   (#.(swig-insert-id "background_color" () :type :slot :class "Image") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "border_color" () :type :slot :class "Image") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "matte_color" () :type :slot :class "Image") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "gamma" () :type :slot :class "Image") :double)
   (#.(swig-insert-id "chromaticity" () :type :slot :class "Image") #.(swig-insert-id "ChromaticityInfo" () :type :type))
   (#.(swig-insert-id "rendering_intent" () :type :slot :class "Image") #.(swig-insert-id "RenderingIntent" () :type :type))
   (#.(swig-insert-id "profiles" () :type :slot :class "Image") (* :void))
   (#.(swig-insert-id "units" () :type :slot :class "Image") #.(swig-insert-id "ResolutionType" () :type :type))
   (#.(swig-insert-id "montage" () :type :slot :class "Image") (* :char))
   (#.(swig-insert-id "directory" () :type :slot :class "Image") (* :char))
   (#.(swig-insert-id "geometry" () :type :slot :class "Image") (* :char))
   (#.(swig-insert-id "offset" () :type :slot :class "Image") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "x_resolution" () :type :slot :class "Image") :double)
   (#.(swig-insert-id "y_resolution" () :type :slot :class "Image") :double)
   (#.(swig-insert-id "page" () :type :slot :class "Image") #.(swig-insert-id "RectangleInfo" () :type :type))
   (#.(swig-insert-id "extract_info" () :type :slot :class "Image") #.(swig-insert-id "RectangleInfo" () :type :type))
   (#.(swig-insert-id "tile_info" () :type :slot :class "Image") #.(swig-insert-id "RectangleInfo" () :type :type))
   (#.(swig-insert-id "bias" () :type :slot :class "Image") :double)
   (#.(swig-insert-id "blur" () :type :slot :class "Image") :double)
   (#.(swig-insert-id "fuzz" () :type :slot :class "Image") :double)
   (#.(swig-insert-id "filter" () :type :slot :class "Image") #.(swig-insert-id "FilterTypes" () :type :type))
   (#.(swig-insert-id "interlace" () :type :slot :class "Image") #.(swig-insert-id "InterlaceType" () :type :type))
   (#.(swig-insert-id "endian" () :type :slot :class "Image") #.(swig-insert-id "EndianType" () :type :type))
   (#.(swig-insert-id "gravity" () :type :slot :class "Image") #.(swig-insert-id "GravityType" () :type :type))
   (#.(swig-insert-id "compose" () :type :slot :class "Image") #.(swig-insert-id "CompositeOperator" () :type :type))
   (#.(swig-insert-id "dispose" () :type :slot :class "Image") #.(swig-insert-id "DisposeType" () :type :type))
   (#.(swig-insert-id "clip_mask" () :type :slot :class "Image") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "scene" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "delay" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "ticks_per_second" () :type :slot :class "Image") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "iterations" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "total_colors" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "start_loop" () :type :slot :class "Image") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "error" () :type :slot :class "Image") #.(swig-insert-id "ErrorInfo" () :type :type))
   (#.(swig-insert-id "timer" () :type :slot :class "Image") #.(swig-insert-id "TimerInfo" () :type :type))
   (#.(swig-insert-id "progress_monitor" () :type :slot :class "Image") #.(swig-insert-id "MagickProgressMonitor" () :type :type))
   (#.(swig-insert-id "client_data" () :type :slot :class "Image") (* :void))
   (#.(swig-insert-id "cache" () :type :slot :class "Image") (* :void))
   (#.(swig-insert-id "attributes" () :type :slot :class "Image") (* :void))
   (#.(swig-insert-id "ascii85" () :type :slot :class "Image") (* #.(swig-insert-id "Ascii85Info" () :type :type)))
   (#.(swig-insert-id "blob" () :type :slot :class "Image") (* #.(swig-insert-id "BlobInfo" () :type :type)))
   (#.(swig-insert-id "filename" () :type :slot :class "Image") (:array :char 4096))
   (#.(swig-insert-id "magick_filename" () :type :slot :class "Image") (:array :char 4096))
   (#.(swig-insert-id "magick" () :type :slot :class "Image") (:array :char 4096))
   (#.(swig-insert-id "magick_columns" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "magick_rows" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "exception" () :type :slot :class "Image") #.(swig-insert-id "ExceptionInfo" () :type :type))
   (#.(swig-insert-id "debug" () :type :slot :class "Image") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "reference_count" () :type :slot :class "Image") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "semaphore" () :type :slot :class "Image") (* #.(swig-insert-id "SemaphoreInfo" () :type :type)))
   (#.(swig-insert-id "color_profile" () :type :slot :class "Image") #.(swig-insert-id "ProfileInfo" () :type :type))
   (#.(swig-insert-id "iptc_profile" () :type :slot :class "Image") #.(swig-insert-id "ProfileInfo" () :type :type))
   (#.(swig-insert-id "generic_profile" () :type :slot :class "Image") (* #.(swig-insert-id "ProfileInfo" () :type :type)))
   (#.(swig-insert-id "generic_profiles" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "Image") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "Image") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "list" () :type :slot :class "Image") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "Image") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "interpolate" () :type :slot :class "Image") #.(swig-insert-id "InterpolatePixelMethod" () :type :type))
   (#.(swig-insert-id "black_point_compensation" () :type :slot :class "Image") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "transparent_color" () :type :slot :class "Image") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "mask" () :type :slot :class "Image") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "tile_offset" () :type :slot :class "Image") #.(swig-insert-id "RectangleInfo" () :type :type))
   (#.(swig-insert-id "properties" () :type :slot :class "Image") (* :void))
   (#.(swig-insert-id "artifacts" () :type :slot :class "Image") (* :void))
   (#.(swig-insert-id "type" () :type :slot :class "Image") #.(swig-insert-id "ImageType" () :type :type))
   (#.(swig-insert-id "dither" () :type :slot :class "Image") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "extent" () :type :slot :class "Image") #.(swig-insert-id "MagickSizeType" () :type :type))
   (#.(swig-insert-id "ping" () :type :slot :class "Image") #.(swig-insert-id "MagickBooleanType" () :type :type))
   ))

(swig-def-foreign-class "ImageInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "compression" () :type :slot :class "ImageInfo") #.(swig-insert-id "CompressionType" () :type :type))
   (#.(swig-insert-id "orientation" () :type :slot :class "ImageInfo") #.(swig-insert-id "OrientationType" () :type :type))
   (#.(swig-insert-id "temporary" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "adjoin" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "affirm" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "antialias" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "size" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "extract" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "page" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "scenes" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "scene" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "number_scenes" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "depth" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "interlace" () :type :slot :class "ImageInfo") #.(swig-insert-id "InterlaceType" () :type :type))
   (#.(swig-insert-id "endian" () :type :slot :class "ImageInfo") #.(swig-insert-id "EndianType" () :type :type))
   (#.(swig-insert-id "units" () :type :slot :class "ImageInfo") #.(swig-insert-id "ResolutionType" () :type :type))
   (#.(swig-insert-id "quality" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "sampling_factor" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "server_name" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "font" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "texture" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "density" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "pointsize" () :type :slot :class "ImageInfo") :double)
   (#.(swig-insert-id "fuzz" () :type :slot :class "ImageInfo") :double)
   (#.(swig-insert-id "background_color" () :type :slot :class "ImageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "border_color" () :type :slot :class "ImageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "matte_color" () :type :slot :class "ImageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "dither" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "monochrome" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "colors" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "colorspace" () :type :slot :class "ImageInfo") #.(swig-insert-id "ColorspaceType" () :type :type))
   (#.(swig-insert-id "type" () :type :slot :class "ImageInfo") #.(swig-insert-id "ImageType" () :type :type))
   (#.(swig-insert-id "preview_type" () :type :slot :class "ImageInfo") #.(swig-insert-id "PreviewType" () :type :type))
   (#.(swig-insert-id "group" () :type :slot :class "ImageInfo") #.(swig-insert-id "ssize_t" () :type :type))
   (#.(swig-insert-id "ping" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "verbose" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "view" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "authenticate" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "channel" () :type :slot :class "ImageInfo") #.(swig-insert-id "ChannelType" () :type :type))
   (#.(swig-insert-id "attributes" () :type :slot :class "ImageInfo") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "options" () :type :slot :class "ImageInfo") (* :void))
   (#.(swig-insert-id "progress_monitor" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickProgressMonitor" () :type :type))
   (#.(swig-insert-id "client_data" () :type :slot :class "ImageInfo") (* :void))
   (#.(swig-insert-id "cache" () :type :slot :class "ImageInfo") (* :void))
   (#.(swig-insert-id "stream" () :type :slot :class "ImageInfo") #.(swig-insert-id "StreamHandler" () :type :type))
   (#.(swig-insert-id "file" () :type :slot :class "ImageInfo") (* #.(swig-insert-id "FILE" () :type :type)))
   (#.(swig-insert-id "blob" () :type :slot :class "ImageInfo") (* :void))
   (#.(swig-insert-id "length" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "magick" () :type :slot :class "ImageInfo") (:array :char 4096))
   (#.(swig-insert-id "unique" () :type :slot :class "ImageInfo") (:array :char 4096))
   (#.(swig-insert-id "zero" () :type :slot :class "ImageInfo") (:array :char 4096))
   (#.(swig-insert-id "filename" () :type :slot :class "ImageInfo") (:array :char 4096))
   (#.(swig-insert-id "debug" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "tile" () :type :slot :class "ImageInfo") (* :char))
   (#.(swig-insert-id "subimage" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "subrange" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "pen" () :type :slot :class "ImageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "ImageInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "virtual_pixel_method" () :type :slot :class "ImageInfo") #.(swig-insert-id "VirtualPixelMethod" () :type :type))
   (#.(swig-insert-id "transparent_color" () :type :slot :class "ImageInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "profile" () :type :slot :class "ImageInfo") (* :void))
   (#.(swig-insert-id "synchronize" () :type :slot :class "ImageInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   ))

;; forward referenced stub.
(swig-def-foreign-class "_ImageView" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "ImageView"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "DuplexTransferImageViewMethod"
  (* (:function ((* #.(swig-insert-id "ImageView" () :type :type)) (* #.(swig-insert-id "ImageView" () :type :type)) (* #.(swig-insert-id "ImageView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "GetImageViewMethod"
  (* (:function ((* #.(swig-insert-id "ImageView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "SetImageViewMethod"
  (* (:function ((* #.(swig-insert-id "ImageView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "TransferImageViewMethod"
  (* (:function ((* #.(swig-insert-id "ImageView" () :type :type)) (* #.(swig-insert-id "ImageView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "UpdateImageViewMethod"
  (* (:function ((* #.(swig-insert-id "ImageView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "anontype41" :int)
(swig-defconstant "UndefinedStretch" 0)
(swig-defconstant "NormalStretch" (+ #.(swig-insert-id "UndefinedStretch" () :type :constant) 1))
(swig-defconstant "UltraCondensedStretch" (+ #.(swig-insert-id "NormalStretch" () :type :constant) 1))
(swig-defconstant "ExtraCondensedStretch" (+ #.(swig-insert-id "UltraCondensedStretch" () :type :constant) 1))
(swig-defconstant "CondensedStretch" (+ #.(swig-insert-id "ExtraCondensedStretch" () :type :constant) 1))
(swig-defconstant "SemiCondensedStretch" (+ #.(swig-insert-id "CondensedStretch" () :type :constant) 1))
(swig-defconstant "SemiExpandedStretch" (+ #.(swig-insert-id "SemiCondensedStretch" () :type :constant) 1))
(swig-defconstant "ExpandedStretch" (+ #.(swig-insert-id "SemiExpandedStretch" () :type :constant) 1))
(swig-defconstant "ExtraExpandedStretch" (+ #.(swig-insert-id "ExpandedStretch" () :type :constant) 1))
(swig-defconstant "UltraExpandedStretch" (+ #.(swig-insert-id "ExtraExpandedStretch" () :type :constant) 1))
(swig-defconstant "AnyStretch" (+ #.(swig-insert-id "UltraExpandedStretch" () :type :constant) 1))

(swig-def-foreign-type "StretchType"
  :int)
(swig-def-foreign-type "anontype42" :int)
(swig-defconstant "UndefinedStyle" 0)
(swig-defconstant "NormalStyle" (+ #.(swig-insert-id "UndefinedStyle" () :type :constant) 1))
(swig-defconstant "ItalicStyle" (+ #.(swig-insert-id "NormalStyle" () :type :constant) 1))
(swig-defconstant "ObliqueStyle" (+ #.(swig-insert-id "ItalicStyle" () :type :constant) 1))
(swig-defconstant "AnyStyle" (+ #.(swig-insert-id "ObliqueStyle" () :type :constant) 1))

(swig-def-foreign-type "StyleType"
  :int)
(swig-def-foreign-class "TypeInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "face" () :type :slot :class "TypeInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "path" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "name" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "description" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "family" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "style" () :type :slot :class "TypeInfo") #.(swig-insert-id "StyleType" () :type :type))
   (#.(swig-insert-id "stretch" () :type :slot :class "TypeInfo") #.(swig-insert-id "StretchType" () :type :type))
   (#.(swig-insert-id "weight" () :type :slot :class "TypeInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "encoding" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "foundry" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "format" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "metrics" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "glyphs" () :type :slot :class "TypeInfo") (* :char))
   (#.(swig-insert-id "stealth" () :type :slot :class "TypeInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "TypeInfo") (* #.(swig-insert-id "TypeInfo" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "TypeInfo") (* #.(swig-insert-id "TypeInfo" () :type :type)))
   (#.(swig-insert-id "signature" () :type :slot :class "TypeInfo") #.(swig-insert-id "size_t" () :type :type))
   ))

(swig-def-foreign-type "anontype43" :int)
(swig-defconstant "UndefinedAlign" 0)
(swig-defconstant "LeftAlign" (+ #.(swig-insert-id "UndefinedAlign" () :type :constant) 1))
(swig-defconstant "CenterAlign" (+ #.(swig-insert-id "LeftAlign" () :type :constant) 1))
(swig-defconstant "RightAlign" (+ #.(swig-insert-id "CenterAlign" () :type :constant) 1))

(swig-def-foreign-type "AlignType"
  :int)
(swig-def-foreign-type "anontype44" :int)
(swig-defconstant "UndefinedPathUnits" 0)
(swig-defconstant "UserSpace" (+ #.(swig-insert-id "UndefinedPathUnits" () :type :constant) 1))
(swig-defconstant "UserSpaceOnUse" (+ #.(swig-insert-id "UserSpace" () :type :constant) 1))
(swig-defconstant "ObjectBoundingBox" (+ #.(swig-insert-id "UserSpaceOnUse" () :type :constant) 1))

(swig-def-foreign-type "ClipPathUnits"
  :int)
(swig-def-foreign-type "anontype45" :int)
(swig-defconstant "UndefinedDecoration" 0)
(swig-defconstant "NoDecoration" (+ #.(swig-insert-id "UndefinedDecoration" () :type :constant) 1))
(swig-defconstant "UnderlineDecoration" (+ #.(swig-insert-id "NoDecoration" () :type :constant) 1))
(swig-defconstant "OverlineDecoration" (+ #.(swig-insert-id "UnderlineDecoration" () :type :constant) 1))
(swig-defconstant "LineThroughDecoration" (+ #.(swig-insert-id "OverlineDecoration" () :type :constant) 1))

(swig-def-foreign-type "DecorationType"
  :int)
(swig-def-foreign-type "anontype46" :int)
(swig-defconstant "UndefinedDirection" 0)
(swig-defconstant "RightToLeftDirection" (+ #.(swig-insert-id "UndefinedDirection" () :type :constant) 1))
(swig-defconstant "LeftToRightDirection" (+ #.(swig-insert-id "RightToLeftDirection" () :type :constant) 1))

(swig-def-foreign-type "DirectionType"
  :int)
(swig-def-foreign-type "anontype47" :int)
(swig-defconstant "UndefinedRule" 0)
(swig-defconstant "EvenOddRule" (+ #.(swig-insert-id "UndefinedRule" () :type :constant) 1))
(swig-defconstant "NonZeroRule" (+ #.(swig-insert-id "EvenOddRule" () :type :constant) 1))

(swig-def-foreign-type "FillRule"
  :int)
(swig-def-foreign-type "anontype48" :int)
(swig-defconstant "UndefinedGradient" 0)
(swig-defconstant "LinearGradient" (+ #.(swig-insert-id "UndefinedGradient" () :type :constant) 1))
(swig-defconstant "RadialGradient" (+ #.(swig-insert-id "LinearGradient" () :type :constant) 1))

(swig-def-foreign-type "GradientType"
  :int)
(swig-def-foreign-type "anontype49" :int)
(swig-defconstant "UndefinedCap" 0)
(swig-defconstant "ButtCap" (+ #.(swig-insert-id "UndefinedCap" () :type :constant) 1))
(swig-defconstant "RoundCap" (+ #.(swig-insert-id "ButtCap" () :type :constant) 1))
(swig-defconstant "SquareCap" (+ #.(swig-insert-id "RoundCap" () :type :constant) 1))

(swig-def-foreign-type "LineCap"
  :int)
(swig-def-foreign-type "anontype50" :int)
(swig-defconstant "UndefinedJoin" 0)
(swig-defconstant "MiterJoin" (+ #.(swig-insert-id "UndefinedJoin" () :type :constant) 1))
(swig-defconstant "RoundJoin" (+ #.(swig-insert-id "MiterJoin" () :type :constant) 1))
(swig-defconstant "BevelJoin" (+ #.(swig-insert-id "RoundJoin" () :type :constant) 1))

(swig-def-foreign-type "LineJoin"
  :int)
(swig-def-foreign-type "anontype51" :int)
(swig-defconstant "UndefinedMethod" 0)
(swig-defconstant "PointMethod" (+ #.(swig-insert-id "UndefinedMethod" () :type :constant) 1))
(swig-defconstant "ReplaceMethod" (+ #.(swig-insert-id "PointMethod" () :type :constant) 1))
(swig-defconstant "FloodfillMethod" (+ #.(swig-insert-id "ReplaceMethod" () :type :constant) 1))
(swig-defconstant "FillToBorderMethod" (+ #.(swig-insert-id "FloodfillMethod" () :type :constant) 1))
(swig-defconstant "ResetMethod" (+ #.(swig-insert-id "FillToBorderMethod" () :type :constant) 1))

(swig-def-foreign-type "PaintMethod"
  :int)
(swig-def-foreign-type "anontype52" :int)
(swig-defconstant "UndefinedPrimitive" 0)
(swig-defconstant "PointPrimitive" (+ #.(swig-insert-id "UndefinedPrimitive" () :type :constant) 1))
(swig-defconstant "LinePrimitive" (+ #.(swig-insert-id "PointPrimitive" () :type :constant) 1))
(swig-defconstant "RectanglePrimitive" (+ #.(swig-insert-id "LinePrimitive" () :type :constant) 1))
(swig-defconstant "RoundRectanglePrimitive" (+ #.(swig-insert-id "RectanglePrimitive" () :type :constant) 1))
(swig-defconstant "ArcPrimitive" (+ #.(swig-insert-id "RoundRectanglePrimitive" () :type :constant) 1))
(swig-defconstant "EllipsePrimitive" (+ #.(swig-insert-id "ArcPrimitive" () :type :constant) 1))
(swig-defconstant "CirclePrimitive" (+ #.(swig-insert-id "EllipsePrimitive" () :type :constant) 1))
(swig-defconstant "PolylinePrimitive" (+ #.(swig-insert-id "CirclePrimitive" () :type :constant) 1))
(swig-defconstant "PolygonPrimitive" (+ #.(swig-insert-id "PolylinePrimitive" () :type :constant) 1))
(swig-defconstant "BezierPrimitive" (+ #.(swig-insert-id "PolygonPrimitive" () :type :constant) 1))
(swig-defconstant "ColorPrimitive" (+ #.(swig-insert-id "BezierPrimitive" () :type :constant) 1))
(swig-defconstant "MattePrimitive" (+ #.(swig-insert-id "ColorPrimitive" () :type :constant) 1))
(swig-defconstant "TextPrimitive" (+ #.(swig-insert-id "MattePrimitive" () :type :constant) 1))
(swig-defconstant "ImagePrimitive" (+ #.(swig-insert-id "TextPrimitive" () :type :constant) 1))
(swig-defconstant "PathPrimitive" (+ #.(swig-insert-id "ImagePrimitive" () :type :constant) 1))

(swig-def-foreign-type "PrimitiveType"
  :int)
(swig-def-foreign-type "anontype53" :int)
(swig-defconstant "UndefinedReference" 0)
(swig-defconstant "GradientReference" (+ #.(swig-insert-id "UndefinedReference" () :type :constant) 1))

(swig-def-foreign-type "ReferenceType"
  :int)
(swig-def-foreign-type "anontype54" :int)
(swig-defconstant "UndefinedSpread" 0)
(swig-defconstant "PadSpread" (+ #.(swig-insert-id "UndefinedSpread" () :type :constant) 1))
(swig-defconstant "ReflectSpread" (+ #.(swig-insert-id "PadSpread" () :type :constant) 1))
(swig-defconstant "RepeatSpread" (+ #.(swig-insert-id "ReflectSpread" () :type :constant) 1))

(swig-def-foreign-type "SpreadMethod"
  :int)
(swig-def-foreign-class "PointInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "x" () :type :slot :class "PointInfo") :double)
   (#.(swig-insert-id "y" () :type :slot :class "PointInfo") :double)
   ))

(swig-def-foreign-class "StopInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "color" () :type :slot :class "StopInfo") #.(swig-insert-id "MagickPixelPacket" () :type :type))
   (#.(swig-insert-id "offset" () :type :slot :class "StopInfo") #.(swig-insert-id "MagickRealType" () :type :type))
   ))

(swig-def-foreign-class "GradientInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "type" () :type :slot :class "GradientInfo") #.(swig-insert-id "GradientType" () :type :type))
   (#.(swig-insert-id "bounding_box" () :type :slot :class "GradientInfo") #.(swig-insert-id "RectangleInfo" () :type :type))
   (#.(swig-insert-id "gradient_vector" () :type :slot :class "GradientInfo") #.(swig-insert-id "SegmentInfo" () :type :type))
   (#.(swig-insert-id "stops" () :type :slot :class "GradientInfo") (* #.(swig-insert-id "StopInfo" () :type :type)))
   (#.(swig-insert-id "number_stops" () :type :slot :class "GradientInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "spread" () :type :slot :class "GradientInfo") #.(swig-insert-id "SpreadMethod" () :type :type))
   (#.(swig-insert-id "debug" () :type :slot :class "GradientInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "GradientInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "center" () :type :slot :class "GradientInfo") #.(swig-insert-id "PointInfo" () :type :type))
   (#.(swig-insert-id "radius" () :type :slot :class "GradientInfo") #.(swig-insert-id "MagickRealType" () :type :type))
   ))

(swig-def-foreign-class "ElementReference"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "id" () :type :slot :class "ElementReference") (* :char))
   (#.(swig-insert-id "type" () :type :slot :class "ElementReference") #.(swig-insert-id "ReferenceType" () :type :type))
   (#.(swig-insert-id "gradient" () :type :slot :class "ElementReference") #.(swig-insert-id "GradientInfo" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "ElementReference") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "previous" () :type :slot :class "ElementReference") (* #.(swig-insert-id "ElementReference" () :type :type)))
   (#.(swig-insert-id "next" () :type :slot :class "ElementReference") (* #.(swig-insert-id "ElementReference" () :type :type)))
   ))

(swig-def-foreign-class "DrawInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "primitive" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "geometry" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "viewbox" () :type :slot :class "DrawInfo") #.(swig-insert-id "RectangleInfo" () :type :type))
   (#.(swig-insert-id "affine" () :type :slot :class "DrawInfo") #.(swig-insert-id "AffineMatrix" () :type :type))
   (#.(swig-insert-id "gravity" () :type :slot :class "DrawInfo") #.(swig-insert-id "GravityType" () :type :type))
   (#.(swig-insert-id "fill" () :type :slot :class "DrawInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "stroke" () :type :slot :class "DrawInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "stroke_width" () :type :slot :class "DrawInfo") :double)
   (#.(swig-insert-id "gradient" () :type :slot :class "DrawInfo") #.(swig-insert-id "GradientInfo" () :type :type))
   (#.(swig-insert-id "fill_pattern" () :type :slot :class "DrawInfo") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "tile" () :type :slot :class "DrawInfo") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "stroke_pattern" () :type :slot :class "DrawInfo") (* #.(swig-insert-id "Image" () :type :type)))
   (#.(swig-insert-id "stroke_antialias" () :type :slot :class "DrawInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "text_antialias" () :type :slot :class "DrawInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "fill_rule" () :type :slot :class "DrawInfo") #.(swig-insert-id "FillRule" () :type :type))
   (#.(swig-insert-id "linecap" () :type :slot :class "DrawInfo") #.(swig-insert-id "LineCap" () :type :type))
   (#.(swig-insert-id "linejoin" () :type :slot :class "DrawInfo") #.(swig-insert-id "LineJoin" () :type :type))
   (#.(swig-insert-id "miterlimit" () :type :slot :class "DrawInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "dash_offset" () :type :slot :class "DrawInfo") :double)
   (#.(swig-insert-id "decorate" () :type :slot :class "DrawInfo") #.(swig-insert-id "DecorationType" () :type :type))
   (#.(swig-insert-id "compose" () :type :slot :class "DrawInfo") #.(swig-insert-id "CompositeOperator" () :type :type))
   (#.(swig-insert-id "text" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "face" () :type :slot :class "DrawInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "font" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "metrics" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "family" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "style" () :type :slot :class "DrawInfo") #.(swig-insert-id "StyleType" () :type :type))
   (#.(swig-insert-id "stretch" () :type :slot :class "DrawInfo") #.(swig-insert-id "StretchType" () :type :type))
   (#.(swig-insert-id "weight" () :type :slot :class "DrawInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "encoding" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "pointsize" () :type :slot :class "DrawInfo") :double)
   (#.(swig-insert-id "density" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "align" () :type :slot :class "DrawInfo") #.(swig-insert-id "AlignType" () :type :type))
   (#.(swig-insert-id "undercolor" () :type :slot :class "DrawInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "border_color" () :type :slot :class "DrawInfo") #.(swig-insert-id "PixelPacket" () :type :type))
   (#.(swig-insert-id "server_name" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "dash_pattern" () :type :slot :class "DrawInfo") (* :double))
   (#.(swig-insert-id "clip_mask" () :type :slot :class "DrawInfo") (* :char))
   (#.(swig-insert-id "bounds" () :type :slot :class "DrawInfo") #.(swig-insert-id "SegmentInfo" () :type :type))
   (#.(swig-insert-id "clip_units" () :type :slot :class "DrawInfo") #.(swig-insert-id "ClipPathUnits" () :type :type))
   (#.(swig-insert-id "opacity" () :type :slot :class "DrawInfo") #.(swig-insert-id "Quantum" () :type :type))
   (#.(swig-insert-id "render" () :type :slot :class "DrawInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "element_reference" () :type :slot :class "DrawInfo") #.(swig-insert-id "ElementReference" () :type :type))
   (#.(swig-insert-id "debug" () :type :slot :class "DrawInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "DrawInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "kerning" () :type :slot :class "DrawInfo") :double)
   (#.(swig-insert-id "interword_spacing" () :type :slot :class "DrawInfo") :double)
   (#.(swig-insert-id "interline_spacing" () :type :slot :class "DrawInfo") :double)
   (#.(swig-insert-id "direction" () :type :slot :class "DrawInfo") #.(swig-insert-id "DirectionType" () :type :type))
   ))

(swig-def-foreign-class "PrimitiveInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "point" () :type :slot :class "PrimitiveInfo") #.(swig-insert-id "PointInfo" () :type :type))
   (#.(swig-insert-id "coordinates" () :type :slot :class "PrimitiveInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "primitive" () :type :slot :class "PrimitiveInfo") #.(swig-insert-id "PrimitiveType" () :type :type))
   (#.(swig-insert-id "method" () :type :slot :class "PrimitiveInfo") #.(swig-insert-id "PaintMethod" () :type :type))
   (#.(swig-insert-id "text" () :type :slot :class "PrimitiveInfo") (* :char))
   ))

(swig-def-foreign-class "TypeMetric"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "pixels_per_em" () :type :slot :class "TypeMetric") #.(swig-insert-id "PointInfo" () :type :type))
   (#.(swig-insert-id "ascent" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "descent" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "width" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "height" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "max_advance" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "underline_position" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "underline_thickness" () :type :slot :class "TypeMetric") :double)
   (#.(swig-insert-id "bounds" () :type :slot :class "TypeMetric") #.(swig-insert-id "SegmentInfo" () :type :type))
   (#.(swig-insert-id "origin" () :type :slot :class "TypeMetric") #.(swig-insert-id "PointInfo" () :type :type))
   ))

(swig-def-foreign-type "anontype55" :int)
(swig-defconstant "UndefinedNoise" 0)
(swig-defconstant "UniformNoise" (+ #.(swig-insert-id "UndefinedNoise" () :type :constant) 1))
(swig-defconstant "GaussianNoise" (+ #.(swig-insert-id "UniformNoise" () :type :constant) 1))
(swig-defconstant "MultiplicativeGaussianNoise" (+ #.(swig-insert-id "GaussianNoise" () :type :constant) 1))
(swig-defconstant "ImpulseNoise" (+ #.(swig-insert-id "MultiplicativeGaussianNoise" () :type :constant) 1))
(swig-defconstant "LaplacianNoise" (+ #.(swig-insert-id "ImpulseNoise" () :type :constant) 1))
(swig-defconstant "PoissonNoise" (+ #.(swig-insert-id "LaplacianNoise" () :type :constant) 1))
(swig-defconstant "RandomNoise" (+ #.(swig-insert-id "PoissonNoise" () :type :constant) 1))

(swig-def-foreign-type "NoiseType"
  :int)
(swig-def-foreign-type "anontype56" :int)
(swig-defconstant "UndefinedPolicyDomain" 0)
(swig-defconstant "CoderPolicyDomain" (+ #.(swig-insert-id "UndefinedPolicyDomain" () :type :constant) 1))
(swig-defconstant "DelegatePolicyDomain" (+ #.(swig-insert-id "CoderPolicyDomain" () :type :constant) 1))
(swig-defconstant "FilterPolicyDomain" (+ #.(swig-insert-id "DelegatePolicyDomain" () :type :constant) 1))
(swig-defconstant "PathPolicyDomain" (+ #.(swig-insert-id "FilterPolicyDomain" () :type :constant) 1))
(swig-defconstant "ResourcePolicyDomain" (+ #.(swig-insert-id "PathPolicyDomain" () :type :constant) 1))
(swig-defconstant "SystemPolicyDomain" (+ #.(swig-insert-id "ResourcePolicyDomain" () :type :constant) 1))

(swig-def-foreign-type "PolicyDomain"
  :int)
(swig-def-foreign-type "anontype57" :int)
(swig-defconstant "UndefinedPolicyRights" #x00)
(swig-defconstant "NoPolicyRights" #x00)
(swig-defconstant "ReadPolicyRights" #x01)
(swig-defconstant "WritePolicyRights" #x02)
(swig-defconstant "ExecutePolicyRights" #x04)

(swig-def-foreign-type "PolicyRights"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_PolicyInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "PolicyInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype58" :int)
(swig-defconstant "UndefinedDitherMethod" 0)
(swig-defconstant "NoDitherMethod" (+ #.(swig-insert-id "UndefinedDitherMethod" () :type :constant) 1))
(swig-defconstant "RiemersmaDitherMethod" (+ #.(swig-insert-id "NoDitherMethod" () :type :constant) 1))
(swig-defconstant "FloydSteinbergDitherMethod" (+ #.(swig-insert-id "RiemersmaDitherMethod" () :type :constant) 1))

(swig-def-foreign-type "DitherMethod"
  :int)
(swig-def-foreign-class "QuantizeInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "number_colors" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "tree_depth" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "dither" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "colorspace" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "ColorspaceType" () :type :type))
   (#.(swig-insert-id "measure_error" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "signature" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "dither_method" () :type :slot :class "QuantizeInfo") #.(swig-insert-id "DitherMethod" () :type :type))
   ))

(swig-def-foreign-type "anontype59" :int)
(swig-defconstant "UndefinedRegistryType" 0)
(swig-defconstant "ImageRegistryType" (+ #.(swig-insert-id "UndefinedRegistryType" () :type :constant) 1))
(swig-defconstant "ImageInfoRegistryType" (+ #.(swig-insert-id "ImageRegistryType" () :type :constant) 1))
(swig-defconstant "StringRegistryType" (+ #.(swig-insert-id "ImageInfoRegistryType" () :type :constant) 1))

(swig-def-foreign-type "RegistryType"
  :int)
(swig-def-foreign-type "anontype60" :int)
(swig-defconstant "UndefinedResource" 0)
(swig-defconstant "AreaResource" (+ #.(swig-insert-id "UndefinedResource" () :type :constant) 1))
(swig-defconstant "DiskResource" (+ #.(swig-insert-id "AreaResource" () :type :constant) 1))
(swig-defconstant "FileResource" (+ #.(swig-insert-id "DiskResource" () :type :constant) 1))
(swig-defconstant "MapResource" (+ #.(swig-insert-id "FileResource" () :type :constant) 1))
(swig-defconstant "MemoryResource" (+ #.(swig-insert-id "MapResource" () :type :constant) 1))
(swig-defconstant "ThreadResource" (+ #.(swig-insert-id "MemoryResource" () :type :constant) 1))
(swig-defconstant "TimeResource" (+ #.(swig-insert-id "ThreadResource" () :type :constant) 1))
(swig-defconstant "ThrottleResource" (+ #.(swig-insert-id "TimeResource" () :type :constant) 1))

(swig-def-foreign-type "ResourceType"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_SplayTreeInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "SplayTreeInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype61" :int)
(swig-defconstant "ReadMode" 0)
(swig-defconstant "WriteMode" (+ #.(swig-insert-id "ReadMode" () :type :constant) 1))
(swig-defconstant "IOMode" (+ #.(swig-insert-id "WriteMode" () :type :constant) 1))

(swig-def-foreign-type "MapMode"
  :int)
(swig-def-foreign-class "ChannelStatistics"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "depth" () :type :slot :class "ChannelStatistics") #.(swig-insert-id "size_t" () :type :type))
   (#.(swig-insert-id "minima" () :type :slot :class "ChannelStatistics") :double)
   (#.(swig-insert-id "maxima" () :type :slot :class "ChannelStatistics") :double)
   (#.(swig-insert-id "mean" () :type :slot :class "ChannelStatistics") :double)
   (#.(swig-insert-id "standard_deviation" () :type :slot :class "ChannelStatistics") :double)
   (#.(swig-insert-id "kurtosis" () :type :slot :class "ChannelStatistics") :double)
   (#.(swig-insert-id "skewness" () :type :slot :class "ChannelStatistics") :double)
   ))

(swig-def-foreign-type "anontype62" :int)
(swig-defconstant "UndefinedEvaluateOperator" 0)
(swig-defconstant "AddEvaluateOperator" (+ #.(swig-insert-id "UndefinedEvaluateOperator" () :type :constant) 1))
(swig-defconstant "AndEvaluateOperator" (+ #.(swig-insert-id "AddEvaluateOperator" () :type :constant) 1))
(swig-defconstant "DivideEvaluateOperator" (+ #.(swig-insert-id "AndEvaluateOperator" () :type :constant) 1))
(swig-defconstant "LeftShiftEvaluateOperator" (+ #.(swig-insert-id "DivideEvaluateOperator" () :type :constant) 1))
(swig-defconstant "MaxEvaluateOperator" (+ #.(swig-insert-id "LeftShiftEvaluateOperator" () :type :constant) 1))
(swig-defconstant "MinEvaluateOperator" (+ #.(swig-insert-id "MaxEvaluateOperator" () :type :constant) 1))
(swig-defconstant "MultiplyEvaluateOperator" (+ #.(swig-insert-id "MinEvaluateOperator" () :type :constant) 1))
(swig-defconstant "OrEvaluateOperator" (+ #.(swig-insert-id "MultiplyEvaluateOperator" () :type :constant) 1))
(swig-defconstant "RightShiftEvaluateOperator" (+ #.(swig-insert-id "OrEvaluateOperator" () :type :constant) 1))
(swig-defconstant "SetEvaluateOperator" (+ #.(swig-insert-id "RightShiftEvaluateOperator" () :type :constant) 1))
(swig-defconstant "SubtractEvaluateOperator" (+ #.(swig-insert-id "SetEvaluateOperator" () :type :constant) 1))
(swig-defconstant "XorEvaluateOperator" (+ #.(swig-insert-id "SubtractEvaluateOperator" () :type :constant) 1))
(swig-defconstant "PowEvaluateOperator" (+ #.(swig-insert-id "XorEvaluateOperator" () :type :constant) 1))
(swig-defconstant "LogEvaluateOperator" (+ #.(swig-insert-id "PowEvaluateOperator" () :type :constant) 1))
(swig-defconstant "ThresholdEvaluateOperator" (+ #.(swig-insert-id "LogEvaluateOperator" () :type :constant) 1))
(swig-defconstant "ThresholdBlackEvaluateOperator" (+ #.(swig-insert-id "ThresholdEvaluateOperator" () :type :constant) 1))
(swig-defconstant "ThresholdWhiteEvaluateOperator" (+ #.(swig-insert-id "ThresholdBlackEvaluateOperator" () :type :constant) 1))
(swig-defconstant "GaussianNoiseEvaluateOperator" (+ #.(swig-insert-id "ThresholdWhiteEvaluateOperator" () :type :constant) 1))
(swig-defconstant "ImpulseNoiseEvaluateOperator" (+ #.(swig-insert-id "GaussianNoiseEvaluateOperator" () :type :constant) 1))
(swig-defconstant "LaplacianNoiseEvaluateOperator" (+ #.(swig-insert-id "ImpulseNoiseEvaluateOperator" () :type :constant) 1))
(swig-defconstant "MultiplicativeNoiseEvaluateOperator" (+ #.(swig-insert-id "LaplacianNoiseEvaluateOperator" () :type :constant) 1))
(swig-defconstant "PoissonNoiseEvaluateOperator" (+ #.(swig-insert-id "MultiplicativeNoiseEvaluateOperator" () :type :constant) 1))
(swig-defconstant "UniformNoiseEvaluateOperator" (+ #.(swig-insert-id "PoissonNoiseEvaluateOperator" () :type :constant) 1))
(swig-defconstant "CosineEvaluateOperator" (+ #.(swig-insert-id "UniformNoiseEvaluateOperator" () :type :constant) 1))
(swig-defconstant "SineEvaluateOperator" (+ #.(swig-insert-id "CosineEvaluateOperator" () :type :constant) 1))
(swig-defconstant "AddModulusEvaluateOperator" (+ #.(swig-insert-id "SineEvaluateOperator" () :type :constant) 1))
(swig-defconstant "MeanEvaluateOperator" (+ #.(swig-insert-id "AddModulusEvaluateOperator" () :type :constant) 1))

(swig-def-foreign-type "MagickEvaluateOperator"
  :int)
(swig-def-foreign-type "anontype63" :int)
(swig-defconstant "UndefinedFunction" 0)
(swig-defconstant "PolynomialFunction" (+ #.(swig-insert-id "UndefinedFunction" () :type :constant) 1))
(swig-defconstant "SinusoidFunction" (+ #.(swig-insert-id "PolynomialFunction" () :type :constant) 1))
(swig-defconstant "ArcsinFunction" (+ #.(swig-insert-id "SinusoidFunction" () :type :constant) 1))
(swig-defconstant "ArctanFunction" (+ #.(swig-insert-id "ArcsinFunction" () :type :constant) 1))

(swig-def-foreign-type "MagickFunction"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_TokenInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "TokenInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "_ThresholdMap" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "ThresholdMap"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "anontype64" :int)
(swig-defconstant "UndefinedPath" 0)
(swig-defconstant "MagickPath" (+ #.(swig-insert-id "UndefinedPath" () :type :constant) 1))
(swig-defconstant "RootPath" (+ #.(swig-insert-id "MagickPath" () :type :constant) 1))
(swig-defconstant "HeadPath" (+ #.(swig-insert-id "RootPath" () :type :constant) 1))
(swig-defconstant "TailPath" (+ #.(swig-insert-id "HeadPath" () :type :constant) 1))
(swig-defconstant "BasePath" (+ #.(swig-insert-id "TailPath" () :type :constant) 1))
(swig-defconstant "ExtensionPath" (+ #.(swig-insert-id "BasePath" () :type :constant) 1))
(swig-defconstant "SubimagePath" (+ #.(swig-insert-id "ExtensionPath" () :type :constant) 1))
(swig-defconstant "CanonicalPath" (+ #.(swig-insert-id "SubimagePath" () :type :constant) 1))

(swig-def-foreign-type "PathType"
  :int)
;; forward referenced stub.
(swig-def-foreign-class "_XMLTreeInfo" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "XMLTreeInfo"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-class "XImportInfo"
 (ff:foreign-pointer )
  (:struct
   (#.(swig-insert-id "frame" () :type :slot :class "XImportInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "borders" () :type :slot :class "XImportInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "screen" () :type :slot :class "XImportInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "descend" () :type :slot :class "XImportInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   (#.(swig-insert-id "silent" () :type :slot :class "XImportInfo") #.(swig-insert-id "MagickBooleanType" () :type :type))
   ))

;; forward referenced stub.
(swig-def-foreign-class "_MagickWand" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "MagickWand"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "MagickCommand"
  (* (:function ((* #.(swig-insert-id "ImageInfo" () :type :type)) :int (* (* :char)) (* (* :char)) (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
;; forward referenced stub.
(swig-def-foreign-class "_PixelWand" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "PixelWand"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "_PixelIterator" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "PixelIterator"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "_DrawingWand" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "DrawingWand"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
;; forward referenced stub.
(swig-def-foreign-class "_WandView" (ff:foreign-pointer) (:class ))

(swig-def-foreign-type "WandView"
  #.(swig-insert-id "__SWIGACL_FwdReference" () :type :type))
(swig-def-foreign-type "DuplexTransferWandViewMethod"
  (* (:function ((* #.(swig-insert-id "WandView" () :type :type)) (* #.(swig-insert-id "WandView" () :type :type)) (* #.(swig-insert-id "WandView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "GetWandViewMethod"
  (* (:function ((* #.(swig-insert-id "WandView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "SetWandViewMethod"
  (* (:function ((* #.(swig-insert-id "WandView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "TransferWandViewMethod"
  (* (:function ((* #.(swig-insert-id "WandView" () :type :type)) (* #.(swig-insert-id "WandView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))
(swig-def-foreign-type "UpdateWandViewMethod"
  (* (:function ((* #.(swig-insert-id "WandView" () :type :type)) #.(swig-insert-id "ssize_t" () :type :type) :int (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))))

(swig-in-package ())

(swig-defconstant "MaxTextExtent" 4096)
(swig-defconstant "MagickSignature" #xabacadab)
(swig-defconstant "MAGICKCORE_QUANTUM_DEPTH" 16)
(swig-defconstant "MagickEpsilon" 1.0d-10)
(swig-defconstant "MagickHuge" 1.0d12)
(swig-defconstant "MaxColormapSize" 65536)
(swig-defconstant "MaxMap" 65535)
(swig-defconstant "QuantumRange" 65535)
(swig-defconstant "QuantumFormat" "%u")
(swig-defconstant "MaxRGB" 65535)
(swig-defconstant "MagickOffsetFormat" "ld")
(swig-defconstant "MagickSizeFormat" "lu")
(swig-defun ("AnimateImages" "AnimateImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextImageArtifact" "GetNextImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveImageArtifact" "RemoveImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageArtifact" "GetImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageArtifacts" "CloneImageArtifacts")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DefineImageArtifact" "DefineImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImageArtifact" "DeleteImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageArtifact" "SetImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageArtifacts" "DestroyImageArtifacts")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImageArtifactIterator" "ResetImageArtifactIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetClientPath" "GetClientPath")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetClientName" "GetClientName")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetClientName" "SetClientName")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetClientPath" "SetClientPath")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCoderList" "GetCoderList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCoderInfo" "GetCoderInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "CoderInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "CoderInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCoderInfoList" "GetCoderInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "CoderInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CoderComponentGenesis" "CoderComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListCoderInfo" "ListCoderInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CoderComponentTerminus" "CoderComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RGBTransformImage" "RGBTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageColorspace" "SetImageColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransformImageColorspace" "TransformImageColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransformRGBImage" "TransformRGBImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireImageColormap" "AcquireImageColormap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CycleColormapImage" "CycleColormapImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SortColormapByIntensity" "SortColormapByIntensity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompositeImage" "CompositeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "CompositeOperator" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompositeImageChannel" "CompositeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "CompositeOperator" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TextureImage" "TextureImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HuffmanDecodeImage" "HuffmanDecodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HuffmanEncodeImage" "HuffmanEncodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LZWEncodeImage" "LZWEncodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :unsigned-char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PackbitsEncodeImage" "PackbitsEncodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :unsigned-char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ZLIBEncodeImage" "ZLIBEncodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :unsigned-char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("Ascii85Encode" "Ascii85Encode")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-char cl:integer))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("Ascii85Flush" "Ascii85Flush")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("Ascii85Initialize" "Ascii85Initialize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConstituteImage" "ConstituteImage")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  #.(swig-insert-id "StorageType" () :type :type) )
   (:p+ PARM4_arg5  (* :void) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PingImage" "PingImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PingImages" "PingImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReadImage" "ReadImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReadImages" "ReadImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReadInlineImage" "ReadInlineImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConstituteComponentGenesis" "ConstituteComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WriteImage" "WriteImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WriteImages" "WriteImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConstituteComponentTerminus" "ConstituteComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateCommand" "GetDelegateCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateList" "GetDelegateList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateCommands" "GetDelegateCommands")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DelegateInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateInfo" "GetDelegateInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_exception  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DelegateInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_exception))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "DelegateInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateInfoList" "GetDelegateInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "DelegateInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateMode" "GetDelegateMode")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DelegateInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DelegateComponentGenesis" "DelegateComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDelegateThreadSupport" "GetDelegateThreadSupport")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DelegateInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InvokeDelegate" "InvokeDelegate")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListDelegateInfo" "ListDelegateInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DelegateComponentTerminus" "DelegateComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DisplayImages" "DisplayImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoteDisplayCommand" "RemoteDisplayCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DistortImage" "DistortImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "DistortImageMethod" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM5_exception  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_exception))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SparseColorImage" "SparseColorImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "SparseColorMethod" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SemaphoreComponentGenesis" "SemaphoreComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AllocateSemaphoreInfo" "AllocateSemaphoreInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "SemaphoreInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireSemaphoreInfo" "AcquireSemaphoreInfo")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "SemaphoreInfo" () :type :type))) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroySemaphoreInfo" "DestroySemaphoreInfo")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "SemaphoreInfo" () :type :type))) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LockSemaphoreInfo" "LockSemaphoreInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SemaphoreInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RelinquishSemaphoreInfo" "RelinquishSemaphoreInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SemaphoreInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SemaphoreComponentTerminus" "SemaphoreComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UnlockSemaphoreInfo" "UnlockSemaphoreInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SemaphoreInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetExceptionMessage" "GetExceptionMessage")
  ((:p+ PARM0_arg1  :int ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLocaleExceptionMessage" "GetLocaleExceptionMessage")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ExceptionType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetErrorHandler" "SetErrorHandler")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ErrorHandler" () :type :type) ))
  (:returning (#.(swig-insert-id "ErrorHandler" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireExceptionInfo" "AcquireExceptionInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "ExceptionInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ExceptionInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyExceptionInfo" "DestroyExceptionInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ExceptionInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ExceptionInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetFatalErrorHandler" "SetFatalErrorHandler")
  ((:p+ PARM0_arg1  #.(swig-insert-id "FatalErrorHandler" () :type :type) ))
  (:returning (#.(swig-insert-id "FatalErrorHandler" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ThrowException" "ThrowException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ExceptionType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ThrowMagickException" "ThrowMagickException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ExceptionType" () :type :type) )
   (:p+ PARM5_arg6  (* :char) )
   (:p+ PARM6_arg7  (* :char) )
   )
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CatchException" "CatchException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearMagickException" "ClearMagickException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetExceptionInfo" "GetExceptionInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InheritException" "InheritException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickError" "MagickError")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ExceptionType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFatalError" "MagickFatalError")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ExceptionType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWarning" "MagickWarning")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ExceptionType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetWarningHandler" "SetWarningHandler")
  ((:p+ PARM0_arg1  #.(swig-insert-id "WarningHandler" () :type :type) ))
  (:returning (#.(swig-insert-id "WarningHandler" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelFeatures" "GetImageChannelFeatures")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ChannelFeatures" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ChannelFeatures" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ForwardFourierTransformImage" "ForwardFourierTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InverseFourierTransformImage" "InverseFourierTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPageGeometry" "GetPageGeometry")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsGeometry" "IsGeometry")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsSceneGeometry" "IsSceneGeometry")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetGeometry" "GetGeometry")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseAbsoluteGeometry" "ParseAbsoluteGeometry")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseAffineGeometry" "ParseAffineGeometry")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "AffineMatrix" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseGeometry" "ParseGeometry")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "GeometryInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseGravityGeometry" "ParseGravityGeometry")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseMetaGeometry" "ParseMetaGeometry")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParsePageGeometry" "ParsePageGeometry")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseRegionGeometry" "ParseRegionGeometry")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GravityAdjustGeometry" "GravityAdjustGeometry")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "GravityType" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "RectangleInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetGeometry" "SetGeometry")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetGeometryInfo" "SetGeometryInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "GeometryInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireString" "AcquireString")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneString" "CloneString")
  ((:p+ PARM0_arg1  (* (* :char)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConstantString" "ConstantString")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyString" "DestroyString")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyStringList" "DestroyStringList")
  ((:p+ PARM0_arg1  (* (* :char)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EscapeString" "EscapeString")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  :char cl:character))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FileToString" "FileToString")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetEnvironmentValue" "GetEnvironmentValue")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StringInfoToHexString" "StringInfoToHexString")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StringInfoToString" "StringInfoToString")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StringToArgv" "StringToArgv")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :int) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StringToken" "StringToken")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* (* :char)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StringToList" "StringToList")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetStringInfoPath" "GetStringInfoPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareStringInfo" "CompareStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LocaleCompare" "LocaleCompare")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LocaleNCompare" "LocaleNCompare")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConcatenateString" "ConcatenateString")
  ((:p+ PARM0_arg1  (* (* :char)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SubstituteString" "SubstituteString")
  ((:p+ PARM0_arg1  (* (* :char)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConcatenateMagickString" "ConcatenateMagickString")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CopyMagickString" "CopyMagickString")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetStringInfoLength" "GetStringInfoLength")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FormatMagickSize" "FormatMagickSize")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickSizeType" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FormatMagickString" "FormatMagickString")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   )
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FormatMagickTime" "FormatMagickTime")
  ((:p+ PARM0_arg1  #.(swig-insert-id "time_t" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireStringInfo" "AcquireStringInfo")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneStringInfo" "CloneStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConfigureFileToStringInfo" "ConfigureFileToStringInfo")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyStringInfo" "DestroyStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FileToStringInfo" "FileToStringInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SplitStringInfo" "SplitStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StringToStringInfo" "StringToStringInfo")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetStringInfoDatum" "GetStringInfoDatum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConcatenateStringInfo" "ConcatenateStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LocaleLower" "LocaleLower")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LocaleUpper" "LocaleUpper")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PrintStringInfo" "PrintStringInfo")
  ((:p+ PARM0_file  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_file))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetStringInfo" "ResetStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetStringInfo" "SetStringInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetStringInfoDatum" "SetStringInfoDatum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :unsigned-char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetStringInfoLength" "SetStringInfoLength")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetStringInfoPath" "SetStringInfoPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StripString" "StripString")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetRandomValue" "GetRandomValue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "RandomInfo" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPseudoRandomValue" "GetPseudoRandomValue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "RandomInfo" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RandomComponentGenesis" "RandomComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireRandomInfo" "AcquireRandomInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "RandomInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyRandomInfo" "DestroyRandomInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "RandomInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "RandomInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetRandomKey" "GetRandomKey")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "RandomInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RandomComponentTerminus" "RandomComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SeedPseudoRandomGenerator" "SeedPseudoRandomGenerator")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetRandomKey" "SetRandomKey")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "RandomInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :unsigned-char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetRandomTrueRandom" "SetRandomTrueRandom")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageType" "GetImageType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsGrayImage" "IsGrayImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMonochromeImage" "IsMonochromeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsOpaqueImage" "IsOpaqueImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageChannelDepth" "SetImageChannelDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageDepth" "SetImageDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageBoundingBox" "GetImageBoundingBox")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_exception  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_exception))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "RectangleInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelDepth" "GetImageChannelDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageDepth" "GetImageDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageQuantumDepth" "GetImageQuantumDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelDistortions" "GetImageChannelDistortions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareImageChannels" "CompareImageChannels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareImages" "CompareImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SimilarityImage" "SimilarityImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelDistortion" "GetImageChannelDistortion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageDistortion" "GetImageDistortion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsImagesEqual" "IsImagesEqual")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BorderImage" "BorderImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FrameImage" "FrameImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FrameInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RaiseImage" "RaiseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExpandAffine" "ExpandAffine")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "AffineMatrix" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GenerateDifferentialNoise" "GenerateDifferentialNoise")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "RandomInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM2_arg3  :int )
   (:p+ PARM3_arg4  #.(swig-insert-id "MagickRealType" () :type :type) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOptimalKernelWidth" "GetOptimalKernelWidth")
  ((:p+ PARM0_arg1  :double )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOptimalKernelWidth1D" "GetOptimalKernelWidth1D")
  ((:p+ PARM0_arg1  :double )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOptimalKernelWidth2D" "GetOptimalKernelWidth2D")
  ((:p+ PARM0_arg1  :double )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertHSBToRGB" "ConvertHSBToRGB")
  ((:p+ PARM0_arg1  :double )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "Quantum" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "Quantum" () :type :type)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "Quantum" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertHSLToRGB" "ConvertHSLToRGB")
  ((:p+ PARM0_arg1  :double )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "Quantum" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "Quantum" () :type :type)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "Quantum" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertHWBToRGB" "ConvertHWBToRGB")
  ((:p+ PARM0_arg1  :double )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "Quantum" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "Quantum" () :type :type)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "Quantum" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertRGBToHSB" "ConvertRGBToHSB")
  ((:p+ PARM0_arg1  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* :double) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertRGBToHSL" "ConvertRGBToHSL")
  ((:p+ PARM0_arg1  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* :double) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertRGBToHWB" "ConvertRGBToHWB")
  ((:p+ PARM0_arg1  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* :double) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defconstant "SmallHashmapSize" 17)
(swig-defconstant "MediumHashmapSize" 509)
(swig-defconstant "LargeHashmapSize" 8191)
(swig-defconstant "HugeHashmapSize" 131071)
(swig-defun ("DestroyHashmap" "DestroyHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "HashmapInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewHashmap" "NewHashmap")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM1_arg2  (* (:function ((* :void) ) #.(swig-insert-id "size_t" () :type :type))) )
   (:p+ PARM2_arg3  (* (:function ((* :void) (* :void) ) #.(swig-insert-id "MagickBooleanType" () :type :type))) )
   (:p+ PARM3_arg4  (* (:function ((* :void) ) (* :void))) )
   (:p+ PARM4_arg5  (* (:function ((* :void) ) (* :void))) ))
  (:returning ((* #.(swig-insert-id "HashmapInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyLinkedList" "DestroyLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* (:function ((* :void) ) (* :void))) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewLinkedList" "NewLinkedList")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AppendValueToLinkedList" "AppendValueToLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareHashmapString" "CompareHashmapString")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareHashmapStringInfo" "CompareHashmapStringInfo")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InsertValueInLinkedList" "InsertValueInLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InsertValueInSortedLinkedList" "InsertValueInSortedLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* (:function ((* :void) (* :void) ) :int)) )
   (:p+ PARM2_arg3  (* (* :void)) )
   (:p+ PARM3_arg4  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsHashmapEmpty" "IsHashmapEmpty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsLinkedListEmpty" "IsLinkedListEmpty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LinkedListToArray" "LinkedListToArray")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* (* :void)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PutEntryInHashmap" "PutEntryInHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNumberOfElementsInLinkedList" "GetNumberOfElementsInLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNumberOfEntriesInHashmap" "GetNumberOfEntriesInHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HashPointerType" "HashPointerType")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HashStringType" "HashStringType")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HashStringInfoType" "HashStringInfoType")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearLinkedList" "ClearLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* (:function ((* :void) ) (* :void))) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLastValueInLinkedList" "GetLastValueInLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextKeyInHashmap" "GetNextKeyInHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextValueInHashmap" "GetNextValueInHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextValueInLinkedList" "GetNextValueInLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetValueFromHashmap" "GetValueFromHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetValueFromLinkedList" "GetValueFromLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveElementByValueFromLinkedList" "RemoveElementByValueFromLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveElementFromLinkedList" "RemoveElementFromLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveEntryFromHashmap" "RemoveEntryFromHashmap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveLastElementFromLinkedList" "RemoveLastElementFromLinkedList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetHashmapIterator" "ResetHashmapIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "HashmapInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetLinkedListIterator" "ResetLinkedListIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigureList" "GetConfigureList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigureOption" "GetConfigureOption")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigureValue" "GetConfigureValue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ConfigureInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigureInfo" "GetConfigureInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ConfigureInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ConfigureInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigureInfoList" "GetConfigureInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "ConfigureInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyConfigureOptions" "DestroyConfigureOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigurePaths" "GetConfigurePaths")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetConfigureOptions" "GetConfigureOptions")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConfigureComponentGenesis" "ConfigureComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListConfigureInfo" "ListConfigureInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConfigureComponentTerminus" "ConfigureComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IdentifyImage" "IdentifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CoalesceImages" "CoalesceImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DisposeImages" "DisposeImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareImageLayers" "CompareImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageLayerMethod" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeconstructImages" "DeconstructImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MergeImageLayers" "MergeImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageLayerMethod" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OptimizeImageLayers" "OptimizeImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OptimizePlusImageLayers" "OptimizePlusImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompositeLayers" "CompositeLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "CompositeOperator" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OptimizeImageTransparency" "OptimizeImageTransparency")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveDuplicateLayers" "RemoveDuplicateLayers")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveZeroDelayLayers" "RemoveZeroDelayLayers")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageList" "CloneImageList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImages" "CloneImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageList" "DestroyImageList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetFirstImageInList" "GetFirstImageInList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageFromList" "GetImageFromList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLastImageInList" "GetLastImageInList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextImageInList" "GetNextImageInList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPreviousImageInList" "GetPreviousImageInList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImageListToArray" "ImageListToArray")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "Image" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewImageList" "NewImageList")
  (:void)
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveImageFromList" "RemoveImageFromList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveLastImageFromList" "RemoveLastImageFromList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveFirstImageFromList" "RemoveFirstImageFromList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SpliceImageIntoList" "SpliceImageIntoList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SplitImageList" "SplitImageList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncNextImageInList" "SyncNextImageInList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageListLength" "GetImageListLength")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageIndexInList" "GetImageIndexInList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AppendImageToList" "AppendImageToList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImageFromList" "DeleteImageFromList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImages" "DeleteImages")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InsertImageInList" "InsertImageInList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PrependImageToList" "PrependImageToList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReplaceImageInList" "ReplaceImageInList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReverseImageList" "ReverseImageList")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncImageList" "SyncImageList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLocaleList" "GetLocaleList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLocaleMessage" "GetLocaleMessage")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLocaleInfo_" "GetLocaleInfo_")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "LocaleInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "LocaleInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLocaleInfoList" "GetLocaleInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "LocaleInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyLocaleOptions" "DestroyLocaleOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "LinkedListInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLocaleOptions" "GetLocaleOptions")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "LinkedListInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListLocaleInfo" "ListLocaleInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LocaleComponentGenesis" "LocaleComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LocaleComponentTerminus" "LocaleComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defconstant "MagickLogFilename" "log.xml")
(swig-defun ("GetLogList" "GetLogList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLogName" "GetLogName")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetLogName" "SetLogName")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetLogInfoList" "GetLogInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "LogInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetLogEventMask" "SetLogEventMask")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "LogEventType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsEventLogging" "IsEventLogging")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListLogInfo" "ListLogInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LogComponentGenesis" "LogComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LogMagickEvent" "LogMagickEvent")
  ((:p+ PARM0_arg1  #.(swig-insert-id "LogEventType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* :char) )
   )
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloseMagickLog" "CloseMagickLog")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LogComponentTerminus" "LogComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetLogFormat" "SetLogFormat")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagicList" "GetMagicList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagicName" "GetMagicName")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagicInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListMagicInfo" "ListMagicInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagicComponentGenesis" "MagicComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagicInfo" "GetMagicInfo")
  ((:p+ PARM0_arg1  (* :unsigned-char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagicInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "MagicInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagicInfoList" "GetMagicInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "MagicInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagicComponentTerminus" "MagicComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickList" "GetMagickList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickDescription" "GetMagickDescription")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageDecoder" "GetImageDecoder")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DecodeImageHandler" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageEncoder" "GetImageEncoder")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "EncodeImageHandler" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickPrecision" "GetMagickPrecision")
  (:void)
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetMagickPrecision" "SetMagickPrecision")
  ((:p+ PARM0_arg1  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageMagick" "GetImageMagick")
  ((:p+ PARM0_arg1  (* :unsigned-char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickAdjoin" "GetMagickAdjoin")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickBlobSupport" "GetMagickBlobSupport")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickEndianSupport" "GetMagickEndianSupport")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickRawSupport" "GetMagickRawSupport")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickSeekableStream" "GetMagickSeekableStream")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMagickInstantiated" "IsMagickInstantiated")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickComponentGenesis" "MagickComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UnregisterMagickInfo" "UnregisterMagickInfo")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickInfo" "GetMagickInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "MagickInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickInfoList" "GetMagickInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "MagickInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RegisterMagickInfo" "RegisterMagickInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "MagickInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetMagickInfo" "SetMagickInfo")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* #.(swig-insert-id "MagickInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "MagickInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickThreadSupport" "GetMagickThreadSupport")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickStatusType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickComponentTerminus" "MagickComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCoreGenesis" "MagickCoreGenesis")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCoreTerminus" "MagickCoreTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireMagickMatrix" "AcquireMagickMatrix")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* (* :double)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RelinquishMagickMatrix" "RelinquishMagickMatrix")
  ((:p+ PARM0_arg1  (* (* :double)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* (* :double)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GaussJordanElimination" "GaussJordanElimination")
  ((:p+ PARM0_arg1  (* (* :double)) )
   (:p+ PARM1_arg2  (* (* :double)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LeastSquaresAddTerms" "LeastSquaresAddTerms")
  ((:p+ PARM0_arg1  (* (* :double)) )
   (:p+ PARM1_arg2  (* (* :double)) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireAlignedMemory" "AcquireAlignedMemory")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireMagickMemory" "AcquireMagickMemory")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireQuantumMemory" "AcquireQuantumMemory")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CopyMagickMemory" "CopyMagickMemory")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyMagickMemory" "DestroyMagickMemory")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickMemoryMethods" "GetMagickMemoryMethods")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "AcquireMemoryHandler" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ResizeMemoryHandler" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "DestroyMemoryHandler" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RelinquishAlignedMemory" "RelinquishAlignedMemory")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RelinquishMagickMemory" "RelinquishMagickMemory")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetMagickMemory" "ResetMagickMemory")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResizeMagickMemory" "ResizeMagickMemory")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResizeQuantumMemory" "ResizeQuantumMemory")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetMagickMemoryMethods" "SetMagickMemoryMethods")
  ((:p+ PARM0_arg1  #.(swig-insert-id "AcquireMemoryHandler" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ResizeMemoryHandler" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "DestroyMemoryHandler" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetModuleList" "GetModuleList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickModuleType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetModuleInfoList" "GetModuleInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "ModuleInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InitializeModuleList" "InitializeModuleList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InvokeDynamicImageFilter" "InvokeDynamicImageFilter")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM2_arg3  :int )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListModuleInfo" "ListModuleInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ModuleComponentGenesis" "ModuleComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OpenModule" "OpenModule")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OpenModules" "OpenModules")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetModuleInfo" "GetModuleInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ModuleInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ModuleInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyModuleList" "DestroyModuleList")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ModuleComponentTerminus" "ModuleComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RegisterStaticModules" "RegisterStaticModules")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UnregisterStaticModules" "UnregisterStaticModules")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMimeList" "GetMimeList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickToMime" "MagickToMime")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMimeDescription" "GetMimeDescription")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MimeInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMimeType" "GetMimeType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MimeInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListMimeInfo" "ListMimeInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LoadMimeLists" "LoadMimeLists")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MimeComponentGenesis" "MimeComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMimeInfo" "GetMimeInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :unsigned-char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MimeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMimeInfoList" "GetMimeInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "MimeInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MimeComponentTerminus" "MimeComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageProgressMonitor" "SetImageProgressMonitor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageInfoProgressMonitor" "SetImageInfoProgressMonitor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QuantumTick" "QuantumTick")
  ((:p+ PARM0_offset  #.(swig-insert-id "MagickOffsetType" () :type :type) )
   (:p+ PARM1_span  #.(swig-insert-id "MagickSizeType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_offset))
  (cl::let ((SWIG_arg1 PARM1_span))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickOptions" "GetMagickOptions")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickOption" () :type :type) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextImageOption" "GetNextImageOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveImageOption" "RemoveImageOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageOption" "GetImageOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOptionToMnemonic" "MagickOptionToMnemonic")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickOption" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageOptions" "CloneImageOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DefineImageOption" "DefineImageOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImageOption" "DeleteImageOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMagickOption" "IsMagickOption")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListMagickOptions" "ListMagickOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickOption" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageOption" "SetImageOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseChannelOption" "ParseChannelOption")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseMagickOption" "ParseMagickOption")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickOption" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageOptions" "DestroyImageOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImageOptions" "ResetImageOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImageOptionIterator" "ResetImageOptionIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExportImagePixels" "ExportImagePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* :char) )
   (:p+ PARM6_arg7  #.(swig-insert-id "StorageType" () :type :type) )
   (:p+ PARM7_arg8  (* :void) )
   (:p+ PARM8_arg9  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (cl::let ((SWIG_arg8 PARM8_arg9))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7 SWIG_arg8)))))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImportImagePixels" "ImportImagePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* :char) )
   (:p+ PARM6_arg7  #.(swig-insert-id "StorageType" () :type :type) )
   (:p+ PARM7_arg8  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7))))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickPixelPacket" "GetMagickPixelPacket")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageHistogram" "GetImageHistogram")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ColorPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ColorPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UniqueImageColors" "UniqueImageColors")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsHistogramImage" "IsHistogramImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPaletteImage" "IsPaletteImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MinMaxStretchImage" "MinMaxStretchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNumberColors" "GetNumberColors")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MontageImages" "MontageImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MontageInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MontageImageList" "MontageImageList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MontageInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneMontageInfo" "CloneMontageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MontageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MontageInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "MontageInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyMontageInfo" "DestroyMontageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MontageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MontageInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "MontageInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMontageInfo" "GetMontageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MontageInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireKernelInfo" "AcquireKernelInfo")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* #.(swig-insert-id "KernelInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "KernelInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireKernelBuiltIn" "AcquireKernelBuiltIn")
  ((:p+ PARM0_arg1  #.(swig-insert-id "KernelInfoType" () :type :type) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "GeometryInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "KernelInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "KernelInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneKernelInfo" "CloneKernelInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "KernelInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "KernelInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyKernelInfo" "DestroyKernelInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "KernelInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "KernelInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MorphologyImage" "MorphologyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MorphologyMethod" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MorphologyImageChannel" "MorphologyImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MorphologyMethod" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ScaleGeometryKernelInfo" "ScaleGeometryKernelInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ShowKernelInfo" "ShowKernelInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AccelerateConvolveImage" "AccelerateConvolveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AdaptiveBlurImage" "AdaptiveBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AdaptiveBlurImageChannel" "AdaptiveBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AdaptiveSharpenImage" "AdaptiveSharpenImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AdaptiveSharpenImageChannel" "AdaptiveSharpenImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlurImage" "BlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlurImageChannel" "BlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvolveImage" "ConvolveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvolveImageChannel" "ConvolveImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DespeckleImage" "DespeckleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EdgeImage" "EdgeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EmbossImage" "EmbossImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FilterImage" "FilterImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FilterImageChannel" "FilterImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GaussianBlurImage" "GaussianBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GaussianBlurImageChannel" "GaussianBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MedianFilterImage" "MedianFilterImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MotionBlurImage" "MotionBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MotionBlurImageChannel" "MotionBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PreviewImage" "PreviewImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "PreviewType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RadialBlurImage" "RadialBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RadialBlurImageChannel" "RadialBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReduceNoiseImage" "ReduceNoiseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SelectiveBlurImage" "SelectiveBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SelectiveBlurImageChannel" "SelectiveBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ShadeImage" "ShadeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SharpenImage" "SharpenImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SharpenImageChannel" "SharpenImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SpreadImage" "SpreadImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UnsharpMaskImage" "UnsharpMaskImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UnsharpMaskImageChannel" "UnsharpMaskImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextImageProfile" "GetNextImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageProfile" "GetImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageProfiles" "CloneImageProfiles")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImageProfile" "DeleteImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ProfileImage" "ProfileImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :void) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageProfile" "SetImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "StringInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncImageProfiles" "SyncImageProfiles")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveImageProfile" "RemoveImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "StringInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "StringInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageProfiles" "DestroyImageProfiles")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImageProfileIterator" "ResetImageProfileIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResamplePixelColor" "ResamplePixelColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetResampleFilterInterpolateMethod" "SetResampleFilterInterpolateMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "InterpolatePixelMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetResampleFilterVirtualPixelMethod" "SetResampleFilterVirtualPixelMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   (:p+ PARM1_arg2  :int ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireResampleFilter" "AcquireResampleFilter")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyResampleFilter" "DestroyResampleFilter")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ResampleFilter" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ScaleResampleFilter" "ScaleResampleFilter")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetResampleFilter" "SetResampleFilter")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ResampleFilter" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "FilterTypes" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetColorList" "GetColorList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetColorInfo" "GetColorInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ColorInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ColorInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetColorInfoList" "GetColorInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "ColorInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ColorComponentGenesis" "ColorComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsColorSimilar" "IsColorSimilar")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelPacket" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsImageSimilar" "IsImageSimilar")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_x  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM3_y  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_x))
  (cl::let ((SWIG_arg3 PARM3_y))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMagickColorSimilar" "IsMagickColorSimilar")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsOpacitySimilar" "IsOpacitySimilar")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelPacket" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListColorInfo" "ListColorInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueryColorCompliance" "QueryColorCompliance")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ComplianceType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueryColorDatabase" "QueryColorDatabase")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueryColorname" "QueryColorname")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ComplianceType" () :type :type) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueryMagickColorCompliance" "QueryMagickColorCompliance")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ComplianceType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueryMagickColor" "QueryMagickColor")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueryMagickColorname" "QueryMagickColorname")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ComplianceType" () :type :type) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ColorComponentTerminus" "ColorComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConcatenateColorComponent" "ConcatenateColorComponent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ComplianceType" () :type :type) )
   (:p+ PARM3_arg4  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetColorTuple" "GetColorTuple")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetElapsedTime" "GetElapsedTime")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetUserTime" "GetUserTime")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ContinueTimer" "ContinueTimer")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireTimerInfo" "AcquireTimerInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "TimerInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance '#.(swig-insert-id "TimerInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyTimerInfo" "DestroyTimerInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "TimerInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "TimerInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTimerInfo" "GetTimerInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetTimer" "ResetTimer")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StartTimer" "StartTimer")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TimerInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetVirtualIndexQueue" "GetVirtualIndexQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "IndexPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetVirtualPixels" "GetVirtualPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetVirtualPixelQueue" "GetVirtualPixelQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquirePixelCachePixels" "AcquirePixelCachePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickSizeType" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetAuthenticIndexQueue" "GetAuthenticIndexQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "IndexPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CacheComponentGenesis" "CacheComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneVirtualMagickPixel" "GetOneVirtualMagickPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneVirtualPixel" "GetOneVirtualPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneVirtualMethodPixel" "GetOneVirtualMethodPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneAuthenticPixel" "GetOneAuthenticPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PersistPixelCache" "PersistPixelCache")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickOffsetType" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncAuthenticPixels" "SyncAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageExtent" "GetImageExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetAuthenticPixels" "GetAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetAuthenticPixelQueue" "GetAuthenticPixelQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueueAuthenticPixels" "QueueAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPixelCacheVirtualMethod" "GetPixelCacheVirtualMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetPixelCacheVirtualMethod" "SetPixelCacheVirtualMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :int ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CacheComponentTerminus" "CacheComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPixelCachePixels" "GetPixelCachePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickSizeType" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewStorageClass" "GetCacheViewStorageClass")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning (#.(swig-insert-id "ClassType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewColorspace" "GetCacheViewColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning (#.(swig-insert-id "ColorspaceType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewVirtualIndexQueue" "GetCacheViewVirtualIndexQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "IndexPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewVirtualPixels" "GetCacheViewVirtualPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewVirtualPixelQueue" "GetCacheViewVirtualPixelQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewException" "GetCacheViewException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ExceptionInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ExceptionInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewAuthenticIndexQueue" "GetCacheViewAuthenticIndexQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "IndexPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneCacheViewVirtualPixel" "GetOneCacheViewVirtualPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneCacheViewVirtualMethodPixel" "GetOneCacheViewVirtualMethodPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "VirtualPixelMethod" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetOneCacheViewAuthenticPixel" "GetOneCacheViewAuthenticPixel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetCacheViewStorageClass" "SetCacheViewStorageClass")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ClassType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetCacheViewVirtualPixelMethod" "SetCacheViewVirtualPixelMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "VirtualPixelMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncCacheViewAuthenticPixels" "SyncCacheViewAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewExtent" "GetCacheViewExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewAuthenticPixelQueue" "GetCacheViewAuthenticPixelQueue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetCacheViewAuthenticPixels" "GetCacheViewAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QueueCacheViewAuthenticPixels" "QueueCacheViewAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireCacheView" "AcquireCacheView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "CacheView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneCacheView" "CloneCacheView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "CacheView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyCacheView" "DestroyCacheView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "CacheView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "CacheView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClampToQuantum" "ClampToQuantum")
  ((:p+ PARM0_value  #.(swig-insert-id "MagickRealType" () :type :type) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_value))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ScaleQuantumToChar" "ScaleQuantumToChar")
  ((:p+ PARM0_quantum  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:unsigned-char cl:integer)
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_quantum))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumDepth" "SetQuantumDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumFormat" "SetQuantumFormat")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "QuantumFormatType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumPad" "SetQuantumPad")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireQuantumInfo" "AcquireQuantumInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyQuantumInfo" "DestroyQuantumInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetQuantumType" "GetQuantumType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "QuantumType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExportQuantumPixels" "ExportQuantumPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "QuantumType" () :type :type) )
   (:p+ PARM4_arg5  (* :unsigned-char) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetQuantumExtent" "GetQuantumExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "QuantumType" () :type :type) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImportQuantumPixels" "ImportQuantumPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "CacheView" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "QuantumType" () :type :type) )
   (:p+ PARM4_arg5  (* :unsigned-char) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetQuantumPixels" "GetQuantumPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetQuantumInfo" "GetQuantumInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "QuantumInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumAlphaType" "SetQuantumAlphaType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "QuantumAlphaType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumImageType" "SetQuantumImageType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "QuantumType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumMinIsWhite" "SetQuantumMinIsWhite")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumPack" "SetQuantumPack")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumQuantum" "SetQuantumQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetQuantumScale" "SetQuantumScale")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantumInfo" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReadStream" "ReadStream")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "StreamHandler" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WriteStream" "WriteStream")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "StreamHandler" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CatchImageException" "CatchImageException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "ExceptionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageInfoFile" "GetImageInfoFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "FILE" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireImage" "AcquireImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AppendImages" "AppendImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImage" "CloneImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CombineImages" "CombineImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImage" "DestroyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageClipMask" "GetImageClipMask")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageMask" "GetImageMask")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewMagickImage" "NewMagickImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ReferenceImage" "ReferenceImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SeparateImages" "SeparateImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireImageInfo" "AcquireImageInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "ImageInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ImageInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageInfo" "CloneImageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ImageInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ImageInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageInfo" "DestroyImageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ImageInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ImageInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClipImage" "ClipImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClipImagePath" "ClipImagePath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageAlphaChannel" "GetImageAlphaChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsTaintImage" "IsTaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMagickConflict" "IsMagickConflict")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsHighDynamicRangeImage" "IsHighDynamicRangeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsImageObject" "IsImageObject")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListMagickInfo" "ListMagickInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ModifyImage" "ModifyImage")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImagePage" "ResetImagePage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SeparateImageChannel" "SeparateImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageAlphaChannel" "SetImageAlphaChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "AlphaChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageBackgroundColor" "SetImageBackgroundColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageClipMask" "SetImageClipMask")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageColor" "SetImageColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageExtent" "SetImageExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageInfo" "SetImageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-int )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageMask" "SetImageMask")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageOpacity" "SetImageOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageStorageClass" "SetImageStorageClass")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ClassType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageType" "SetImageType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StripImage" "StripImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncImage" "SyncImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncImageSettings" "SyncImageSettings")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SyncImagesSettings" "SyncImagesSettings")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InterpretImageFilename" "InterpretImageFilename")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  :int )
   (:p+ PARM4_arg5  (* :char) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageReferenceCount" "GetImageReferenceCount")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageVirtualPixelMethod" "GetImageVirtualPixelMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "VirtualPixelMethod" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageVirtualPixelMethod" "SetImageVirtualPixelMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "VirtualPixelMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "VirtualPixelMethod" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireNextImage" "AcquireNextImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImagePixels" "DestroyImagePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DisassociateImageStream" "DisassociateImageStream")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageException" "GetImageException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageInfo" "GetImageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageInfoBlob" "SetImageInfoBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageInfoFile" "SetImageInfoFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewException" "GetImageViewException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionType" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewVirtualIndexes" "GetImageViewVirtualIndexes")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "IndexPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewVirtualPixels" "GetImageViewVirtualPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewImage" "GetImageViewImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageView" "CloneImageView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ImageView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageView" "DestroyImageView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ImageView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewImageView" "NewImageView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ImageView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewImageViewRegion" "NewImageViewRegion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "ImageView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewAuthenticIndexes" "GetImageViewAuthenticIndexes")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "IndexPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DuplexTransferImageViewIterator" "DuplexTransferImageViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "DuplexTransferImageViewMethod" () :type :type) )
   (:p+ PARM4_arg5  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewIterator" "GetImageViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "GetImageViewMethod" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsImageView" "IsImageView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageViewIterator" "SetImageViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "SetImageViewMethod" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransferImageViewIterator" "TransferImageViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "TransferImageViewMethod" () :type :type) )
   (:p+ PARM3_arg4  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UpdateImageViewIterator" "UpdateImageViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "UpdateImageViewMethod" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewAuthenticPixels" "GetImageViewAuthenticPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelPacket" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "PixelPacket" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageViewExtent" "GetImageViewExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "RectangleInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageViewDescription" "SetImageViewDescription")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageView" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTypeList" "GetTypeList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListTypeInfo" "ListTypeInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TypeComponentGenesis" "TypeComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTypeInfo" "GetTypeInfo")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "TypeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "TypeInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTypeInfoByFamily" "GetTypeInfoByFamily")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "StyleType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "StretchType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "TypeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "TypeInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTypeInfoList" "GetTypeInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "TypeInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TypeComponentTerminus" "TypeComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireDrawInfo" "AcquireDrawInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "DrawInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance '#.(swig-insert-id "DrawInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneDrawInfo" "CloneDrawInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "DrawInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyDrawInfo" "DestroyDrawInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "DrawInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAffineImage" "DrawAffineImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "AffineMatrix" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawClipPath" "DrawClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGradientImage" "DrawGradientImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawImage" "DrawImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPatternPath" "DrawPatternPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* (* #.(swig-insert-id "Image" () :type :type))) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPrimitive" "DrawPrimitive")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PrimitiveInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetAffineMatrix" "GetAffineMatrix")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "AffineMatrix" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetDrawInfo" "GetDrawInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OilPaintImage" "OilPaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FloodfillPaintImage" "FloodfillPaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM6_arg7  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GradientImage" "GradientImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "GradientType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "SpreadMethod" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "PixelPacket" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OpaquePaintImage" "OpaquePaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OpaquePaintImageChannel" "OpaquePaintImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransparentPaintImage" "TransparentPaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransparentPaintImageChroma" "TransparentPaintImageChroma")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "Quantum" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AnnotateImage" "AnnotateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMultilineTypeMetrics" "GetMultilineTypeMetrics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "TypeMetric" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetTypeMetrics" "GetTypeMetrics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "TypeMetric" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FormatMagickCaption" "FormatMagickCaption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "TypeMetric" () :type :type)) )
   (:p+ PARM3_arg4  (* (* :char)) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AutoGammaImage" "AutoGammaImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AutoGammaImageChannel" "AutoGammaImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AutoLevelImage" "AutoLevelImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AutoLevelImageChannel" "AutoLevelImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BrightnessContrastImage" "BrightnessContrastImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BrightnessContrastImageChannel" "BrightnessContrastImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClutImage" "ClutImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClutImageChannel" "ClutImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ColorDecisionListImage" "ColorDecisionListImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ContrastImage" "ContrastImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ContrastStretchImage" "ContrastStretchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ContrastStretchImageChannel" "ContrastStretchImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EqualizeImage" "EqualizeImage")
  ((:p+ PARM0_image  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_image))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EqualizeImageChannel" "EqualizeImageChannel")
  ((:p+ PARM0_image  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_image))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GammaImage" "GammaImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GammaImageChannel" "GammaImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HaldClutImage" "HaldClutImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("HaldClutImageChannel" "HaldClutImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LevelImage" "LevelImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LevelImageChannel" "LevelImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LevelizeImage" "LevelizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LevelizeImageChannel" "LevelizeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LevelColorsImage" "LevelColorsImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LevelColorsImageChannel" "LevelColorsImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LinearStretchImage" "LinearStretchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ModulateImage" "ModulateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NegateImage" "NegateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NegateImageChannel" "NegateImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NormalizeImage" "NormalizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NormalizeImageChannel" "NormalizeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SigmoidalContrastImage" "SigmoidalContrastImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SigmoidalContrastImageChannel" "SigmoidalContrastImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EnhanceImage" "EnhanceImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNoiseImage" "AddNoiseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "NoiseType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddNoiseImageChannel" "AddNoiseImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "NoiseType" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlueShiftImage" "BlueShiftImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CharcoalImage" "CharcoalImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ColorizeImage" "ColorizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "PixelPacket" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :pass-structs-by-value t
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ColorMatrixImage" "ColorMatrixImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_kernel  (* #.(swig-insert-id "KernelInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_kernel))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FxImage" "FxImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FxImageChannel" "FxImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImplodeImage" "ImplodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MorphImages" "MorphImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PolaroidImage" "PolaroidImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SepiaToneImage" "SepiaToneImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ShadowImage" "ShadowImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SketchImage" "SketchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SteganoImage" "SteganoImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StereoImage" "StereoImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StereoAnaglyphImage" "StereoAnaglyphImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SwirlImage" "SwirlImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TintImage" "TintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "PixelPacket" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :pass-structs-by-value t
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("VignetteImage" "VignetteImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WaveImage" "WaveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PlasmaImage" "PlasmaImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "SegmentInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SolarizeImage" "SolarizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPolicyValue" "GetPolicyValue")
  ((:p+ PARM0_name  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_name))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPolicyList" "GetPolicyList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPolicyInfoList" "GetPolicyInfoList")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "PolicyInfo" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsRightsAuthorized" "IsRightsAuthorized")
  ((:p+ PARM0_arg1  #.(swig-insert-id "PolicyDomain" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "PolicyRights" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListPolicyInfo" "ListPolicyInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PolicyComponentGenesis" "PolicyComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PolicyComponentTerminus" "PolicyComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageTotalInkDensity" "GetImageTotalInkDensity")
  ((:p+ PARM0_image  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_image))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextImageProperty" "GetNextImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InterpretImageProperties" "InterpretImageProperties")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveImageProperty" "RemoveImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageProperty" "GetImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickProperty" "GetMagickProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneImageProperties" "CloneImageProperties")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DefineImageProperty" "DefineImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImageProperty" "DeleteImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FormatImageProperty" "FormatImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) )
   )
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageProperty" "SetImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyImageProperties" "DestroyImageProperties")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImagePropertyIterator" "ResetImagePropertyIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompressImageColormap" "CompressImageColormap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageQuantizeError" "GetImageQuantizeError")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PosterizeImage" "PosterizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QuantizeImage" "QuantizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("QuantizeImages" "QuantizeImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemapImage" "RemapImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemapImages" "RemapImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireQuantizeInfo" "AcquireQuantizeInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "QuantizeInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneQuantizeInfo" "CloneQuantizeInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "QuantizeInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyQuantizeInfo" "DestroyQuantizeInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "QuantizeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "QuantizeInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetQuantizeInfo" "GetQuantizeInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "QuantizeInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextImageRegistry" "GetNextImageRegistry")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DefineImageRegistry" "DefineImageRegistry")
  ((:p+ PARM0_arg1  #.(swig-insert-id "RegistryType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteImageRegistry" "DeleteImageRegistry")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RegistryComponentGenesis" "RegistryComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetImageRegistry" "SetImageRegistry")
  ((:p+ PARM0_arg1  #.(swig-insert-id "RegistryType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :void) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageRegistry" "GetImageRegistry")
  ((:p+ PARM0_arg1  #.(swig-insert-id "RegistryType" () :type :type) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RegistryComponentTerminus" "RegistryComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveImageRegistry" "RemoveImageRegistry")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetImageRegistryIterator" "ResetImageRegistryIterator")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AdaptiveResizeImage" "AdaptiveResizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("LiquidRescaleImage" "LiquidRescaleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagnifyImage" "MagnifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MinifyImage" "MinifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResampleImage" "ResampleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "FilterTypes" () :type :type) )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResizeImage" "ResizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "FilterTypes" () :type :type) )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SampleImage" "SampleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ScaleImage" "ScaleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ThumbnailImage" "ThumbnailImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ZoomImage" "ZoomImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireUniqueFileResource" "AcquireUniqueFileResource")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireMagickResource" "AcquireMagickResource")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickSizeType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListMagickResourceInfo" "ListMagickResourceInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RelinquishUniqueFileResource" "RelinquishUniqueFileResource")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResourceComponentGenesis" "ResourceComponentGenesis")
  (:void)
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetMagickResourceLimit" "SetMagickResourceLimit")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickSizeType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickResource" "GetMagickResource")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickResourceLimit" "GetMagickResourceLimit")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AsynchronousResourceComponentTerminus" "AsynchronousResourceComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RelinquishMagickResource" "RelinquishMagickResource")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickSizeType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResourceComponentTerminus" "ResourceComponentTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageDynamicThreshold" "GetImageDynamicThreshold")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SegmentImage" "SegmentImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AffineTransformImage" "AffineTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "AffineMatrix" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeskewImage" "DeskewImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RotateImage" "RotateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ShearImage" "ShearImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SignatureImage" "SignatureImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddValueToSplayTree" "AddValueToSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNodeByValueFromSplayTree" "DeleteNodeByValueFromSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DeleteNodeFromSplayTree" "DeleteNodeFromSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextKeyInSplayTree" "GetNextKeyInSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextValueInSplayTree" "GetNextValueInSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetValueFromSplayTree" "GetValueFromSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareSplayTreeString" "CompareSplayTreeString")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareSplayTreeStringInfo" "CompareSplayTreeStringInfo")
  ((:p+ PARM0_arg1  (* :void) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneSplayTree" "CloneSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* (:function ((* :void) ) (* :void))) )
   (:p+ PARM2_arg3  (* (:function ((* :void) ) (* :void))) ))
  (:returning ((* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroySplayTree" "DestroySplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewSplayTree" "NewSplayTree")
  ((:p+ PARM0_arg1  (* (:function ((* :void) (* :void) ) :int)) )
   (:p+ PARM1_arg2  (* (:function ((* :void) ) (* :void))) )
   (:p+ PARM2_arg3  (* (:function ((* :void) ) (* :void))) ))
  (:returning ((* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNumberOfNodesInSplayTree" "GetNumberOfNodesInSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveNodeByValueFromSplayTree" "RemoveNodeByValueFromSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RemoveNodeFromSplayTree" "RemoveNodeFromSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetSplayTree" "ResetSplayTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ResetSplayTreeIterator" "ResetSplayTreeIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defconstant "MagickMaxBufferExtent" #x3c005)
(swig-defun ("GetBlobFileHandle" "GetBlobFileHandle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "FILE" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlobToImage" "BlobToImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PingBlob" "PingBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlobToFile" "BlobToFile")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FileToImage" "FileToImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetBlobError" "GetBlobError")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImageToFile" "ImageToFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InjectImageBlob" "InjectImageBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsBlobExempt" "IsBlobExempt")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsBlobSeekable" "IsBlobSeekable")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsBlobTemporary" "IsBlobTemporary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetBlobSize" "GetBlobSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetBlobStreamHandler" "GetBlobStreamHandler")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "StreamHandler" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FileToBlob" "FileToBlob")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetBlobStreamData" "GetBlobStreamData")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImageToBlob" "ImageToBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImagesToBlob" "ImagesToBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyBlob" "DestroyBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DuplicateBlob" "DuplicateBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetBlobExempt" "SetBlobExempt")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelStatistics" "GetImageChannelStatistics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ChannelStatistics" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ChannelStatistics" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EvaluateImages" "EvaluateImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickEvaluateOperator" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EvaluateImage" "EvaluateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickEvaluateOperator" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EvaluateImageChannel" "EvaluateImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickEvaluateOperator" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FunctionImage" "FunctionImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickFunction" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FunctionImageChannel" "FunctionImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickFunction" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* :double) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelExtrema" "GetImageChannelExtrema")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelMean" "GetImageChannelMean")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelKurtosis" "GetImageChannelKurtosis")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageChannelRange" "GetImageChannelRange")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageExtrema" "GetImageExtrema")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageRange" "GetImageRange")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageMean" "GetImageMean")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageKurtosis" "GetImageKurtosis")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DecipherImage" "DecipherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("EncipherImage" "EncipherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PasskeyDecipherImage" "PasskeyDecipherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PasskeyEncipherImage" "PasskeyEncipherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "StringInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("Tokenizer" "Tokenizer")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TokenInfo" () :type :type)) )
   (:p+ PARM1_arg2  :unsigned-int )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* :char) )
   (:p+ PARM5_arg6  (* :char) )
   (:p+ PARM6_arg7  (* :char) )
   (:p+ PARM7_arg8  (* :char) )
   (:p+ PARM8_arg9  :char cl:character)
   (:p+ PARM9_arg10  (* :char) )
   (:p+ PARM10_arg11  (* :int) )
   (:p+ PARM11_arg12  (* :char) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (cl::let ((SWIG_arg8 PARM8_arg9))
  (cl::let ((SWIG_arg9 PARM9_arg10))
  (cl::let ((SWIG_arg10 PARM10_arg11))
  (cl::let ((SWIG_arg11 PARM11_arg12))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7 SWIG_arg8 SWIG_arg9 SWIG_arg10 SWIG_arg11))))))))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GlobExpression" "GlobExpression")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsGlob" "IsGlob")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireTokenInfo" "AcquireTokenInfo")
  (:void)
  (:returning ((* #.(swig-insert-id "TokenInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyTokenInfo" "DestroyTokenInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "TokenInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "TokenInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickToken" "GetMagickToken")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* (* :char)) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ChopImage" "ChopImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConsolidateCMYKImages" "ConsolidateCMYKImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CropImage" "CropImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExcerptImage" "ExcerptImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExtentImage" "ExtentImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FlipImage" "FlipImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("FlopImage" "FlopImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RollImage" "RollImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ShaveImage" "ShaveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SpliceImage" "SpliceImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransposeImage" "TransposeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransverseImage" "TransverseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TrimImage" "TrimImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransformImage" "TransformImage")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransformImages" "TransformImages")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AdaptiveThresholdImage" "AdaptiveThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyThresholdMap" "DestroyThresholdMap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ThresholdMap" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ThresholdMap" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetThresholdMap" "GetThresholdMap")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ThresholdMap" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BilevelImage" "BilevelImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BilevelImageChannel" "BilevelImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlackThresholdImage" "BlackThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("BlackThresholdImageChannel" "BlackThresholdImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClampImage" "ClampImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClampImageChannel" "ClampImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListThresholdMaps" "ListThresholdMaps")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "FILE" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OrderedDitherImage" "OrderedDitherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OrderedDitherImageChannel" "OrderedDitherImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OrderedPosterizeImage" "OrderedPosterizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OrderedPosterizeImageChannel" "OrderedPosterizeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RandomThresholdImage" "RandomThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("RandomThresholdImageChannel" "RandomThresholdImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WhiteThresholdImage" "WhiteThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("WhiteThresholdImageChannel" "WhiteThresholdImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("Base64Encode" "Base64Encode")
  ((:p+ PARM0_arg1  (* :unsigned-char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPathComponents" "GetPathComponents")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ListFiles" "ListFiles")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("OpenMagickStream" "OpenMagickStream")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "FILE" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SystemCommand" "SystemCommand")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (:int )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireUniqueFilename" "AcquireUniqueFilename")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AcquireUniqueSymbolicLink" "AcquireUniqueSymbolicLink")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExpandFilenames" "ExpandFilenames")
  ((:p+ PARM0_arg1  (* :int) )
   (:p+ PARM1_arg2  (* (* (* :char))) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPathAttributes" "GetPathAttributes")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetExecutionPath" "GetExecutionPath")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMagickTrue" "IsMagickTrue")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPathAccessible" "IsPathAccessible")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MultilineCensus" "MultilineCensus")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickPageSize" "GetMagickPageSize")
  (:void)
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("Base64Decode" "Base64Decode")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AppendImageFormat" "AppendImageFormat")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ChopPathComponents" "ChopPathComponents")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ExpandFilename" "ExpandFilename")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetPathComponent" "GetPathComponent")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "PathType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDelay" "MagickDelay")
  ((:p+ PARM0_arg1  #.(swig-insert-id "MagickSizeType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defconstant "MagickPackageName" "ImageMagick")
(swig-defconstant "MagickCopyright" "Copyright (C) 1999-2010 ImageMagick Studio LLC")
(swig-defconstant "MagickLibVersion" #x663)
(swig-defconstant "MagickLibVersionText" "6.6.3")
(swig-defconstant "MagickLibAddendum" "-2")
(swig-defconstant "MagickLibInterface" 4)
(swig-defconstant "MagickLibMinInterface" 4)
(swig-defconstant "MagickReleaseDate" "2010-08-01")
(swig-defconstant "MagickChangeDate" "20100731")
(swig-defconstant "MagickAuthoritativeURL" "http://www.imagemagick.org")
(swig-defconstant "MagickHomeURL" "file:///usr/share/doc/ImageMagick-6.6.3/index.html")
(swig-defconstant "MagickQuantumDepth" "Q16")
(swig-defconstant "MagickQuantumRange" "65535")
(swig-defconstant "MagickHDRIFeature" "\0")
(swig-defconstant "MagickOPENMPFeature" "\0")
(swig-defconstant "MagickOPENCLFeature" "\0")
(swig-defconstant "MagickFeatures" "\0")
(swig-defconstant "MagickVersion" "ImageMagick 6.6.3-2 2010-08-01 Q16 http://www.imagemagick.org")
(swig-defun ("GetMagickHomeURL" "GetMagickHomeURL")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickCopyright" "GetMagickCopyright")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickFeatures" "GetMagickFeatures")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickPackageName" "GetMagickPackageName")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickQuantumDepth" "GetMagickQuantumDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickQuantumRange" "GetMagickQuantumRange")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickReleaseDate" "GetMagickReleaseDate")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetMagickVersion" "GetMagickVersion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CanonicalXMLContent" "CanonicalXMLContent")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("XMLTreeInfoToXML" "XMLTreeInfoToXML")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeAttribute" "GetXMLTreeAttribute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeContent" "GetXMLTreeContent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeProcessingInstructions" "GetXMLTreeProcessingInstructions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeTag" "GetXMLTreeTag")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeAttributes" "GetXMLTreeAttributes")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "SplayTreeInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddChildToXMLTree" "AddChildToXMLTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AddPathToXMLTree" "AddPathToXMLTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyXMLTree" "DestroyXMLTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetNextXMLTreeTag" "GetNextXMLTreeTag")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeChild" "GetXMLTreeChild")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeOrdered" "GetXMLTreeOrdered")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreePath" "GetXMLTreePath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetXMLTreeSibling" "GetXMLTreeSibling")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("InsertTagIntoXMLTree" "InsertTagIntoXMLTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewXMLTree" "NewXMLTree")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewXMLTreeTag" "NewXMLTreeTag")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ParseTagFromXMLTree" "ParseTagFromXMLTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PruneTagFromXMLTree" "PruneTagFromXMLTree")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetXMLTreeAttribute" "SetXMLTreeAttribute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetXMLTreeContent" "SetXMLTreeContent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "XMLTreeInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("XImportImage" "XImportImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "XImportInfo" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("XGetImportInfo" "XGetImportInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "XImportInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defconstant "WandSignature" #xabacadab)
(swig-defun ("MagickGetException" "MagickGetException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionType" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetExceptionType" "MagickGetExceptionType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ExceptionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsMagickWand" "IsMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClearException" "MagickClearException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetIteratorIndex" "MagickSetIteratorIndex")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneMagickWand" "CloneMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyMagickWand" "DestroyMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewMagickWand" "NewMagickWand")
  (:void)
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewMagickWandFromImage" "NewMagickWandFromImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetIteratorIndex" "MagickGetIteratorIndex")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearMagickWand" "ClearMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWandGenesis" "MagickWandGenesis")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWandTerminus" "MagickWandTerminus")
  (:void)
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (swig-ff-call)
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRelinquishMemory" "MagickRelinquishMemory")
  ((:p+ PARM0_arg1  (* :void) ))
  (:returning ((* :void) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickResetIterator" "MagickResetIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetFirstIterator" "MagickSetFirstIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetLastIterator" "MagickSetLastIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("AnimateImageCommand" "AnimateImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompareImageCommand" "CompareImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CompositeImageCommand" "CompositeImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConjureImageCommand" "ConjureImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ConvertImageCommand" "ConvertImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DisplayImageCommand" "DisplayImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IdentifyImageCommand" "IdentifyImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ImportImageCommand" "ImportImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCommandGenesis" "MagickCommandGenesis")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickCommand" () :type :type) )
   (:p+ PARM2_arg3  :int )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* (* :char)) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MogrifyImage" "MogrifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MogrifyImageCommand" "MogrifyImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MogrifyImageInfo" "MogrifyImageInfo")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MogrifyImageList" "MogrifyImageList")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MogrifyImages" "MogrifyImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  :int )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* (* #.(swig-insert-id "Image" () :type :type))) )
   (:p+ PARM5_arg6  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MontageImageCommand" "MontageImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetColorAsNormalizedString" "PixelGetColorAsNormalizedString")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetColorAsString" "PixelGetColorAsString")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetException" "PixelGetException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionType" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetAlpha" "PixelGetAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlack" "PixelGetBlack")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlue" "PixelGetBlue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetCyan" "PixelGetCyan")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetFuzz" "PixelGetFuzz")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetGreen" "PixelGetGreen")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetMagenta" "PixelGetMagenta")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetOpacity" "PixelGetOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetRed" "PixelGetRed")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetYellow" "PixelGetYellow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetExceptionType" "PixelGetExceptionType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ExceptionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetIndex" "PixelGetIndex")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "IndexPacket" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPixelWand" "IsPixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPixelWandSimilar" "IsPixelWandSimilar")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelClearException" "PixelClearException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetColor" "PixelSetColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClonePixelWand" "ClonePixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClonePixelWands" "ClonePixelWands")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyPixelWand" "DestroyPixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyPixelWands" "DestroyPixelWands")
  ((:p+ PARM0_arg1  (* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelWand" "NewPixelWand")
  (:void)
  (:returning ((* #.(swig-insert-id "PixelWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelWands" "NewPixelWands")
  ((:p+ PARM0_arg1  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetAlphaQuantum" "PixelGetAlphaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlackQuantum" "PixelGetBlackQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetBlueQuantum" "PixelGetBlueQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetCyanQuantum" "PixelGetCyanQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetGreenQuantum" "PixelGetGreenQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetMagentaQuantum" "PixelGetMagentaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetOpacityQuantum" "PixelGetOpacityQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetRedQuantum" "PixelGetRedQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetYellowQuantum" "PixelGetYellowQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "Quantum" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetColorCount" "PixelGetColorCount")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearPixelWand" "ClearPixelWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetHSL" "PixelGetHSL")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetQuantumColor" "PixelGetQuantumColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelPacket" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetAlpha" "PixelSetAlpha")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetAlphaQuantum" "PixelSetAlphaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlack" "PixelSetBlack")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlackQuantum" "PixelSetBlackQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlue" "PixelSetBlue")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetBlueQuantum" "PixelSetBlueQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetColorFromWand" "PixelSetColorFromWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetColorCount" "PixelSetColorCount")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetCyan" "PixelSetCyan")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetCyanQuantum" "PixelSetCyanQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetFuzz" "PixelSetFuzz")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetGreen" "PixelSetGreen")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetGreenQuantum" "PixelSetGreenQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetHSL" "PixelSetHSL")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetIndex" "PixelSetIndex")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "IndexPacket" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetMagenta" "PixelSetMagenta")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetMagentaQuantum" "PixelSetMagentaQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetMagickColor" "PixelSetMagickColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickPixelPacket" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetOpacity" "PixelSetOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetOpacityQuantum" "PixelSetOpacityQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetQuantumColor" "PixelSetQuantumColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelPacket" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetRed" "PixelSetRed")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetRedQuantum" "PixelSetRedQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetYellow" "PixelSetYellow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetYellowQuantum" "PixelSetYellowQuantum")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "Quantum" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetIteratorException" "PixelGetIteratorException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionType" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetIteratorExceptionType" "PixelGetIteratorExceptionType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (#.(swig-insert-id "ExceptionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsPixelIterator" "IsPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelClearIteratorException" "PixelClearIteratorException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetIteratorRow" "PixelSetIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSyncIterator" "PixelSyncIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClonePixelIterator" "ClonePixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyPixelIterator" "DestroyPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelIterator" "NewPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewPixelRegionIterator" "NewPixelRegionIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "PixelIterator" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetCurrentIteratorRow" "PixelGetCurrentIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetNextIteratorRow" "PixelGetNextIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetPreviousIteratorRow" "PixelGetPreviousIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelGetIteratorRow" "PixelGetIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (#.(swig-insert-id "ssize_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearPixelIterator" "ClearPixelIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelResetIterator" "PixelResetIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetFirstIteratorRow" "PixelSetFirstIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PixelSetLastIteratorRow" "PixelSetLastIteratorRow")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "PixelIterator" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextAlignment" "DrawGetTextAlignment")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "AlignType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetClipPath" "DrawGetClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetException" "DrawGetException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionType" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFont" "DrawGetFont")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontFamily" "DrawGetFontFamily")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextEncoding" "DrawGetTextEncoding")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetVectorGraphics" "DrawGetVectorGraphics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetClipUnits" "DrawGetClipUnits")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ClipPathUnits" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextDecoration" "DrawGetTextDecoration")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "DecorationType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillOpacity" "DrawGetFillOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontSize" "DrawGetFontSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetOpacity" "DrawGetOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeDashArray" "DrawGetStrokeDashArray")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeDashOffset" "DrawGetStrokeDashOffset")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeOpacity" "DrawGetStrokeOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeWidth" "DrawGetStrokeWidth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextKerning" "DrawGetTextKerning")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextInterlineSpacing" "DrawGetTextInterlineSpacing")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextInterwordSpacing" "DrawGetTextInterwordSpacing")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PeekDrawingWand" "PeekDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "DrawInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneDrawingWand" "CloneDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyDrawingWand" "DestroyDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAllocateWand" "DrawAllocateWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawInfo" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewDrawingWand" "NewDrawingWand")
  (:void)
  (:returning ((* #.(swig-insert-id "DrawingWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
   (cl:let* ((address (swig-ff-call))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) 
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetExceptionType" "DrawGetExceptionType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ExceptionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetClipRule" "DrawGetClipRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "FillRule" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillRule" "DrawGetFillRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "FillRule" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetGravity" "DrawGetGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "GravityType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeLineCap" "DrawGetStrokeLineCap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "LineCap" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeLineJoin" "DrawGetStrokeLineJoin")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "LineJoin" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawClearException" "DrawClearException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawComposite" "DrawComposite")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "CompositeOperator" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeAntialias" "DrawGetStrokeAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextAntialias" "DrawGetTextAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopPattern" "DrawPopPattern")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushPattern" "DrawPushPattern")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRender" "DrawRender")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetClipPath" "DrawSetClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillPatternURL" "DrawSetFillPatternURL")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFont" "DrawSetFont")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontFamily" "DrawSetFontFamily")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeDashArray" "DrawSetStrokeDashArray")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokePatternURL" "DrawSetStrokePatternURL")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetVectorGraphics" "DrawSetVectorGraphics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsDrawingWand" "IsDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PopDrawingWand" "PopDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("PushDrawingWand" "PushDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontStretch" "DrawGetFontStretch")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "StretchType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontStyle" "DrawGetFontStyle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "StyleType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFontWeight" "DrawGetFontWeight")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeMiterLimit" "DrawGetStrokeMiterLimit")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("ClearDrawingWand" "ClearDrawingWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAffine" "DrawAffine")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "AffineMatrix" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawAnnotation" "DrawAnnotation")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  (* :unsigned-char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawArc" "DrawArc")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawBezier" "DrawBezier")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PointInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetBorderColor" "DrawGetBorderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawCircle" "DrawCircle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawColor" "DrawColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "PaintMethod" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawComment" "DrawComment")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawEllipse" "DrawEllipse")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetFillColor" "DrawGetFillColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetStrokeColor" "DrawGetStrokeColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextKerning" "DrawSetTextKerning")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextInterlineSpacing" "DrawSetTextInterlineSpacing")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextInterwordSpacing" "DrawSetTextInterwordSpacing")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawGetTextUnderColor" "DrawGetTextUnderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawLine" "DrawLine")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawMatte" "DrawMatte")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "PaintMethod" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathClose" "DrawPathClose")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToAbsolute" "DrawPathCurveToAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToRelative" "DrawPathCurveToRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierAbsolute" "DrawPathCurveToQuadraticBezierAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierRelative" "DrawPathCurveToQuadraticBezierRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierSmoothAbsolute" "DrawPathCurveToQuadraticBezierSmoothAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToQuadraticBezierSmoothRelative" "DrawPathCurveToQuadraticBezierSmoothRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToSmoothAbsolute" "DrawPathCurveToSmoothAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathCurveToSmoothRelative" "DrawPathCurveToSmoothRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathEllipticArcAbsolute" "DrawPathEllipticArcAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM6_arg7  :double )
   (:p+ PARM7_arg8  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathEllipticArcRelative" "DrawPathEllipticArcRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM6_arg7  :double )
   (:p+ PARM7_arg8  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7)))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathFinish" "DrawPathFinish")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToAbsolute" "DrawPathLineToAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToRelative" "DrawPathLineToRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToHorizontalAbsolute" "DrawPathLineToHorizontalAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToHorizontalRelative" "DrawPathLineToHorizontalRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToVerticalAbsolute" "DrawPathLineToVerticalAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathLineToVerticalRelative" "DrawPathLineToVerticalRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathMoveToAbsolute" "DrawPathMoveToAbsolute")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathMoveToRelative" "DrawPathMoveToRelative")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPathStart" "DrawPathStart")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPoint" "DrawPoint")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPolygon" "DrawPolygon")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PointInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPolyline" "DrawPolyline")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PointInfo" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopClipPath" "DrawPopClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPopDefs" "DrawPopDefs")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushClipPath" "DrawPushClipPath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawPushDefs" "DrawPushDefs")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRectangle" "DrawRectangle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawResetVectorGraphics" "DrawResetVectorGraphics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (swig-ff-call SWIG_arg0))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRotate" "DrawRotate")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawRoundRectangle" "DrawRoundRectangle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double )
   (:p+ PARM6_arg7  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawScale" "DrawScale")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetBorderColor" "DrawSetBorderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetClipRule" "DrawSetClipRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "FillRule" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetClipUnits" "DrawSetClipUnits")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ClipPathUnits" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillColor" "DrawSetFillColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillOpacity" "DrawSetFillOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFillRule" "DrawSetFillRule")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "FillRule" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontSize" "DrawSetFontSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontStretch" "DrawSetFontStretch")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "StretchType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontStyle" "DrawSetFontStyle")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "StyleType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetFontWeight" "DrawSetFontWeight")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetGravity" "DrawSetGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "GravityType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetOpacity" "DrawSetOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeAntialias" "DrawSetStrokeAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeColor" "DrawSetStrokeColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeDashOffset" "DrawSetStrokeDashOffset")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_dashoffset  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_dashoffset))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeLineCap" "DrawSetStrokeLineCap")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "LineCap" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeLineJoin" "DrawSetStrokeLineJoin")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "LineJoin" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeMiterLimit" "DrawSetStrokeMiterLimit")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeOpacity" "DrawSetStrokeOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetStrokeWidth" "DrawSetStrokeWidth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextAlignment" "DrawSetTextAlignment")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "AlignType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextAntialias" "DrawSetTextAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextDecoration" "DrawSetTextDecoration")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "DecorationType" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextEncoding" "DrawSetTextEncoding")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetTextUnderColor" "DrawSetTextUnderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSetViewbox" "DrawSetViewbox")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSkewX" "DrawSkewX")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawSkewY" "DrawSkewY")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DrawTranslate" "DrawTranslate")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelFeatures" "MagickGetImageChannelFeatures")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "ChannelFeatures" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ChannelFeatures" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelStatistics" "MagickGetImageChannelStatistics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "ChannelStatistics" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "ChannelStatistics" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageFilename" "MagickGetImageFilename")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageFormat" "MagickGetImageFormat")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageSignature" "MagickGetImageSignature")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickIdentifyImage" "MagickIdentifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageColorspace" "MagickGetImageColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ColorspaceType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageCompose" "MagickGetImageCompose")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "CompositeOperator" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageCompression" "MagickGetImageCompression")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "CompressionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageDispose" "MagickGetImageDispose")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "DisposeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelDistortions" "MagickGetImageChannelDistortions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MetricType" () :type :type) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageFuzz" "MagickGetImageFuzz")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageGamma" "MagickGetImageGamma")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageTotalInkDensity" "MagickGetImageTotalInkDensity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageGravity" "MagickGetImageGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "GravityType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDestroyImage" "MagickDestroyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "Image" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetImageFromMagickWand" "GetImageFromMagickWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "Image" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "Image" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageType" "MagickGetImageType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ImageType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageInterlaceScheme" "MagickGetImageInterlaceScheme")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "InterlaceType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageInterpolateMethod" "MagickGetImageInterpolateMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "InterpolatePixelMethod" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAdaptiveBlurImage" "MagickAdaptiveBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAdaptiveBlurImageChannel" "MagickAdaptiveBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAdaptiveResizeImage" "MagickAdaptiveResizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAdaptiveSharpenImage" "MagickAdaptiveSharpenImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAdaptiveSharpenImageChannel" "MagickAdaptiveSharpenImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAdaptiveThresholdImage" "MagickAdaptiveThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAddImage" "MagickAddImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAddNoiseImage" "MagickAddNoiseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "NoiseType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAddNoiseImageChannel" "MagickAddNoiseImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "NoiseType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAffineTransformImage" "MagickAffineTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAnnotateImage" "MagickAnnotateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAnimateImages" "MagickAnimateImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAutoGammaImage" "MagickAutoGammaImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAutoGammaImageChannel" "MagickAutoGammaImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAutoLevelImage" "MagickAutoLevelImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAutoLevelImageChannel" "MagickAutoLevelImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBlackThresholdImage" "MagickBlackThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBlueShiftImage" "MagickBlueShiftImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBlurImage" "MagickBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBlurImageChannel" "MagickBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBorderImage" "MagickBorderImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBrightnessContrastImage" "MagickBrightnessContrastImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickBrightnessContrastImageChannel" "MagickBrightnessContrastImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCharcoalImage" "MagickCharcoalImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickChopImage" "MagickChopImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClampImage" "MagickClampImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClampImageChannel" "MagickClampImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClipImage" "MagickClipImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClipImagePath" "MagickClipImagePath")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClutImage" "MagickClutImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickClutImageChannel" "MagickClutImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickColorDecisionListImage" "MagickColorDecisionListImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickColorizeImage" "MagickColorizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickColorMatrixImage" "MagickColorMatrixImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCommentImage" "MagickCommentImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCompositeImage" "MagickCompositeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "CompositeOperator" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCompositeImageChannel" "MagickCompositeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "CompositeOperator" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickConstituteImage" "MagickConstituteImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  #.(swig-insert-id "StorageType" () :type :type) )
   (:p+ PARM5_arg6  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickContrastImage" "MagickContrastImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickContrastStretchImage" "MagickContrastStretchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickContrastStretchImageChannel" "MagickContrastStretchImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickConvolveImage" "MagickConvolveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickConvolveImageChannel" "MagickConvolveImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCropImage" "MagickCropImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCycleColormapImage" "MagickCycleColormapImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDecipherImage" "MagickDecipherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDeskewImage" "MagickDeskewImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDespeckleImage" "MagickDespeckleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDisplayImage" "MagickDisplayImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDisplayImages" "MagickDisplayImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDistortImage" "MagickDistortImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "DistortImageMethod" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :double) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDrawImage" "MagickDrawImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEdgeImage" "MagickEdgeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEmbossImage" "MagickEmbossImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEncipherImage" "MagickEncipherImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEnhanceImage" "MagickEnhanceImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEqualizeImage" "MagickEqualizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEqualizeImageChannel" "MagickEqualizeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEvaluateImage" "MagickEvaluateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickEvaluateOperator" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEvaluateImageChannel" "MagickEvaluateImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickEvaluateOperator" () :type :type) )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickExportImagePixels" "MagickExportImagePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* :char) )
   (:p+ PARM6_arg7  #.(swig-insert-id "StorageType" () :type :type) )
   (:p+ PARM7_arg8  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7))))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickExtentImage" "MagickExtentImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFilterImage" "MagickFilterImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFilterImageChannel" "MagickFilterImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFlipImage" "MagickFlipImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFloodfillPaintImage" "MagickFloodfillPaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM5_arg6  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM6_arg7  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM7_arg8  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7))))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFlopImage" "MagickFlopImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickForwardFourierTransformImage" "MagickForwardFourierTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFrameImage" "MagickFrameImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFunctionImage" "MagickFunctionImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickFunction" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFunctionImageChannel" "MagickFunctionImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickFunction" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGammaImage" "MagickGammaImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGammaImageChannel" "MagickGammaImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGaussianBlurImage" "MagickGaussianBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGaussianBlurImageChannel" "MagickGaussianBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageAlphaChannel" "MagickGetImageAlphaChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageBackgroundColor" "MagickGetImageBackgroundColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageBluePrimary" "MagickGetImageBluePrimary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageBorderColor" "MagickGetImageBorderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelDistortion" "MagickGetImageChannelDistortion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM4_arg5  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelKurtosis" "MagickGetImageChannelKurtosis")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelMean" "MagickGetImageChannelMean")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelRange" "MagickGetImageChannelRange")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :double) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageColormapColor" "MagickGetImageColormapColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageDistortion" "MagickGetImageDistortion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageGreenPrimary" "MagickGetImageGreenPrimary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageMatteColor" "MagickGetImageMatteColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageLength" "MagickGetImageLength")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickSizeType" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImagePage" "MagickGetImagePage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ssize_t" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImagePixelColor" "MagickGetImagePixelColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageRange" "MagickGetImageRange")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageRedPrimary" "MagickGetImageRedPrimary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageResolution" "MagickGetImageResolution")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageWhitePoint" "MagickGetImageWhitePoint")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :double) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickHaldClutImage" "MagickHaldClutImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickHaldClutImageChannel" "MagickHaldClutImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickHasNextImage" "MagickHasNextImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickHasPreviousImage" "MagickHasPreviousImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickImplodeImage" "MagickImplodeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickImportImagePixels" "MagickImportImagePixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM5_arg6  (* :char) )
   (:p+ PARM6_arg7  #.(swig-insert-id "StorageType" () :type :type) )
   (:p+ PARM7_arg8  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::let ((SWIG_arg6 PARM6_arg7))
  (cl::let ((SWIG_arg7 PARM7_arg8))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5 SWIG_arg6 SWIG_arg7))))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickInverseFourierTransformImage" "MagickInverseFourierTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickLabelImage" "MagickLabelImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickLevelImage" "MagickLevelImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickLevelImageChannel" "MagickLevelImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickLinearStretchImage" "MagickLinearStretchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickLiquidRescaleImage" "MagickLiquidRescaleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMagnifyImage" "MagickMagnifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMedianFilterImage" "MagickMedianFilterImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMinifyImage" "MagickMinifyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickModulateImage" "MagickModulateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMorphologyImage" "MagickMorphologyImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MorphologyMethod" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMorphologyImageChannel" "MagickMorphologyImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MorphologyMethod" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "KernelInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMotionBlurImage" "MagickMotionBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMotionBlurImageChannel" "MagickMotionBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickNegateImage" "MagickNegateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickNegateImageChannel" "MagickNegateImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickNewImage" "MagickNewImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickNextImage" "MagickNextImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickNormalizeImage" "MagickNormalizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickNormalizeImageChannel" "MagickNormalizeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOilPaintImage" "MagickOilPaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOpaquePaintImage" "MagickOpaquePaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOpaquePaintImageChannel" "MagickOpaquePaintImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOrderedPosterizeImage" "MagickOrderedPosterizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOrderedPosterizeImageChannel" "MagickOrderedPosterizeImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTransparentPaintImage" "MagickTransparentPaintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_invert  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_invert))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPingImage" "MagickPingImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPingImageBlob" "MagickPingImageBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPingImageFile" "MagickPingImageFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPolaroidImage" "MagickPolaroidImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPosterizeImage" "MagickPosterizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPreviousImage" "MagickPreviousImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQuantizeImage" "MagickQuantizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ColorspaceType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQuantizeImages" "MagickQuantizeImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ColorspaceType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRadialBlurImage" "MagickRadialBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRadialBlurImageChannel" "MagickRadialBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRaiseImage" "MagickRaiseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM5_arg6  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRandomThresholdImage" "MagickRandomThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRandomThresholdImageChannel" "MagickRandomThresholdImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickReadImage" "MagickReadImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickReadImageBlob" "MagickReadImageBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :void) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickReadImageFile" "MagickReadImageFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickReduceNoiseImage" "MagickReduceNoiseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRemapImage" "MagickRemapImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "DitherMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRemoveImage" "MagickRemoveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickResampleImage" "MagickResampleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "FilterTypes" () :type :type) )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickResetImagePage" "MagickResetImagePage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickResizeImage" "MagickResizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "FilterTypes" () :type :type) )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRollImage" "MagickRollImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRotateImage" "MagickRotateImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSampleImage" "MagickSampleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickScaleImage" "MagickScaleImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSegmentImage" "MagickSegmentImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSelectiveBlurImage" "MagickSelectiveBlurImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSelectiveBlurImageChannel" "MagickSelectiveBlurImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSeparateImageChannel" "MagickSeparateImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSepiaToneImage" "MagickSepiaToneImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImage" "MagickSetImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageAlphaChannel" "MagickSetImageAlphaChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "AlphaChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageBackgroundColor" "MagickSetImageBackgroundColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageBias" "MagickSetImageBias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageBluePrimary" "MagickSetImageBluePrimary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageBorderColor" "MagickSetImageBorderColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageChannelDepth" "MagickSetImageChannelDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageClipMask" "MagickSetImageClipMask")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageColor" "MagickSetImageColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageColormapColor" "MagickSetImageColormapColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageColorspace" "MagickSetImageColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageCompose" "MagickSetImageCompose")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "CompositeOperator" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageCompression" "MagickSetImageCompression")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "CompressionType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageDelay" "MagickSetImageDelay")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageDepth" "MagickSetImageDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageDispose" "MagickSetImageDispose")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "DisposeType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageCompressionQuality" "MagickSetImageCompressionQuality")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageExtent" "MagickSetImageExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageFilename" "MagickSetImageFilename")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageFormat" "MagickSetImageFormat")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageFuzz" "MagickSetImageFuzz")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageGamma" "MagickSetImageGamma")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageGravity" "MagickSetImageGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "GravityType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageGreenPrimary" "MagickSetImageGreenPrimary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageInterlaceScheme" "MagickSetImageInterlaceScheme")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "InterlaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageInterpolateMethod" "MagickSetImageInterpolateMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "InterpolatePixelMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageIterations" "MagickSetImageIterations")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageMatte" "MagickSetImageMatte")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageMatteColor" "MagickSetImageMatteColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageOpacity" "MagickSetImageOpacity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageOrientation" "MagickSetImageOrientation")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "OrientationType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImagePage" "MagickSetImagePage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageRedPrimary" "MagickSetImageRedPrimary")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageRenderingIntent" "MagickSetImageRenderingIntent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "RenderingIntent" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageResolution" "MagickSetImageResolution")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageScene" "MagickSetImageScene")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageTicksPerSecond" "MagickSetImageTicksPerSecond")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageType" "MagickSetImageType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageUnits" "MagickSetImageUnits")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ResolutionType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageWhitePoint" "MagickSetImageWhitePoint")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickShadeImage" "MagickShadeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickShadowImage" "MagickShadowImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSharpenImage" "MagickSharpenImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSharpenImageChannel" "MagickSharpenImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickShaveImage" "MagickShaveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickShearImage" "MagickShearImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSigmoidalContrastImage" "MagickSigmoidalContrastImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSigmoidalContrastImageChannel" "MagickSigmoidalContrastImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSketchImage" "MagickSketchImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSolarizeImage" "MagickSolarizeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSparseColorImage" "MagickSparseColorImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "SparseColorMethod" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSpliceImage" "MagickSpliceImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSpreadImage" "MagickSpreadImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickStripImage" "MagickStripImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSwirlImage" "MagickSwirlImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTintImage" "MagickTintImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTransformImageColorspace" "MagickTransformImageColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTransposeImage" "MagickTransposeImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTransverseImage" "MagickTransverseImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickThresholdImage" "MagickThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickThresholdImageChannel" "MagickThresholdImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickThumbnailImage" "MagickThumbnailImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTrimImage" "MagickTrimImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickUniqueImageColors" "MagickUniqueImageColors")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickUnsharpMaskImage" "MagickUnsharpMaskImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickUnsharpMaskImageChannel" "MagickUnsharpMaskImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  :double )
   (:p+ PARM4_arg5  :double )
   (:p+ PARM5_arg6  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickVignetteImage" "MagickVignetteImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWaveImage" "MagickWaveImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWhiteThresholdImage" "MagickWhiteThresholdImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWriteImage" "MagickWriteImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWriteImageFile" "MagickWriteImageFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWriteImages" "MagickWriteImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickWriteImagesFile" "MagickWriteImagesFile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "FILE" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageProgressMonitor" "MagickSetImageProgressMonitor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickAppendImages" "MagickAppendImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCoalesceImages" "MagickCoalesceImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCombineImages" "MagickCombineImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCompareImageChannels" "MagickCompareImageChannels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM4_arg5  (* :double) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCompareImages" "MagickCompareImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "MetricType" () :type :type) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickCompareImageLayers" "MagickCompareImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageLayerMethod" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDeconstructImages" "MagickDeconstructImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickEvaluateImages" "MagickEvaluateImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickEvaluateOperator" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFxImage" "MagickFxImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickFxImageChannel" "MagickFxImageChannel")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImage" "MagickGetImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageClipMask" "MagickGetImageClipMask")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageRegion" "MagickGetImageRegion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMergeImageLayers" "MagickMergeImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageLayerMethod" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMorphImages" "MagickMorphImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickMontageImage" "MagickMontageImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) )
   (:p+ PARM3_arg4  (* :char) )
   (:p+ PARM4_arg5  #.(swig-insert-id "MontageMode" () :type :type) )
   (:p+ PARM5_arg6  (* :char) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::let ((SWIG_arg5 PARM5_arg6))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4 SWIG_arg5))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickOptimizeImageLayers" "MagickOptimizeImageLayers")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickPreviewImages" "MagickPreviewImages")
  ((:p+ PARM0_wand  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "PreviewType" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_wand))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSimilarityImage" "MagickSimilarityImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   (:p+ PARM3_arg4  (* :double) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSteganoImage" "MagickSteganoImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickStereoImage" "MagickStereoImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTextureImage" "MagickTextureImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickTransformImage" "MagickTransformImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageOrientation" "MagickGetImageOrientation")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "OrientationType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageHistogram" "MagickGetImageHistogram")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageRenderingIntent" "MagickGetImageRenderingIntent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "RenderingIntent" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageUnits" "MagickGetImageUnits")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ResolutionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageColors" "MagickGetImageColors")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageCompressionQuality" "MagickGetImageCompressionQuality")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageDelay" "MagickGetImageDelay")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageChannelDepth" "MagickGetImageChannelDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ChannelType" () :type :type) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageDepth" "MagickGetImageDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageHeight" "MagickGetImageHeight")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageIterations" "MagickGetImageIterations")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageScene" "MagickGetImageScene")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageTicksPerSecond" "MagickGetImageTicksPerSecond")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageWidth" "MagickGetImageWidth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetNumberImages" "MagickGetNumberImages")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageBlob" "MagickGetImageBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImagesBlob" "MagickGetImagesBlob")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageVirtualPixelMethod" "MagickGetImageVirtualPixelMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "VirtualPixelMethod" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageVirtualPixelMethod" "MagickSetImageVirtualPixelMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "VirtualPixelMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "VirtualPixelMethod" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetFilename" "MagickGetFilename")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetFormat" "MagickGetFormat")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetFont" "MagickGetFont")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetHomeURL" "MagickGetHomeURL")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageArtifact" "MagickGetImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageArtifacts" "MagickGetImageArtifacts")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageProfiles" "MagickGetImageProfiles")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageProperty" "MagickGetImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageProperties" "MagickGetImageProperties")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetOption" "MagickGetOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetOptions" "MagickGetOptions")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQueryConfigureOption" "MagickQueryConfigureOption")
  ((:p+ PARM0_arg1  (* :char) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQueryConfigureOptions" "MagickQueryConfigureOptions")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQueryFonts" "MagickQueryFonts")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQueryFormats" "MagickQueryFormats")
  ((:p+ PARM0_arg1  (* :char) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* (* :char)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetColorspace" "MagickGetColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ColorspaceType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetCompression" "MagickGetCompression")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "CompressionType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetCopyright" "MagickGetCopyright")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetPackageName" "MagickGetPackageName")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetQuantumDepth" "MagickGetQuantumDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetQuantumRange" "MagickGetQuantumRange")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetReleaseDate" "MagickGetReleaseDate")
  (:void)
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::setq ACL_ffresult (swig-ff-call))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetVersion" "MagickGetVersion")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetPointsize" "MagickGetPointsize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (:double )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetSamplingFactors" "MagickGetSamplingFactors")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) ))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQueryFontMetrics" "MagickQueryFontMetrics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickQueryMultilineFontMetrics" "MagickQueryMultilineFontMetrics")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "DrawingWand" () :type :type)) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning ((* :double) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetGravity" "MagickGetGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "GravityType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetType" "MagickGetType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "ImageType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetInterlaceScheme" "MagickGetInterlaceScheme")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "InterlaceType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetInterpolateMethod" "MagickGetInterpolateMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "InterpolatePixelMethod" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetOrientation" "MagickGetOrientation")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "OrientationType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDeleteImageArtifact" "MagickDeleteImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDeleteImageProperty" "MagickDeleteImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickDeleteOption" "MagickDeleteOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetAntialias" "MagickGetAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetPage" "MagickGetPage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM3_arg4  (* #.(swig-insert-id "ssize_t" () :type :type)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ssize_t" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetSize" "MagickGetSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "size_t" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetSizeOffset" "MagickGetSizeOffset")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ssize_t" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickProfileImage" "MagickProfileImage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :void) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetAntialias" "MagickSetAntialias")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickBooleanType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetBackgroundColor" "MagickSetBackgroundColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "PixelWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetColorspace" "MagickSetColorspace")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ColorspaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetCompression" "MagickSetCompression")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "CompressionType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetCompressionQuality" "MagickSetCompressionQuality")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetDepth" "MagickSetDepth")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetExtract" "MagickSetExtract")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetFilename" "MagickSetFilename")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetFormat" "MagickSetFormat")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetFont" "MagickSetFont")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetGravity" "MagickSetGravity")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "GravityType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageArtifact" "MagickSetImageArtifact")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageProfile" "MagickSetImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :void) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetImageProperty" "MagickSetImageProperty")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetInterlaceScheme" "MagickSetInterlaceScheme")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "InterlaceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetInterpolateMethod" "MagickSetInterpolateMethod")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "InterpolatePixelMethod" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetOption" "MagickSetOption")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetOrientation" "MagickSetOrientation")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "OrientationType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetPage" "MagickSetPage")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetPassphrase" "MagickSetPassphrase")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetPointsize" "MagickSetPointsize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetResolution" "MagickSetResolution")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  :double )
   (:p+ PARM2_arg3  :double ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetResourceLimit" "MagickSetResourceLimit")
  ((:p+ PARM0_type  #.(swig-insert-id "ResourceType" () :type :type) )
   (:p+ PARM1_limit  #.(swig-insert-id "MagickSizeType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_type))
  (cl::let ((SWIG_arg1 PARM1_limit))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetSamplingFactors" "MagickSetSamplingFactors")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  (* :double) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetSize" "MagickSetSize")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetSizeOffset" "MagickSetSizeOffset")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "ssize_t" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetType" "MagickSetType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ImageType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickSetProgressMonitor" "MagickSetProgressMonitor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickProgressMonitor" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetResource" "MagickGetResource")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetResourceLimit" "MagickGetResourceLimit")
  ((:p+ PARM0_arg1  #.(swig-insert-id "ResourceType" () :type :type) ))
  (:returning (#.(swig-insert-id "MagickSizeType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetBackgroundColor" "MagickGetBackgroundColor")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "PixelWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetOrientationType" "MagickGetOrientationType")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "OrientationType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetCompressionQuality" "MagickGetCompressionQuality")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning (#.(swig-insert-id "size_t" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickGetImageProfile" "MagickGetImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("MagickRemoveImageProfile" "MagickRemoveImageProfile")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "size_t" () :type :type)) ))
  (:returning ((* :unsigned-char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("StreamImageCommand" "StreamImageCommand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "ImageInfo" () :type :type)) )
   (:p+ PARM1_arg2  :int )
   (:p+ PARM2_arg3  (* (* :char)) )
   (:p+ PARM3_arg4  (* (* :char)) )
   (:p+ PARM4_arg5  (* #.(swig-insert-id "ExceptionInfo" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetWandViewException" "GetWandViewException")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "ExceptionType" () :type :type)) ))
  (:returning ((* :char) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DuplexTransferWandViewIterator" "DuplexTransferWandViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM2_arg3  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM3_arg4  #.(swig-insert-id "DuplexTransferWandViewMethod" () :type :type) )
   (:p+ PARM4_arg5  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4)))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetWandViewIterator" "GetWandViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "GetWandViewMethod" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("IsWandView" "IsWandView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetWandViewIterator" "SetWandViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "SetWandViewMethod" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("TransferWandViewIterator" "TransferWandViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM2_arg3  #.(swig-insert-id "TransferWandViewMethod" () :type :type) )
   (:p+ PARM3_arg4  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3))))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("UpdateWandViewIterator" "UpdateWandViewIterator")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "UpdateWandViewMethod" () :type :type) )
   (:p+ PARM2_arg3  (* :void) ))
  (:returning (#.(swig-insert-id "MagickBooleanType" () :type :type) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::setq ACL_ffresult (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2)))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetWandViewWand" "GetWandViewWand")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "MagickWand" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetWandViewPixels" "GetWandViewPixels")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) ))
  (:returning ((* (* #.(swig-insert-id "PixelWand" () :type :type))) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("GetWandViewExtent" "GetWandViewExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "RectangleInfo" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance '#.(swig-insert-id "RectangleInfo" () :type :class) :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("SetWandViewDescription" "SetWandViewDescription")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) )
   (:p+ PARM1_arg2  (* :char) ))
  (:returning (:void )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (swig-ff-call SWIG_arg0 SWIG_arg1)))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("CloneWandView" "CloneWandView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "WandView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("DestroyWandView" "DestroyWandView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "WandView" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "WandView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewWandView" "NewWandView")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) ))
  (:returning ((* #.(swig-insert-id "WandView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
   (cl:let* ((address (swig-ff-call SWIG_arg0))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))


(swig-defun ("NewWandViewExtent" "NewWandViewExtent")
  ((:p+ PARM0_arg1  (* #.(swig-insert-id "MagickWand" () :type :type)) )
   (:p+ PARM1_arg2  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM2_arg3  #.(swig-insert-id "ssize_t" () :type :type) )
   (:p+ PARM3_arg4  #.(swig-insert-id "size_t" () :type :type) )
   (:p+ PARM4_arg5  #.(swig-insert-id "size_t" () :type :type) ))
  (:returning ((* #.(swig-insert-id "WandView" () :type :type)) )
   :strings-convert t)
  (cl::let ((ACL_ffresult swig.MagickWand:*void*)
        ACL_result)
  (cl::let ((SWIG_arg0 PARM0_arg1))
  (cl::let ((SWIG_arg1 PARM1_arg2))
  (cl::let ((SWIG_arg2 PARM2_arg3))
  (cl::let ((SWIG_arg3 PARM3_arg4))
  (cl::let ((SWIG_arg4 PARM4_arg5))
   (cl:let* ((address (swig-ff-call SWIG_arg0 SWIG_arg1 SWIG_arg2 SWIG_arg3 SWIG_arg4))
	  (new-inst (cl:make-instance 'ff:foreign-pointer :foreign-address address)))
     (cl:setq ACL_ffresult new-inst)) )))))
  (cl::if (cl::eq ACL_ffresult swig.MagickWand:*void*)
    (cl::values-list ACL_result)
   (cl::values-list (cl::cons ACL_ffresult ACL_result)))))



(cl::in-package :swig.MagickWand)

(macrolet ((swig-do-export ()
                 `(dolist (s ',*swig-export-list*)
                    (apply #'export s))))
   (swig-do-export))

(setq *swig-export-list* nil)

