cl-imagemagick is a Common Lisp wrapper for the ImageMagick libraries,
MagickWand.

It is known to work with Allegro Common Lisp 8.1 and ImageMagick
6.5.2-Q16 on Windows and 6.2.2 on Linux.


A Note on the SWIG Generated Interface

The file MagickWand.cl found in the architecture specific
subdirectories of windows/ and linux86/ were generated using the
Makefile found in this distribution by running ad up-to-date SWIG on
MagickWand.i. If you wish to generate this interface on additional
platforms, you can use this interface and the accompanying Makefile as
a reference. 

The swig command-line used to generate this interface:

  swig -allegrocl -nocwrap -DACL_LINUX -I/usr/include -isolate MagickWand.i

-nocwrap tells SWIG that we do not want to generate any C wrapper
 code. In many, but not all, cases it is possible to interface to a
 foreign library directly from Allegro CL, via lisp code only. There
 are some situations where the C code being wrapped cannot be
 adequately parsed, and it becomes necessary to interface to the
 foreign code through a C wrapper as well.

-D's and -I's. As with typical compilers, you can tell swig to #define
 certain constants, and tell it where to search for include (.h)
 files.

-isolate tells swig to place it's helper code in a unique
 directory. By default, all helper code is added to the "swig"
 package. using -isolate makes it possible to load multiple interface
 generated by swig into the same lisp without running into any
 conflicts.


Here is a brief discussion of the contents of MagickWand.i

  %module MagickWand

This names the Module currently being generated. In more concrete
terms, the name chosen here determines the name of the output file,
MagickWand.cl, and the common-lisp package into which the symbols
defined by this interface are created.

  %insert("lisphead")  %{
  #+linux (load "/usr/lib/libWand.so")
  #+mswindows (load "CORE_RL_wand_.dll")
  %}

This form insert code into the generated lisp wrapper. "lisphead"
means that it will be output after any SWIG helper functions, but
before any of the types, classes, or functions have been defined. On
linux, this form assumes a default installation, while on windows, the
assumption is that the path to the core ImageMagick libraries has been
added to your PATH environment variable.

  #ifdef ACL_WINDOWS
  %include "wand/MagickWand.h"
  
  %include "magick/magick-config.h"
  
  %include "magick/magick-type.h"
  %include "magick/MagickCore.h"
  %include "wand/animate.h"
  ...

First, SWIG interface files are parsed just as a C/C++ header file
would be, with the exception that by default, #include directives are
not followed. You can use the same preprocessor syntax as you would in
your foreign C/C++ code.

Second, most of the %include's you see here represent the #include's
that are found inside of wand/MagickWand.h. In particular, note that
while MagickCore.h is included, this is not creating a wrapper for the
entire MagickCore API. Rather, a few small types that are useful to
the MagickWand API are being included.


If you have any questions about the interface or suggestions, please
email us at support@franz.com.
