cl-imagemagick: A Common Lisp layer for ImageMagick

**********************************************************************

Table of contents:

   1. Description
   2. Author
   3. Author comments
   4. Documentation
   5. Platforms
   6. Dependencies
   7. Installation
   8. Configuration
   9. Licence
  10. Notes
  11. Examples
  12. Open Source 

**********************************************************************

   1. Description:

      cl-imagemagick is a Common Lisp wrapper for the ImageMagick
      libraries, MagickWand.

   2. Author:

      Mikel Bancroft

   3. Author comments:

      ImageMagick is a suite of tools allowing you to create, edit,
      and compose bitmap images. It provides powerful command-line
      tools to this effect, but also provides a number of APIs to make
      the same features available programmatically. Using SWIG, we
      have generated the foreign wrappers to the MagickWand API. 

   4. Platforms:

      It is known to work with Allegro Common Lisp 8.1 and ImageMagick 
      6.5.2-Q16 on Windows and 6.2.2 on Linux.

   5. Dependencies:

      ImageMagick
      swig (optionally if you are building on non windows/linux x86). 

   6. Installation:

      a. Make sure you have the ImageMagick libraries installed on
         your system.  We currently pre-generate foreign-function
         definitions on both the linux86 and windows platforms. If you
         wish to try this demo on another platform, please see the
         notes section (#10) of this README file.

      b. Download the cl-imagemagick repository from github.

      c. cd into the directory in which you've downloaded cl-imagemagick.

      d. start Allegro CL

      e. :cd demo

      f. :cl demo-thumb.cl

      This will compile and load the demo. To run it you'll be
      starting a server on the local machine via the function
      start-server.  This function takes an optional argument
      indicating the port on which the server listens. It defaults to
      8080. If that is acceptable, you can start the server by
      evaluating:

      g. (start-server)

      The server should now be up and running.

   7. Configuration:

      If you'd like to specify a different port, for example port
      9000, evaluate:

        (start-server 9000)

   8. Documentation:

      For more information please see the tech corner article on
      ImageMagick:

         http://franz.com/support/tech_corner/imagemagick052109.lhtml

   9. License:

      The aserve source code is licensed under the terms of the Lisp
      Lesser GNU Public License, known as the LLGPL. The LLGPL
      consists of a preamble and the LGPL. Where these conflict, the
      preamble takes precedence. cl-imagemagick is referenced in the
      preamble as the LIBRARY. 

         http://opensource.franz.com/preamble.html
 
  10. Notes:

      The file MagickWand.cl found in the architecture specific
      subdirectories of windows/ and linux86/ were generated using the
      Makefile found in this distribution by running an up-to-date
      SWIG on MagickWand.i. If you wish to generate this interface on
      additional platforms, you can use this interface and the
      accompanying Makefile as a reference. 

      The swig command-line used to generate this interface:

         swig -allegrocl -nocwrap -DACL_LINUX \
              -I/usr/include -isolate MagickWand.i

      -nocwrap tells SWIG that we do not want to generate any C wrapper
      code. In many, but not all, cases it is possible to interface to a
      foreign library directly from Allegro CL, via lisp code only. There
      are some situations where the C code being wrapped cannot be
      adequately parsed, and it becomes necessary to interface to the
      foreign code through a C wrapper as well.

      -D's and -I's. As with typical compilers, you can tell swig to
      #define certain constants, and tell it where to search for
      include (.h) files.

      -isolate tells swig to place it's helper code in a unique
      directory. By default, all helper code is added to the "swig"
      package. using -isolate makes it possible to load multiple interface
      generated by swig into the same lisp without running into any
      conflicts.

      Here is a brief discussion of the contents of MagickWand.i

        %module MagickWand

      This names the Module currently being generated. In more concrete
      terms, the name chosen here determines the name of the output file,
      MagickWand.cl, and the common-lisp package into which the symbols
      defined by this interface are created.

        %insert("lisphead")  %{
        #+linux (load "/usr/lib/libWand.so")
        #+mswindows (load "CORE_RL_wand_.dll")
        %}

      This form inserts code into the generated lisp wrapper. "lisphead"
      means that it will be output after any SWIG helper functions, but
      before any of the types, classes, or functions have been
      defined. On linux, this form assumes a default installation,
      while on windows, the assumption is that the path to the core
      ImageMagick libraries has been added to your PATH environment
      variable.

        #ifdef ACL_WINDOWS
        %include "wand/MagickWand.h"
  
        %include "magick/magick-config.h"
  
        %include "magick/magick-type.h"
        %include "magick/MagickCore.h"
        %include "wand/animate.h"
        ...

      First, SWIG interface files are parsed just as a C/C++ header
      file would be, with the exception that by default, #include
      directives are not followed. You can use the same preprocessor
      syntax as you would in your foreign C/C++ code.

      Second, most of the %include's you see here represent the
      #include's that are found inside of wand/MagickWand.h. In
      particular, note that while MagickCore.h is included, this is
      not creating a wrapper for the entire MagickCore API. Rather,
      a few small types that are useful to the MagickWand API are
      being included. 

      If you have any questions about the interface or suggestions,
      please email us at support@franz.com.

  11. Examples and Information:

      Please see:

        http://franz.com/support/tech_corner/imagemagick052109.lhtml 

  12. Open Source:

      This project is hosted on the http://opensource.franz.com
      site. There is an informal community support and development
      mailing list (opensource@franz.com) for these open source
      projects. We encourage you to take advantage by subscribing to
      the list by visiting http://opensource.franz.com/mailinglist.html. 
      Once you're subscribed, send email to opensource@franz.com with
      your questions, comments, suggestions, and patches.



